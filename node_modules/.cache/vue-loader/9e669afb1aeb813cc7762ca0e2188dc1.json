{"remainingRequest":"/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jlawrence/10x/apps/OmsVue/src/views/Orders/ImportInvoicesForm.vue?vue&type=style&index=0&id=01eedf4f&scoped=true&lang=css&","dependencies":[{"path":"/home/jlawrence/10x/apps/OmsVue/src/views/Orders/ImportInvoicesForm.vue","mtime":1585672524045},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.hide-file-picker {\n    position: fixed;\n    top: -1000;\n    display: none; /* probably wont work on safari*/\n}\n\n.steps {\n    /* height: 300px; */\n}\n\n.step-header {\n    border-radius: 4px;\n    color: white;\n    font-weight: bold;\n    padding: 1em;\n}\n.step-complete {\n    background: #9cc8e1;\n}\n\n.step-active {\n    background: #2184bf;\n}\n\n.step-incomplete {\n    background: #adadad;\n}\n\n.invoice-items-list {\n    overflow-y: auto;\n    overflow-x: hidden;\n    max-height: 400px;\n}\n\n.invoice-item {\n    margin-bottom: 10px;\n}\n",{"version":3,"sources":["ImportInvoicesForm.vue"],"names":[],"mappingsgqBA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"ImportInvoicesForm.vue","sourceRoot":"src/views/Orders","sourcesContent":["<template>\n    <div>\n        <h2 class=\"text-center\">Import Invoices</h2>\n        <div class=\"steps row mb-4 mt-4\">\n            <div class=\"col-sm-3\">\n                <div :class=\"{'step-header':true,...calcProgressClass(1)}\">1. Import Headers</div>\n            </div>\n            <div class=\"col-sm-3\">\n                <div :class=\"{'step-header':true,...calcProgressClass(2)}\">2. Import Details</div>\n            </div>\n            <div class=\"col-sm-3\">\n                <div :class=\"{'step-header':true,...calcProgressClass(3)}\">3. Upload</div>\n            </div>\n            <div class=\"col-sm-3\">\n                <div :class=\"{'step-header':true,...calcProgressClass(4)}\">4. Complete</div>\n            </div>\n        </div>\n        <div class=\"steps\">\n            <div class=\"step1\" v-if=\"step==1\">\n                <div class=\"mt-8 mb-8 text-center\" v-if=\"invoices.length == 0\">\n                    Import\n                    <b>Invoice Headers</b> from spreadsheet.\n                    <br />Ensure the structure of the sheet follows the\n                    <a\n                        href=\"/invoice_headers_template.csv\"\n                        target=\"_blank\"\n                    >Header Template</a>.\n                    <br />\n                    <br />\n                    <base-button type=\"primary\" @click=\"importInvoiceHeaders()\">{{ \"Import\" }}</base-button>\n                    <input\n                        type=\"file\"\n                        class=\"hide-file-picker\"\n                        id=\"input-excel-header\"\n                        @change=\"importInvoiceHeadersEl\"\n                        ref=\"invoiceHeadersFile\"\n                    />\n                </div>\n                <div v-else>\n                    <div class=\"overflow-hidden mb-3\">\n                        <base-button\n                            class=\"float-right\"\n                            type=\"warning\"\n                            size=\"sm\"\n                            @click=\"clearInvoiceItems()\"\n                        >Clear Items</base-button>\n                    </div>\n                    <div style=\"max-height:500px;overflow-y:scroll;\">\n                        <table class=\"table\">\n                            <thead>\n                                <tr>\n                                    <th scope=\"col\">Id</th>\n                                    <th scope=\"col\">Name</th>\n                                    <th scope=\"col\">Total</th>\n                                    <th scope=\"col\">Type</th>\n                                    <th scope=\"col\">Address</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr v-for=\"invoice in this.invoices\" :key=\"invoice.id\">\n                                    <th scope=\"row\">{{ invoice.id }}</th>\n                                    <td>{{ invoice.name }}</td>\n                                    <td>${{ currency(invoice.total) }}</td>\n                                    <td>{{ invoice.type.toUpperCase() }}</td>\n                                    <td style=\"white-space: pre-wrap\">{{ invoice.address }}</td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                    <div class=\"mt-4\">\n                        <!-- <base-button type=\"warning\" @click=\"closeDialog()\">Cancel</base-button> -->\n                        <base-button\n                            class=\"float-right\"\n                            type=\"primary\"\n                            @click=\"goToDetailsStep()\"\n                        >Next</base-button>\n                    </div>\n                </div>\n            </div>\n            <div class=\"step2\" v-if=\"step==2\">\n                <div class=\"mt-8 mb-8 text-center\" v-if=\"this.detailsUploaded==false\">\n                    Import\n                    <b>Invoice Details</b> from spreadsheet.\n                    <br />Ensure the structure of the sheet follows the\n                    <a\n                        href=\"/invoice_details_template.csv\"\n                        target=\"_blank\"\n                    >Detail Template</a>.\n                    <br />\n                    <br />\n                    <base-button type=\"primary\" @click=\"importInvoiceDetails()\">{{ \"Import\" }}</base-button>\n                    <input\n                        type=\"file\"\n                        class=\"hide-file-picker\"\n                        id=\"input-excel-header\"\n                        @change=\"importInvoiceDetailsEl\"\n                        ref=\"invoiceDetailsFile\"\n                    />\n                </div>\n                <div v-else class=\"mt-5\">\n                    <div class=\"row mb-4\">\n                        <div class=\"col-md-6\">\n                            <base-input disabled :value=\"invoices[invoiceIndex].name\" />\n                        </div>\n                        <div class=\"col-md-6 text-right\">\n                            <base-button type=\"default\" @click=\"previousInvoice()\">&lt;</base-button>\n                            {{ invoiceIndex + 1 }} / {{ invoices.length }}\n                            <base-button type=\"default\" @click=\"nextInvoice()\">&gt;</base-button>\n                        </div>\n                    </div>\n                    <div class=\"invoice-items-list\" v-if=\"invoices[invoiceIndex].items.length != 0\">\n                        <div class=\"row\">\n                            <div class=\"col-md-5\">\n                                <b>Item</b>\n                            </div>\n                            <div class=\"col-md-2\">\n                                <b>Qty</b>\n                            </div>\n                            <div class=\"col-md-2\">\n                                <b>Price</b>\n                            </div>\n                            <div class=\"col-md-2\">\n                                <b>Total</b>\n                            </div>\n                            <div class=\"col-md-1\"></div>\n                        </div>\n\n                        <div\n                            class=\"row invoice-item mt-2\"\n                            v-for=\"(item, index) in invoices[invoiceIndex].items\"\n                            :key=\"index\"\n                        >\n                            <div class=\"col-md-5\">\n                                <input\n                                    placeholder\n                                    name=\"name\"\n                                    class=\"form-control\"\n                                    v-model=\"invoices[invoiceIndex].items[index].item\"\n                                />\n                            </div>\n                            <div class=\"col-md-2\">\n                                <input\n                                    placeholder\n                                    name=\"name\"\n                                    class=\"form-control\"\n                                    v-model=\"invoices[invoiceIndex].items[index].quantity\"\n                                />\n                            </div>\n                            <div class=\"col-md-2\">\n                                <input\n                                    placeholder\n                                    type=\"number\"\n                                    min=\"0.01\"\n                                    max=\"100000\"\n                                    name=\"name\"\n                                    class=\"form-control\"\n                                    v-model=\"invoices[invoiceIndex].items[index].price\"\n                                />\n                            </div>\n                            <div\n                                class=\"col-md-2\"\n                            >${{currency(invoices[invoiceIndex].items[index].price * invoices[invoiceIndex].items[index].quantity)}}</div>\n                            <div class=\"col-md-1\">\n                                <base-button\n                                    type=\"warning\"\n                                    @click=\"deleteInvoiceItem(invoiceIndex, index)\"\n                                >&times;</base-button>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div\n                        class=\"invoice-invoice-list\"\n                        v-if=\"invoices[invoiceIndex].tasks.length != 0\"\n                    >\n                        <div class=\"row\">\n                            <div class=\"col-md-12\">\n                                <b>Tasks</b>\n                            </div>\n                        </div>\n\n                        <div\n                            class=\"row invoice-item mt-2\"\n                            v-for=\"(item, index) in invoices[invoiceIndex].tasks\"\n                            :key=\"index\"\n                        >\n                            <div class=\"col-md-11\">\n                                <input\n                                    placeholder\n                                    name=\"name\"\n                                    class=\"form-control\"\n                                    v-model=\"invoices[invoiceIndex].tasks[index]\"\n                                />\n                            </div>\n                            <div class=\"col-md-1\">\n                                <base-button\n                                    type=\"warning\"\n                                    @click=\"deleteInvoiceTask(invoiceIndex, index)\"\n                                >&times;</base-button>\n                            </div>\n                        </div>\n                    </div>\n\n                    <!-- <div v-if=\"invoiceItems.length != 0\" class=\"row invoice-total\">\n                    <div class=\"col-md-7\"></div>\n                    <div class=\"col-md-2 text-right\">\n                        <b>Total</b>\n                    </div>\n                    <div class=\"col-md-2\">\n                        <b>${{ currency(invoiceTotal) }}</b>\n                    </div>\n                    </div>-->\n\n                    <div class=\"row\">\n                        <div class=\"col-md-12 mt-4\">\n                            <base-button\n                                type=\"primary\"\n                                @click=\"goToHeadersStep()\"\n                            >{{ \"Previous Step\" }}</base-button>\n                            <base-button\n                                class=\"float-right\"\n                                type=\"primary\"\n                                @click=\"goToUploadStep()\"\n                            >{{ \"Next Step\" }}</base-button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"step3\" v-if=\"step==3\">\n                <div style=\"max-height:500px;overflow-y:scroll;\">\n                    <table class=\"table\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">Id</th>\n                                <th scope=\"col\">Name</th>\n                                <th scope=\"col\">Upload Status</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr v-for=\"invoice in this.invoices\" :key=\"invoice.id\">\n                                <th scope=\"row\">{{invoice.id}}</th>\n                                <td>{{invoice.name}}</td>\n                                <td\n                                    class=\"text-uppercase\"\n                                    :class=\"[getInvoiceStatusStyle(invoice.upload_status)]\"\n                                >{{invoice.upload_status}}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <div>\n                    Progress..\n                    <base-progress type=\"success\" :value=\"uploadProgress\" />\n                </div>\n                <div>\n                    <base-button\n                        type=\"primary\"\n                        @click=\"goToDetailsStep()\"\n                        :disabled=\"uploading\"\n                    >Previous Step</base-button>\n                    <base-button\n                        class=\"float-right\"\n                        type=\"primary\"\n                        @click=\"uploadInvoices()\"\n                    >Upload!</base-button>\n                </div>\n            </div>\n            <div class=\"step2\" v-if=\"step==4\">\n                <div class=\"mt-6 mb-4 text-center\">\n                    <h1>Import Complete!</h1>\n                    <br />\n                    <b>Orders Uploaded</b>\n                    <br />\n                    <b class=\"text-success\">{{completedUploads}}</b>\n                    <br />\n                    <b>Orders Failed</b>\n                    <br />\n                    <b class=\"text-warning\">{{failedUploads}}</b>\n                    <br />\n                    <br />\n                    <base-button\n                        v-if=\"failedUploads!==0\"\n                        type=\"primary\"\n                        @click=\"goToUploadStep()\"\n                    >{{ \"Retry\" }}</base-button>\n                </div>\n\n                <div class=\"row\">\n                    <div class=\"col-md-12 mt-4\">\n                        <base-button type=\"primary\" @click=\"goToUploadStep()\">{{ \"Previous Step\" }}</base-button>\n                        <base-button\n                            class=\"float-right\"\n                            type=\"primary\"\n                            @click=\"close()\"\n                        >{{ \"Close\" }}</base-button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport api from '@/api/order'\nimport flatPicker from 'vue-flatpickr-component'\nimport xlsx from 'xlsx'\nimport moment from 'moment'\n\n//https://stackoverflow.com/questions/2998784/how-to-output-integers-with-leading-zeros-in-javascript\nfunction pad(num, size) {\n    var s = num + ''\n    while (s.length < size) s = '0' + s\n    return s\n}\n\nfunction now() {\n    var dateObj = new Date()\n    var month = dateObj.getUTCMonth() + 1\n    var day = dateObj.getUTCDate()\n    var year = dateObj.getUTCFullYear()\n\n    const date = year + '-' + pad(month, 2) + '-' + pad(day, 2)\n    //console.log(date)\n    return date\n}\n\nfunction parseFormatted(numStr) {\n    if (!numStr) return 0\n    return parseFloat(numStr.replace(/,/g, '').replace(/\\$/g, ''))\n}\n\nfunction sampleInvoice() {\n    let invoice = new Invoice()\n    invoice.id = '0001234213'\n    invoice.name = 'Sample Invoice Item'\n    invoice.date = '5/12/2019'\n    invoice.salesTax = 5000\n    invoice.total = 25000\n    invoice.address = 'yolo'\n\n    let item = new InvoiceItem()\n    item.item = 'Sample Item'\n    item.description = 'yolo'\n    item.quantity = 1\n    item.price = 25000\n    invoice.items.push(item)\n\n    //return invoice\n    return []\n}\n\nfunction invoiceItems(count) {\n    let invoices = []\n    for (var i = 0; i < count; i++) {\n        let invoice = sampleInvoice()\n        invoice.id = '0012312' + i\n        invoices.push(invoice)\n    }\n    return invoices\n}\n\nclass Invoice {\n    id = ''\n    name = ''\n    address = ''\n    total = 0\n    salesTax = 0\n    customerId = 0\n    customerName = ''\n    notes = ''\n    items = []\n    // array of strings\n    tasks = []\n    // upload status, not an actual part of the model\n    upload_status = 'pending'\n}\n\nclass InvoiceItem {\n    item = ''\n    description = ''\n    quantity = 0\n    price = 0\n}\n\nexport default {\n    name: 'import-invoices-form',\n    components: { flatPicker },\n    props: [],\n    data: () => {\n        return {\n            model: {},\n            //invoices: [...invoiceItems(10)],\n            invoices: [],\n            uploading: false,\n            hasErrors: false,\n            step: 1, // 1, 2, 3 or 4\n            // step: 2, // 1, 2 or 3\n            invoiceIndex: 0, // for details page\n            detailsUploaded: false,\n        }\n    },\n    created() {\n        this.model.date = now()\n    },\n    methods: {\n        reset() {\n            this.invoices = []\n            this.uploading = false\n            this.step = 1\n            this.invoiceIndex = 0\n            this.detailsUploaded = false\n        },\n        goToHeadersStep() {\n            this.step = 1\n        },\n        goToDetailsStep() {\n            this.step = 2\n        },\n        goToUploadStep() {\n            this.step = 3\n        },\n        goToCompleteStep() {\n            this.step = 4\n        },\n        nextInvoice() {\n            if (this.invoiceIndex < this.invoices.length - 1)\n                this.invoiceIndex += 1\n        },\n        previousInvoice() {\n            if (this.invoiceIndex > 0) this.invoiceIndex -= 1\n        },\n        clearInvoiceItems() {\n            //while (this.invoices.length > 0) this.invoices.pop()\n            this.invoices = []\n\n            this.detailsUploaded = false\n            this.invoiceIndex = 0\n        },\n        deleteInvoiceItem(invoiceIndex, index) {\n            this.invoices[invoiceIndex].items.splice(index, 1)\n        },\n        deleteInvoiceTask(invoiceIndex, index) {\n            this.invoices[invoiceIndex].tasks.splice(index, 1)\n        },\n        close() {\n            this.errors.clear()\n            // clear steps and data\n            this.reset()\n\n            this.step = 1\n            this.$emit('cancel')\n        },\n        create() {},\n        importInvoiceHeaders() {\n            this.$refs.invoiceHeadersFile.click()\n        },\n        importInvoiceHeadersEl(e) {\n            //console.log('loading file')\n            var reader = new FileReader()\n            reader.readAsArrayBuffer(e.target.files[0])\n            reader.onload = e => {\n                const data = new Uint8Array(reader.result)\n                const wb = xlsx.read(data, { type: 'array', raw: false })\n\n                const worksheet = wb.Sheets[wb.SheetNames[0]]\n\n                const rows = xlsx.utils.sheet_to_json(worksheet, {\n                    raw: false,\n                    header: 'A', // just generate plain rows\n                })\n\n                rows.splice(0, 4)\n                //console.log(rows)\n\n                const HEADER_CUSTOMER_ID = 'A'\n                const HEADER_INVOICE_NO = 'B'\n                const HEADER_DATE = 'D'\n                const HEADER_TOTAL = 'F'\n                const HEADER_ADDRESS_1 = 'H'\n                const HEADER_ADDRESS_2 = 'I'\n                const HEADER_CITY = 'J'\n                const HEADER_COUNTRY = 'K'\n                const HEADER_ORDER_TYPE = 'L'\n                const HEADER_ASSIGNED_TO = 'M'\n\n                // this.invoiceItems = []\n                let invoices = []\n\n                for (let row of rows) {\n                    // console.log(row)\n                    // console.log(row['Invoice/CM #'])\n                    if (!row[HEADER_INVOICE_NO]) continue\n                    if (row[HEADER_INVOICE_NO] == 'Total') continue\n\n                    let invoice = new Invoice()\n                    invoice.id = row[HEADER_INVOICE_NO]\n                    invoice.name = row[HEADER_CUSTOMER_ID]\n                    invoice.type = row[HEADER_ORDER_TYPE].toLowerCase()\n                    invoice.customerName = row[HEADER_CUSTOMER_ID]\n                    invoice.customerId = row[HEADER_CUSTOMER_ID]\n                    invoice.schedule_at =\n                        moment(row[HEADER_DATE], 'MM/DD/YY').format(\n                            'YYYY-MM-DD'\n                        ) + ' 11:00:00'\n                    // console.log(\n                    //     moment(row[HEADER_DATE], 'MM/DD/YY').format(\n                    //         'YYYY-MM-DD'\n                    //     ) + ' 11:00:00'\n                    // )\n                    invoice.assignee = row[HEADER_ASSIGNED_TO]\n                    //invoice.salesTax = parseFormatted(row['Sales Tax'])\n                    invoice.total = parseFormatted(row[HEADER_TOTAL])\n\n                    let address = row[HEADER_ADDRESS_1] + '\\n'\n                    address += row[HEADER_ADDRESS_2] + '\\n'\n                    address += row[HEADER_CITY] + '\\n'\n                    address += row[HEADER_COUNTRY]\n                    invoice.address = address\n\n                    invoices.push(invoice)\n                }\n\n                this.invoices = invoices\n                this.detailsUploaded = false\n            }\n        },\n        importInvoiceDetails() {\n            this.$refs.invoiceDetailsFile.click()\n        },\n        importInvoiceDetailsEl(e) {\n            var reader = new FileReader()\n            reader.readAsArrayBuffer(e.target.files[0])\n            reader.onload = e => {\n                const data = new Uint8Array(reader.result)\n                const wb = xlsx.read(data, { type: 'array' })\n\n                const worksheet = wb.Sheets[wb.SheetNames[0]]\n\n                const rows = xlsx.utils.sheet_to_json(worksheet, {\n                    raw: false,\n                    header: 'A',\n                })\n\n                // create a map of invoice items\n                let invoiceMap = {}\n                for (let invoice of this.invoices)\n                    invoiceMap[invoice.id] = invoice\n\n                //console.log(invoiceMap)\n\n                const DETAIL_INVOICE_NO = 'A'\n                const DETAIL_NAME = 'B'\n                const DETAIL_DESCRIPTION = 'C'\n                const DETAIL_QUANTITY = 'G'\n                const DETAIL_UNIT_PRICE = 'H'\n\n                rows.splice(0, 4)\n                //console.log(rows)\n                for (let row of rows) {\n                    //console.log(row)\n                    let invoiceId = row[DETAIL_INVOICE_NO]\n                    //console.log(invoiceId)\n                    if (!invoiceId) continue\n\n                    if (!invoiceMap.hasOwnProperty(invoiceId)) continue\n                    //console.log('invoice item valid')\n\n                    const price = row[DETAIL_UNIT_PRICE]\n                    const quantity = row[DETAIL_QUANTITY]\n                    let invoice = invoiceMap[invoiceId]\n                    //console.log(price)\n                    if (!this.isRowATask(row)) {\n                        let item = new InvoiceItem()\n                        item.item = row[DETAIL_NAME]\n                        item.quantity = parseFormatted(row[DETAIL_QUANTITY])\n                        item.price = parseFormatted(row[DETAIL_UNIT_PRICE])\n                        item.description = row[DETAIL_DESCRIPTION]\n\n                        invoice.items.push(item)\n                    } else {\n                        invoice.tasks.push(row[DETAIL_DESCRIPTION])\n                    }\n                }\n\n                this.detailsUploaded = true\n            }\n        },\n        isRowATask(row) {\n            const DETAIL_QUANTITY = 'G'\n            const DETAIL_UNIT_PRICE = 'H'\n\n            const price = row[DETAIL_UNIT_PRICE]\n            if (!price) return true\n            if (parseFormatted(price) == 0) return true\n\n            const quantity = row[DETAIL_QUANTITY]\n            if (!quantity) return true\n            if (parseFormatted(quantity) == 0) return true\n\n            return false\n        },\n        currency(num) {\n            //console.log(num)\n            return num.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n        },\n        calcProgressClass(curStep) {\n            if (curStep < this.step) return { 'step-complete': true }\n            if (curStep == this.step) return { 'step-active': true }\n            if (curStep > this.step) return { 'step-incomplete': true }\n        },\n        getInvoiceStatusStyle(status) {\n            if (status == 'pending') return { 'text-muted': true }\n            if (status == 'complete') return { 'text-success': true }\n            if (status == 'error') return { 'text-warning': true }\n        },\n        uploadInvoices() {\n            this.uploading = true\n\n            // reset all errors to pending\n            this.invoices.map(x => {\n                if (x.upload_status == 'error') x.upload_status = 'pending'\n            })\n            this.uploadOne()\n        },\n        uploadOne() {\n            let nextItem = this.invoices.find(x => x.upload_status == 'pending')\n            if (nextItem == undefined) {\n                // no more items left to upload\n                this.uploading = false\n                this.goToCompleteStep()\n                console.log('no more items')\n                return\n            }\n\n            api.uploadInvoice(nextItem)\n                .then(res => {\n                    nextItem.upload_status = 'complete'\n                })\n                .catch(error => {\n                    nextItem.upload_status = 'error'\n                })\n                .finally(() => {\n                    // continue uploading\n                    this.uploadOne()\n                })\n        },\n    },\n    mounted() {},\n    computed: {\n        invoiceCount() {\n            return this.invoices.length\n        },\n        uploadProgress() {\n            let uploaded = this.invoices.filter(\n                x => x.upload_status == 'complete'\n            ).length\n\n            //console.log()\n            return Math.round((uploaded / this.invoices.length) * 100)\n        },\n        completedUploads() {\n            return this.invoices.filter(x => x.upload_status == 'complete')\n                .length\n        },\n        failedUploads() {\n            return this.invoices.filter(x => x.upload_status != 'complete')\n                .length\n        },\n    },\n}\n</script>\n<style scoped>\n.hide-file-picker {\n    position: fixed;\n    top: -1000;\n    display: none; /* probably wont work on safari*/\n}\n\n.steps {\n    /* height: 300px; */\n}\n\n.step-header {\n    border-radius: 4px;\n    color: white;\n    font-weight: bold;\n    padding: 1em;\n}\n.step-complete {\n    background: #9cc8e1;\n}\n\n.step-active {\n    background: #2184bf;\n}\n\n.step-incomplete {\n    background: #adadad;\n}\n\n.invoice-items-list {\n    overflow-y: auto;\n    overflow-x: hidden;\n    max-height: 400px;\n}\n\n.invoice-item {\n    margin-bottom: 10px;\n}\n</style>"]}]}