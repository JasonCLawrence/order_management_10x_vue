{"remainingRequest":"/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jlawrence/10x/apps/OmsVue/src/components/BaseNav.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/jlawrence/10x/apps/OmsVue/src/components/BaseNav.vue","mtime":1585672524041},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport NavbarToggleButton from './NavbarToggleButton'\n\nexport default {\n    name: 'base-nav',\n    components: {\n        NavbarToggleButton,\n    },\n    props: {\n        type: {\n            type: String,\n            default: '',\n            description: 'Navbar type (e.g default, primary etc)',\n        },\n        title: {\n            type: String,\n            default: '',\n            description: 'Title of navbar',\n        },\n        contentId: {\n            type: [String, Number],\n            default: Math.random().toString(),\n            description:\n                \"Explicit id for the menu. By default it's a generated random number\",\n        },\n        containerClasses: {\n            type: [String, Object, Array],\n            default: 'container-fluid',\n        },\n        transparent: {\n            type: Boolean,\n            default: false,\n            description: 'Whether navbar is transparent',\n        },\n        expand: {\n            type: Boolean,\n            default: false,\n            description:\n                'Whether navbar should contain `navbar-expand-lg` class',\n        },\n        showToggleButton: {\n            type: Boolean,\n            default: true,\n        },\n    },\n    data() {\n        return {\n            toggled: false,\n            paths: [],\n        }\n    },\n    methods: {\n        closeMenu() {\n            this.toggled = false\n        },\n        calcPath() {\n            // generate path\n            let pathSplit = this.$route.path.split('/')\n            pathSplit.splice(0, 1) // remove\n\n            let paths = []\n            let runningPath = ''\n            for (let segment of pathSplit) {\n                runningPath += '/' + segment\n\n                paths.push({\n                    path: runningPath,\n                    text: segment,\n                })\n            }\n\n            this.paths = paths\n            console.log(paths)\n        },\n    },\n    mounted() {\n        this.calcPath()\n    },\n    watch: {\n        $route(to, from) {\n            console.log('new path')\n            this.calcPath()\n        },\n    },\n}\n",{"version":3,"sources":["BaseNav.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"BaseNav.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <nav\n        class=\"navbar\"\n        :class=\"[\n            {'navbar-expand-md': expand},\n            {'navbar-transparent': transparent},\n            {[`bg-${type}`]: type}\n         ]\"\n    >\n        <div :class=\"containerClasses\">\n            <slot name=\"brand\">\n                <!-- <router-link\n                    :to=\"$route.path\"\n                    class=\"h4 mb-0 text-white text-uppercase d-none d-lg-inline-block\"\n                >{{$route.name}}</router-link>-->\n                <template v-for=\"(path, key) in paths\">\n                    <span\n                        class=\"h4 mb-0 text-lg text-white text-uppercase d-none d-lg-inline-block\"\n                        :key=\"key + 'span'\"\n                        v-if=\"key != 0\"\n                    >&nbsp;/&nbsp;</span>\n                    <router-link\n                        :to=\"path.path\"\n                        class=\"h4 mb-0 text-lg text-white text-uppercase d-none d-lg-inline-block\"\n                        :key=\"key\"\n                    >{{path.text}}</router-link>\n                </template>\n            </slot>\n            <navbar-toggle-button\n                v-if=\"showToggleButton\"\n                :toggled=\"toggled\"\n                :target=\"contentId\"\n                @click.native.stop=\"toggled = !toggled\"\n            >\n                <span class=\"navbar-toggler-icon\"></span>\n            </navbar-toggle-button>\n\n            <div\n                class=\"collapse navbar-collapse\"\n                :class=\"{show: toggled}\"\n                :id=\"contentId\"\n                v-click-outside=\"closeMenu\"\n            >\n                <slot :close-menu=\"closeMenu\"></slot>\n            </div>\n        </div>\n    </nav>\n</template>\n<script>\nimport NavbarToggleButton from './NavbarToggleButton'\n\nexport default {\n    name: 'base-nav',\n    components: {\n        NavbarToggleButton,\n    },\n    props: {\n        type: {\n            type: String,\n            default: '',\n            description: 'Navbar type (e.g default, primary etc)',\n        },\n        title: {\n            type: String,\n            default: '',\n            description: 'Title of navbar',\n        },\n        contentId: {\n            type: [String, Number],\n            default: Math.random().toString(),\n            description:\n                \"Explicit id for the menu. By default it's a generated random number\",\n        },\n        containerClasses: {\n            type: [String, Object, Array],\n            default: 'container-fluid',\n        },\n        transparent: {\n            type: Boolean,\n            default: false,\n            description: 'Whether navbar is transparent',\n        },\n        expand: {\n            type: Boolean,\n            default: false,\n            description:\n                'Whether navbar should contain `navbar-expand-lg` class',\n        },\n        showToggleButton: {\n            type: Boolean,\n            default: true,\n        },\n    },\n    data() {\n        return {\n            toggled: false,\n            paths: [],\n        }\n    },\n    methods: {\n        closeMenu() {\n            this.toggled = false\n        },\n        calcPath() {\n            // generate path\n            let pathSplit = this.$route.path.split('/')\n            pathSplit.splice(0, 1) // remove\n\n            let paths = []\n            let runningPath = ''\n            for (let segment of pathSplit) {\n                runningPath += '/' + segment\n\n                paths.push({\n                    path: runningPath,\n                    text: segment,\n                })\n            }\n\n            this.paths = paths\n            console.log(paths)\n        },\n    },\n    mounted() {\n        this.calcPath()\n    },\n    watch: {\n        $route(to, from) {\n            console.log('new path')\n            this.calcPath()\n        },\n    },\n}\n</script>\n<style>\n</style>\n"]}]}