{"remainingRequest":"/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jlawrence/10x/apps/OmsVue/src/views/Orders/OrderTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/jlawrence/10x/apps/OmsVue/src/views/Orders/OrderTable.vue","mtime":1585672524045},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport _ from 'lodash'\nimport QueryFilter from './QueryFilter.vue'\nimport ChangeOrdersDriver from './ChangeOrdersDriver.vue'\nimport ChangeOrdersWarehouse from './ChangeOrdersWarehouse.vue'\n\nexport default {\n    name: 'fleet-table',\n    components: { QueryFilter, ChangeOrdersDriver, ChangeOrdersWarehouse },\n    props: {\n        type: {\n            type: String,\n        },\n        title: String,\n    },\n    data() {\n        return {\n            query: '',\n            page: 1,\n            shouldShowFilters: false,\n            filters: {},\n            bulkAction: 'none',\n            ordersMainCheck: false,\n        }\n    },\n\n    mounted() {\n        if (this.$route.query.query) this.query = this.$route.query.query\n        this.doSearch()\n    },\n\n    methods: {\n        bulkSetDriver() {\n            this.$refs.changeOrdersDriverDialog.show()\n        },\n        bulkDriverSuccess() {\n            this.doSearch()\n            this.ordersMainCheck = false\n        },\n        bulkSetWarehouse() {\n            this.$refs.changeOrdersWarehouseDialog.show()\n        },\n        bulkWarehouseSuccess() {\n            this.doSearch()\n            this.ordersMainCheck = false\n        },\n        bulkDriverError() {},\n        bulkSetIncomplete() {\n            this.$swal\n                .fire({\n                    title: 'Mark Orders as Complete?',\n                    text: `Are you sure you want to mark these orders as complete?`,\n                    type: 'warning',\n                    showCancelButton: true,\n                    confirmButtonColor: '#3085d6',\n                    cancelButtonColor: '#d33',\n                    confirmButtonText: 'Yes',\n                })\n                .then(result => {\n                    if (result.value) {\n                        this.$store\n                            .dispatch('orders/bulkSetIncomplete', {\n                                orders: this.checkedOrders,\n                            })\n                            .then(x => {\n                                this.$swal.fire(\n                                    'Success!',\n                                    'Selected orders were marked as complete',\n                                    'success'\n                                )\n\n                                this.ordersMainCheck = false\n                                this.doSearch()\n                            })\n                            .catch(x => {\n                                this.$swal.fire(\n                                    'Error!',\n                                    'There was an error marking orders as complete',\n                                    'error'\n                                )\n                            })\n                    }\n                })\n        },\n        bulkDelete() {\n            this.$swal\n                .fire({\n                    title: 'Delete Orders?',\n                    text: `Are you sure you want to delete these orders?`,\n                    type: 'warning',\n                    showCancelButton: true,\n                    confirmButtonColor: '#3085d6',\n                    cancelButtonColor: '#d33',\n                    confirmButtonText: 'Yes',\n                })\n                .then(result => {\n                    if (result.value) {\n                        this.$store\n                            .dispatch('orders/bulkDelete', {\n                                orders: this.checkedOrders,\n                            })\n                            .then(x => {\n                                this.$swal.fire(\n                                    'Success!',\n                                    'Selected orders were deleted',\n                                    'success'\n                                )\n\n                                this.doSearch()\n                            })\n                            .catch(x => {\n                                this.$swal.fire(\n                                    'Error!',\n                                    'Error deleting selected orders',\n                                    'error'\n                                )\n                            })\n\n                        this.ordersMainCheck = false\n                    }\n                })\n        },\n        toggleChecked() {\n            // if there's a checked item then check the rest\n            if (this.checkedOrders.length != this.orders.length) {\n                this.checkAllItems()\n            } else {\n                // if all are checked, then uncheck them\n                this.unCheckAllItems()\n            }\n        },\n        checkAllItems() {\n            for (let order of this.orders) {\n                order.checked = true\n            }\n        },\n        unCheckAllItems() {\n            for (let order of this.orders) {\n                order.checked = false\n            }\n        },\n        applyBulkAction() {},\n        showFilters() {\n            this.shouldShowFilters = true\n            return false\n        },\n        hideFilters() {\n            this.shouldShowFilters = false\n            return false\n        },\n        updateQuery: _.debounce(function(query) {\n            this.query = query\n            this.$router.push({ query: { query: this.query } })\n            this.doSearch()\n        }, 200),\n        changePage: function(page) {\n            this.page = page\n            this.$router.push({\n                query: { page: page, query: this.query, ...this.filters },\n            })\n            this.doSearch()\n        },\n        doSearch() {\n            this.$store.dispatch('orders/fetch', {\n                query: this.query,\n                filters: this.filters,\n                page: this.page,\n            })\n        },\n        filtersChanged(filters) {\n            // requery\n            console.log('filters changed')\n            this.filters = filters\n            this.doSearch()\n        },\n        view(index) {\n            this.$router.push({ path: `orders/${index}` })\n        },\n        deleteItem(id) {\n            let item = this.orders.find(el => el.id == id)\n\n            this.$swal\n                .fire({\n                    title: 'Delete Order?',\n                    text: `Are you sure you want to delete this order?`,\n                    type: 'warning',\n                    showCancelButton: true,\n                    confirmButtonColor: '#3085d6',\n                    cancelButtonColor: '#d33',\n                    confirmButtonText: 'Yes, delete it!',\n                })\n                .then(result => {\n                    if (result.value) {\n                        this.$store\n                            .dispatch('orders/delete', id)\n                            .then(x => {\n                                this.$swal.fire(\n                                    'Deleted!',\n                                    'Your order has been deleted.',\n                                    'success'\n                                )\n                            })\n                            .catch(x => {\n                                this.$swal.fire(\n                                    'Error!',\n                                    'Unable to delete order!',\n                                    'error'\n                                )\n                            })\n                    }\n                })\n        },\n        currency(num) {\n            return num.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n        },\n    },\n\n    computed: {\n        checkedOrders() {\n            return this.$store.state.orders.items.filter(x => x.checked == true)\n        },\n        orders() {\n            return this.$store.state.orders.items\n        },\n        pagination() {\n            return this.$store.state.orders.pagination\n        },\n    },\n\n    watch: {\n        filters: {\n            handler() {\n                console.log('doing search')\n                this.doSearch()\n            },\n            deep: true,\n        },\n    },\n}\n",{"version":3,"sources":["OrderTable.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"OrderTable.vue","sourceRoot":"src/views/Orders","sourcesContent":["<template>\n    <div class=\"card shadow\" :class=\"type === 'dark' ? 'bg-default': ''\">\n        <change-orders-driver\n            ref=\"changeOrdersDriverDialog\"\n            :orders=\"checkedOrders\"\n            @success=\"bulkDriverSuccess()\"\n        />\n\n        <change-orders-warehouse\n            ref=\"changeOrdersWarehouseDialog\"\n            :orders=\"checkedOrders\"\n            @success=\"bulkWarehouseSuccess()\"\n        />\n\n        <div class=\"card-header border-0\" :class=\"type === 'dark' ? 'bg-transparent': ''\">\n            <div class=\"row\">\n                <div class=\"col-md-8\">\n                    <base-input\n                        placeholder=\"Filter...\"\n                        addon-right-icon=\"ni ni-zoom-split-in\"\n                        v-model=\"query\"\n                        @input=\"updateQuery\"\n                    ></base-input>\n                </div>\n                <div class=\"col-md-2 text-right\">\n                    <base-button type=\"primary\" block @click=\"$emit('add')\">Create Order</base-button>\n                </div>\n                <div class=\"col-md-2 text-right\">\n                    <base-button type=\"primary\" block @click=\"$emit('import')\">Import Invoices</base-button>\n                </div>\n            </div>\n            <div v-if=\"shouldShowFilters == false\">\n                <base-button size=\"sm\" @click=\"showFilters()\">show additional filters</base-button>\n            </div>\n            <template v-else>\n                <query-filter ref=\"queryFilter\" :model=\"filters\" @input=\"filtersChanged\" />\n                <base-button size=\"sm\" @click=\"hideFilters()\">hide additional filters</base-button>\n            </template>\n        </div>\n\n        <div\n            class=\"bulk-actions\"\n            style=\"overflow:hidden;\"\n            v-show=\"this.checkedOrders.length>0 || true\"\n        >\n            <div style=\"width:50%; float:left;\">\n                <span>Bulk Actions:</span>\n                <br />\n                <base-button\n                    size=\"sm\"\n                    :disabled=\"this.checkedOrders.length==0\"\n                    @click=\"bulkSetDriver\"\n                >Set Driver</base-button>\n                <base-button\n                    size=\"sm\"\n                    :disabled=\"this.checkedOrders.length==0\"\n                    @click=\"bulkSetWarehouse\"\n                >Set Warehouse</base-button>\n                <base-button\n                    size=\"sm\"\n                    :disabled=\"this.checkedOrders.length==0\"\n                    @click=\"bulkSetIncomplete\"\n                >Set Incomplete</base-button>\n                <base-button\n                    size=\"sm\"\n                    :disabled=\"this.checkedOrders.length==0\"\n                    type=\"warning\"\n                    @click=\"bulkDelete\"\n                >Delete</base-button>\n            </div>\n            <div style=\"width:50%; float:left;overflow:hidden;text-align:right;\">\n                <span>Time:</span>\n                <br />\n                <base-button size=\"sm\" @click=\"bulkSetDriver\">Today</base-button>\n                <base-button size=\"sm\" @click=\"bulkSetWarehouse\">Yesterday</base-button>\n                <base-button size=\"sm\" @click=\"bulkSetIncomplete\">All</base-button>\n            </div>\n        </div>\n\n        <div class=\"table-responsive\">\n            <!-- <div>\n                <select v-model=\"bulkAction\">\n                    <option value=\"none\" selected>Bulk Actions</option>\n                    <option value=\"set_driver\">Set Driver</option>\n                    <option value=\"set_customer\">Set Customer</option>\n                    <option value=\"set_incomplete\">Set Driver</option>\n                </select>\n                <base-button @click=\"applyBulkAction\" :disabled=\"this.checkedOrders.length==0\">Apply</base-button>\n            </div>-->\n            <base-table\n                class=\"table align-items-center table-flush\"\n                :class=\"type === 'dark' ? 'table-dark': ''\"\n                :thead-classes=\"type === 'dark' ? 'thead-dark': 'thead-light'\"\n                tbody-classes=\"list\"\n                :data=\"orders\"\n            >\n                <template slot=\"columns\">\n                    <th>\n                        <!-- <input type=\"checkbox\" @click=\"toggleChecked\" /> -->\n                        <base-checkbox :model=\"ordersMainCheck\" @click=\"toggleChecked\" />\n                    </th>\n                    <th>Invoice Number</th>\n                    <th>Customer</th>\n                    <th>Total</th>\n                    <th>Type</th>\n                    <th>Driver</th>\n                    <th>Tasks</th>\n                    <th>Warehouse Released</th>\n                    <th>Completed</th>\n                    <th>Actions</th>\n                </template>\n\n                <template slot-scope=\"{row}\">\n                    <td>\n                        <!-- <input type=\"checkbox\" v-model=\"row.checked\" /> -->\n                        <base-checkbox v-model=\"row.checked\" />\n                    </td>\n                    <td>{{row.invoice_id}}</td>\n                    <td>{{row.customer.name}}</td>\n                    <td>${{currency(row.invoice_total)}}</td>\n                    <td>{{row.type.toUpperCase()}}</td>\n\n                    <td v-if=\"row.driver\">{{row.driver.first_name}} {{ row.driver.last_name }}</td>\n                    <td v-else>---</td>\n\n                    <td v-if=\"row.type=='invoice'\">\n                        {{row.completedTasks}} / {{row.totalTasks}}\n                        <base-progress\n                            type=\"success\"\n                            :show-percentage=\"false\"\n                            class=\"pt-0\"\n                            :value=\"row.taskCompletion\"\n                        />\n                    </td>\n                    <td v-else></td>\n\n                    <td>\n                        <span v-if=\"row.warehouse_signed==1\" class=\"text-success\">RELEASED</span>\n                        <span v-else class=\"text-danger\">UNRELEASED</span>\n                    </td>\n\n                    <td>\n                        <span v-if=\"row.completed\" class=\"text-success\">COMPLETE</span>\n                        <span v-else class=\"text-danger\">INCOMPLETE</span>\n                    </td>\n\n                    <td>\n                        <base-button type=\"primary\" @click=\"view(row.id)\">Edit</base-button>\n                        <base-button type=\"danger\" @click=\"deleteItem(row.id)\">Delete</base-button>\n                    </td>\n                </template>\n            </base-table>\n        </div>\n\n        <div\n            class=\"card-footer d-flex justify-content-end\"\n            :class=\"type === 'dark' ? 'bg-transparent': ''\"\n        >\n            <base-pagination\n                v-if=\"pagination!=null\"\n                :perPage=\"pagination.pageSize\"\n                :value=\"pagination.page\"\n                :total=\"pagination.total\"\n                @input=\"changePage\"\n            ></base-pagination>\n        </div>\n    </div>\n</template>\n<script>\nimport _ from 'lodash'\nimport QueryFilter from './QueryFilter.vue'\nimport ChangeOrdersDriver from './ChangeOrdersDriver.vue'\nimport ChangeOrdersWarehouse from './ChangeOrdersWarehouse.vue'\n\nexport default {\n    name: 'fleet-table',\n    components: { QueryFilter, ChangeOrdersDriver, ChangeOrdersWarehouse },\n    props: {\n        type: {\n            type: String,\n        },\n        title: String,\n    },\n    data() {\n        return {\n            query: '',\n            page: 1,\n            shouldShowFilters: false,\n            filters: {},\n            bulkAction: 'none',\n            ordersMainCheck: false,\n        }\n    },\n\n    mounted() {\n        if (this.$route.query.query) this.query = this.$route.query.query\n        this.doSearch()\n    },\n\n    methods: {\n        bulkSetDriver() {\n            this.$refs.changeOrdersDriverDialog.show()\n        },\n        bulkDriverSuccess() {\n            this.doSearch()\n            this.ordersMainCheck = false\n        },\n        bulkSetWarehouse() {\n            this.$refs.changeOrdersWarehouseDialog.show()\n        },\n        bulkWarehouseSuccess() {\n            this.doSearch()\n            this.ordersMainCheck = false\n        },\n        bulkDriverError() {},\n        bulkSetIncomplete() {\n            this.$swal\n                .fire({\n                    title: 'Mark Orders as Complete?',\n                    text: `Are you sure you want to mark these orders as complete?`,\n                    type: 'warning',\n                    showCancelButton: true,\n                    confirmButtonColor: '#3085d6',\n                    cancelButtonColor: '#d33',\n                    confirmButtonText: 'Yes',\n                })\n                .then(result => {\n                    if (result.value) {\n                        this.$store\n                            .dispatch('orders/bulkSetIncomplete', {\n                                orders: this.checkedOrders,\n                            })\n                            .then(x => {\n                                this.$swal.fire(\n                                    'Success!',\n                                    'Selected orders were marked as complete',\n                                    'success'\n                                )\n\n                                this.ordersMainCheck = false\n                                this.doSearch()\n                            })\n                            .catch(x => {\n                                this.$swal.fire(\n                                    'Error!',\n                                    'There was an error marking orders as complete',\n                                    'error'\n                                )\n                            })\n                    }\n                })\n        },\n        bulkDelete() {\n            this.$swal\n                .fire({\n                    title: 'Delete Orders?',\n                    text: `Are you sure you want to delete these orders?`,\n                    type: 'warning',\n                    showCancelButton: true,\n                    confirmButtonColor: '#3085d6',\n                    cancelButtonColor: '#d33',\n                    confirmButtonText: 'Yes',\n                })\n                .then(result => {\n                    if (result.value) {\n                        this.$store\n                            .dispatch('orders/bulkDelete', {\n                                orders: this.checkedOrders,\n                            })\n                            .then(x => {\n                                this.$swal.fire(\n                                    'Success!',\n                                    'Selected orders were deleted',\n                                    'success'\n                                )\n\n                                this.doSearch()\n                            })\n                            .catch(x => {\n                                this.$swal.fire(\n                                    'Error!',\n                                    'Error deleting selected orders',\n                                    'error'\n                                )\n                            })\n\n                        this.ordersMainCheck = false\n                    }\n                })\n        },\n        toggleChecked() {\n            // if there's a checked item then check the rest\n            if (this.checkedOrders.length != this.orders.length) {\n                this.checkAllItems()\n            } else {\n                // if all are checked, then uncheck them\n                this.unCheckAllItems()\n            }\n        },\n        checkAllItems() {\n            for (let order of this.orders) {\n                order.checked = true\n            }\n        },\n        unCheckAllItems() {\n            for (let order of this.orders) {\n                order.checked = false\n            }\n        },\n        applyBulkAction() {},\n        showFilters() {\n            this.shouldShowFilters = true\n            return false\n        },\n        hideFilters() {\n            this.shouldShowFilters = false\n            return false\n        },\n        updateQuery: _.debounce(function(query) {\n            this.query = query\n            this.$router.push({ query: { query: this.query } })\n            this.doSearch()\n        }, 200),\n        changePage: function(page) {\n            this.page = page\n            this.$router.push({\n                query: { page: page, query: this.query, ...this.filters },\n            })\n            this.doSearch()\n        },\n        doSearch() {\n            this.$store.dispatch('orders/fetch', {\n                query: this.query,\n                filters: this.filters,\n                page: this.page,\n            })\n        },\n        filtersChanged(filters) {\n            // requery\n            console.log('filters changed')\n            this.filters = filters\n            this.doSearch()\n        },\n        view(index) {\n            this.$router.push({ path: `orders/${index}` })\n        },\n        deleteItem(id) {\n            let item = this.orders.find(el => el.id == id)\n\n            this.$swal\n                .fire({\n                    title: 'Delete Order?',\n                    text: `Are you sure you want to delete this order?`,\n                    type: 'warning',\n                    showCancelButton: true,\n                    confirmButtonColor: '#3085d6',\n                    cancelButtonColor: '#d33',\n                    confirmButtonText: 'Yes, delete it!',\n                })\n                .then(result => {\n                    if (result.value) {\n                        this.$store\n                            .dispatch('orders/delete', id)\n                            .then(x => {\n                                this.$swal.fire(\n                                    'Deleted!',\n                                    'Your order has been deleted.',\n                                    'success'\n                                )\n                            })\n                            .catch(x => {\n                                this.$swal.fire(\n                                    'Error!',\n                                    'Unable to delete order!',\n                                    'error'\n                                )\n                            })\n                    }\n                })\n        },\n        currency(num) {\n            return num.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n        },\n    },\n\n    computed: {\n        checkedOrders() {\n            return this.$store.state.orders.items.filter(x => x.checked == true)\n        },\n        orders() {\n            return this.$store.state.orders.items\n        },\n        pagination() {\n            return this.$store.state.orders.pagination\n        },\n    },\n\n    watch: {\n        filters: {\n            handler() {\n                console.log('doing search')\n                this.doSearch()\n            },\n            deep: true,\n        },\n    },\n}\n</script>\n<style>\n.bulk-actions {\n    vertical-align: middle;\n    padding: 0.7rem 1.5rem;\n    background: #f6f9fc;\n    border-top: solid 1px #e9ecef;\n}\n\n.bulk-actions span {\n    margin-right: 1rem;\n}\n</style>\n"]}]}