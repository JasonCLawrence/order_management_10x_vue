{"remainingRequest":"/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jlawrence/10x/apps/OmsVue/src/views/Orders/CreateOrderForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/jlawrence/10x/apps/OmsVue/src/views/Orders/CreateOrderForm.vue","mtime":1585672524045},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport api from '@/api/order'\nimport flatPicker from 'vue-flatpickr-component'\n\n//https://stackoverflow.com/questions/2998784/how-to-output-integers-with-leading-zeros-in-javascript\nfunction pad(num, size) {\n    var s = num + ''\n    while (s.length < size) s = '0' + s\n    return s\n}\n\nfunction now() {\n    var dateObj = new Date()\n    var month = dateObj.getUTCMonth() + 1\n    var day = dateObj.getUTCDate()\n    var year = dateObj.getUTCFullYear()\n\n    const date = year + '-' + pad(month, 2) + '-' + pad(day, 2)\n    //console.log(date)\n    return date\n}\n\n//let nowDate = now()\n\nexport default {\n    name: 'create-order-form',\n    components: { flatPicker },\n    props: [],\n    data: () => {\n        return {\n            model: {\n                type: 'invoice',\n                customer_id: '',\n                driver_id: '',\n                warehouse_id: '',\n                date: now(),\n                time: '09:30:00',\n                signature: false,\n                lat: 18.003713067980094,\n                long: -76.7883610725403,\n            },\n            submitting: false,\n            hasErrors: false,\n            drivers: [],\n            warehouses: [],\n            customers: [],\n        }\n    },\n    created() {\n        this.model.date = now()\n    },\n    methods: {\n        cancel() {\n            this.errors.clear()\n            this.$emit('cancel')\n        },\n        create() {\n            this.model.schedule_at = this.model.date + ' ' + this.model.time\n            this.$validator.validate().then(valid => {\n                if (valid) {\n                    this.submitting = true\n                    this.$store\n                        .dispatch('orders/create', this.model)\n                        .then(data => {\n                            this.submitting = false\n                            console.log(data)\n                            this.$emit('success', data)\n\n                            this.model = {\n                                type: 'invoice',\n                                customer_id: '',\n                                driver_id: '',\n                                warehouse_id: '',\n                                date: now(),\n                                time: '09:30:00',\n                                signature: false,\n                                lat: 18.003713067980094,\n                                long: -76.7883610725403,\n                            }\n                        })\n                        .catch(() => {})\n                        .finally(() => {\n                            this.submitting = false\n                        })\n                } else {\n                    this.submitting = false\n                }\n            })\n        },\n    },\n    mounted() {\n        api.fetchDrivers().then(result => {\n            let drivers = result.data.success.data\n            // drivers = drivers.filter(x => {\n            //     let res =\n            //         x.roles.findIndex(r => {\n            //             return r.role.name == 'driver'\n            //         }) !== -1\n            //     return res\n            // })\n            this.drivers = drivers\n            console.log('drivers', drivers)\n\n            // if there is no assigned warehouse, assign the first one\n            if (!this.model.driver_id && drivers.length > 0)\n                this.model.driver_id = drivers[0].id\n        })\n\n        api.fetchWarehouses().then(result => {\n            let warehouses = result.data.success.data\n            this.warehouses = warehouses\n            console.log(warehouses)\n\n            // if there is no assigned warehouse, assign the first one\n            if (!this.model.warehouse_id && warehouses.length > 0)\n                this.model.warehouse_id = warehouses[0].id\n        })\n\n        api.fetchCustomers().then(result => {\n            let customers = result.data.success.data\n            this.customers = customers\n            console.log(customers)\n\n            // if there is no assigned warehouse, assign the first one\n            if (!this.model.customer_id && customers.length > 0)\n                this.model.customer_id = customers[0].id\n        })\n    },\n}\n",{"version":3,"sources":["CreateOrderForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"CreateOrderForm.vue","sourceRoot":"src/views/Orders","sourcesContent":["<template>\n    <form role=\"form\" submit.prevent=\"login\">\n        <h2 class=\"text-center\">Create Order</h2>\n\n        <div class=\"form-group\">\n            <label class=\"form-control-label\">Type</label>\n            <div class=\"has-label\">\n                <select id=\"make\" name=\"type\" class=\"form-control\" v-model=\"model.type\">\n                    <option value=\"service\">Service</option>\n                    <option value=\"invoice\">Invoice</option>\n                    <option value=\"delivery\">Delivery</option>\n                </select>\n            </div>\n            <div\n                class=\"text-danger invalid-feedback\"\n                style=\"display: block;\"\n                v-if=\"errors.has('type')\"\n            >{{ errors.first('type') }}</div>\n        </div>\n\n        <div class=\"form-group\">\n            <label class=\"form-control-label\">Driver</label>\n            <div class=\"has-label\">\n                <select id=\"driver\" name=\"driver\" class=\"form-control\" v-model=\"model.driver_id\">\n                    <option\n                        v-for=\"(driver, key) in drivers\"\n                        :value=\"driver.id\"\n                        :key=\"key\"\n                    >{{driver.first_name}} {{driver.last_name}}</option>\n                </select>\n            </div>\n            <div\n                class=\"text-danger invalid-feedback\"\n                style=\"display: block;\"\n                v-if=\"errors.has('driver')\"\n            >{{ errors.first('driver') }}</div>\n        </div>\n\n        <div class=\"form-group\">\n            <label class=\"form-control-label\">Customer</label>\n            <div class=\"has-label\">\n                <select\n                    id=\"driver\"\n                    name=\"customer\"\n                    class=\"form-control\"\n                    v-model=\"model.customer_id\"\n                    v-validate=\"'required'\"\n                >\n                    <option v-for=\"(el, key) in customers\" :value=\"el.id\" :key=\"key\">{{el.name}}</option>\n                </select>\n            </div>\n            <div\n                class=\"text-danger invalid-feedback\"\n                style=\"display: block;\"\n                v-if=\"errors.has('customer')\"\n            >{{ errors.first('customer') }}</div>\n        </div>\n\n        <div class=\"form-group\">\n            <label class=\"form-control-label\">Warehouse</label>\n            <div class=\"has-label\">\n                <select\n                    id=\"warehouse\"\n                    name=\"warehouse\"\n                    class=\"form-control\"\n                    v-model=\"model.warehouse_id\"\n                >\n                    <option v-for=\"(el, key) in warehouses\" :value=\"el.id\" :key=\"key\">{{el.name}}</option>\n                </select>\n            </div>\n            <div\n                class=\"text-danger invalid-feedback\"\n                style=\"display: block;\"\n                v-if=\"errors.has('warehouse')\"\n            >{{ errors.first('warehouse') }}</div>\n        </div>\n\n        <base-input label=\"Date\">\n            <flat-picker\n                slot-scope=\"{focus, blur}\"\n                @on-open=\"focus\"\n                @on-close=\"blur\"\n                :config=\"{allowInput: true}\"\n                class=\"form-control datepicker\"\n                v-model=\"model.date\"\n            ></flat-picker>\n        </base-input>\n\n        <base-input label=\"Time\">\n            <flat-picker\n                slot-scope=\"{focus, blur}\"\n                @on-open=\"focus\"\n                @on-close=\"blur\"\n                :config=\"{enableTime: true,noCalendar: true,dateFormat: 'H:i:ss'}\"\n                class=\"form-control datepicker\"\n                v-model=\"model.time\"\n            ></flat-picker>\n        </base-input>\n\n        <base-checkbox v-model=\"model.signature\">Require Signature</base-checkbox>\n\n        <div class=\"text-right\">\n            <base-button\n                class=\"my-4\"\n                type=\"warning\"\n                :disabled=\"submitting?true:false\"\n                @click=\"cancel()\"\n            >Cancel</base-button>\n            <base-button\n                class=\"my-4\"\n                type=\"primary\"\n                :disabled=\"submitting?true:false\"\n                @click=\"create()\"\n            >Create</base-button>\n        </div>\n    </form>\n</template>\n\n<script>\nimport api from '@/api/order'\nimport flatPicker from 'vue-flatpickr-component'\n\n//https://stackoverflow.com/questions/2998784/how-to-output-integers-with-leading-zeros-in-javascript\nfunction pad(num, size) {\n    var s = num + ''\n    while (s.length < size) s = '0' + s\n    return s\n}\n\nfunction now() {\n    var dateObj = new Date()\n    var month = dateObj.getUTCMonth() + 1\n    var day = dateObj.getUTCDate()\n    var year = dateObj.getUTCFullYear()\n\n    const date = year + '-' + pad(month, 2) + '-' + pad(day, 2)\n    //console.log(date)\n    return date\n}\n\n//let nowDate = now()\n\nexport default {\n    name: 'create-order-form',\n    components: { flatPicker },\n    props: [],\n    data: () => {\n        return {\n            model: {\n                type: 'invoice',\n                customer_id: '',\n                driver_id: '',\n                warehouse_id: '',\n                date: now(),\n                time: '09:30:00',\n                signature: false,\n                lat: 18.003713067980094,\n                long: -76.7883610725403,\n            },\n            submitting: false,\n            hasErrors: false,\n            drivers: [],\n            warehouses: [],\n            customers: [],\n        }\n    },\n    created() {\n        this.model.date = now()\n    },\n    methods: {\n        cancel() {\n            this.errors.clear()\n            this.$emit('cancel')\n        },\n        create() {\n            this.model.schedule_at = this.model.date + ' ' + this.model.time\n            this.$validator.validate().then(valid => {\n                if (valid) {\n                    this.submitting = true\n                    this.$store\n                        .dispatch('orders/create', this.model)\n                        .then(data => {\n                            this.submitting = false\n                            console.log(data)\n                            this.$emit('success', data)\n\n                            this.model = {\n                                type: 'invoice',\n                                customer_id: '',\n                                driver_id: '',\n                                warehouse_id: '',\n                                date: now(),\n                                time: '09:30:00',\n                                signature: false,\n                                lat: 18.003713067980094,\n                                long: -76.7883610725403,\n                            }\n                        })\n                        .catch(() => {})\n                        .finally(() => {\n                            this.submitting = false\n                        })\n                } else {\n                    this.submitting = false\n                }\n            })\n        },\n    },\n    mounted() {\n        api.fetchDrivers().then(result => {\n            let drivers = result.data.success.data\n            // drivers = drivers.filter(x => {\n            //     let res =\n            //         x.roles.findIndex(r => {\n            //             return r.role.name == 'driver'\n            //         }) !== -1\n            //     return res\n            // })\n            this.drivers = drivers\n            console.log('drivers', drivers)\n\n            // if there is no assigned warehouse, assign the first one\n            if (!this.model.driver_id && drivers.length > 0)\n                this.model.driver_id = drivers[0].id\n        })\n\n        api.fetchWarehouses().then(result => {\n            let warehouses = result.data.success.data\n            this.warehouses = warehouses\n            console.log(warehouses)\n\n            // if there is no assigned warehouse, assign the first one\n            if (!this.model.warehouse_id && warehouses.length > 0)\n                this.model.warehouse_id = warehouses[0].id\n        })\n\n        api.fetchCustomers().then(result => {\n            let customers = result.data.success.data\n            this.customers = customers\n            console.log(customers)\n\n            // if there is no assigned warehouse, assign the first one\n            if (!this.model.customer_id && customers.length > 0)\n                this.model.customer_id = customers[0].id\n        })\n    },\n}\n</script>\n"]}]}