{"remainingRequest":"/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jlawrence/10x/apps/OmsVue/src/views/Users/CreateUserForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/jlawrence/10x/apps/OmsVue/src/views/Users/CreateUserForm.vue","mtime":1585672524045},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n    name: 'create-user-form',\n    props: [],\n    data: () => {\n        return {\n            model: {\n                firstName: '',\n                lastName: '',\n                email: '',\n                password: '',\n                confirmPassword: '',\n                roles: ['driver'],\n            },\n            submitting: false,\n            hasErrors: false,\n        }\n    },\n    methods: {\n        cancel() {\n            this.$emit('cancel')\n        },\n        create() {\n            this.$validator.validate().then(valid => {\n                if (valid) {\n                    this.submitting = true\n                    this.$store\n                        .dispatch('createUser', this.model)\n                        .then(() => {\n                            this.model = {\n                                firstName: '',\n                                lastName: '',\n                                email: '',\n                                password: '',\n                                confirmPassword: '',\n                                roles: ['driver'],\n                            }\n                            this.submitting = false\n                            this.$emit('success')\n                        })\n                        .catch(res => {\n                            // show errors\n                            console.log(res)\n                        })\n                        .finally(() => {\n                            this.submitting = false\n                        })\n                } else {\n                }\n            })\n        },\n        toggleRole(role) {\n            let roles = this.model.roles\n            if (roles.includes(role)) {\n                roles.splice(roles.indexOf(role), 1)\n            } else {\n                roles.push(role)\n            }\n            this.model.roles = roles\n        },\n    },\n}\n",{"version":3,"sources":["CreateUserForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"CreateUserForm.vue","sourceRoot":"src/views/Users","sourcesContent":["<template>\n    <form role=\"form\" submit.prevent=\"login\">\n        <h2 class=\"text-center\">Create User</h2>\n\n        <base-input\n            label=\"First Name\"\n            placeholder=\"John\"\n            name=\"firstName\"\n            v-model=\"model.firstName\"\n            :error=\"errors.first('firstName')\"\n            v-validate=\"'required'\"\n            type=\"text\"\n        ></base-input>\n\n        <base-input\n            label=\"Last Name\"\n            placeholder=\"Doe\"\n            v-model=\"model.lastName\"\n            name=\"lastName\"\n            :error=\"errors.first('lastName')\"\n            v-validate=\"'required'\"\n            type=\"text\"\n        ></base-input>\n\n        <base-input\n            label=\"Email\"\n            placeholder=\"Email\"\n            v-model=\"model.email\"\n            name=\"email\"\n            :error=\"errors.first('email')\"\n            v-validate=\"'required|email'\"\n            type=\"text\"\n        ></base-input>\n\n        <base-input\n            label=\"Password\"\n            type=\"password\"\n            v-model=\"model.password\"\n            name=\"password\"\n            :error=\"errors.first('password')\"\n            v-validate=\"'required|min:6'\"\n        ></base-input>\n\n        <base-input\n            label=\"Confirm Password\"\n            type=\"password\"\n            v-model=\"model.confirmPassword\"\n            name=\"confirmPassword\"\n            :error=\"errors.first('confirmPassword')\"\n            v-validate=\"'required|min:6|confirmed:password'\"\n        ></base-input>\n\n        <div class=\"form-group has-label\">\n            <label class=\"form-control-label\">Roles</label>\n            <base-checkbox\n                :checked=\"model.roles.includes('administrator')\"\n                @input=\"toggleRole('administrator')\"\n            >Administrator</base-checkbox>\n            <base-checkbox\n                :checked=\"model.roles.includes('driver')\"\n                @input=\"toggleRole('driver')\"\n            >Driver</base-checkbox>\n        </div>\n\n        <!-- <div class=\"text-right\">\n      <base-button\n        class=\"my-4\"\n        type=\"primary\"\n        :disabled=\"signingIn?true:false\"\n        @click=\"login()\"\n      >{{ signingIn?\"Signing In\":\"Sign In\" }}</base-button>\n        </div>-->\n        <div class=\"text-right\">\n            <base-button\n                class=\"my-4\"\n                type=\"warning\"\n                :disabled=\"submitting?true:false\"\n                @click=\"cancel()\"\n            >Cancel</base-button>\n\n            <base-button\n                class=\"my-4\"\n                type=\"primary\"\n                :disabled=\"submitting?true:false\"\n                @click=\"create()\"\n            >{{ submitting ? \"Creating..\" : \"Create\" }}</base-button>\n        </div>\n    </form>\n</template>\n\n<script>\nexport default {\n    name: 'create-user-form',\n    props: [],\n    data: () => {\n        return {\n            model: {\n                firstName: '',\n                lastName: '',\n                email: '',\n                password: '',\n                confirmPassword: '',\n                roles: ['driver'],\n            },\n            submitting: false,\n            hasErrors: false,\n        }\n    },\n    methods: {\n        cancel() {\n            this.$emit('cancel')\n        },\n        create() {\n            this.$validator.validate().then(valid => {\n                if (valid) {\n                    this.submitting = true\n                    this.$store\n                        .dispatch('createUser', this.model)\n                        .then(() => {\n                            this.model = {\n                                firstName: '',\n                                lastName: '',\n                                email: '',\n                                password: '',\n                                confirmPassword: '',\n                                roles: ['driver'],\n                            }\n                            this.submitting = false\n                            this.$emit('success')\n                        })\n                        .catch(res => {\n                            // show errors\n                            console.log(res)\n                        })\n                        .finally(() => {\n                            this.submitting = false\n                        })\n                } else {\n                }\n            })\n        },\n        toggleRole(role) {\n            let roles = this.model.roles\n            if (roles.includes(role)) {\n                roles.splice(roles.indexOf(role), 1)\n            } else {\n                roles.push(role)\n            }\n            this.model.roles = roles\n        },\n    },\n}\n</script>\n"]}]}