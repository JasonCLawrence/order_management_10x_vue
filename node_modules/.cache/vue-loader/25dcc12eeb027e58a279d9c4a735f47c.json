{"remainingRequest":"/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jlawrence/10x/apps/OmsVue/src/components/BaseInput.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/jlawrence/10x/apps/OmsVue/src/components/BaseInput.vue","mtime":1585672524041},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n    inheritAttrs: false,\n    name: 'base-input',\n    props: {\n        required: {\n            type: Boolean,\n            description: 'Whether input is required (adds an asterix *)',\n        },\n        valid: {\n            type: Boolean,\n            description: 'Whether is valid',\n            default: undefined,\n        },\n        label: {\n            type: String,\n            description: 'Input label (text before input)',\n        },\n        error: {\n            type: String,\n            description: 'Input error (below input)',\n        },\n        labelClasses: {\n            type: String,\n            description: 'Input label css classes',\n        },\n        inputClasses: {\n            type: String,\n            description: 'Input css classes',\n        },\n        value: {\n            type: [String, Number],\n            description: 'Input value',\n        },\n        addonRightIcon: {\n            type: String,\n            description: 'Addon right icon',\n        },\n        addonLeftIcon: {\n            type: String,\n            description: 'Addont left icon',\n        },\n    },\n    data() {\n        return {\n            focused: false,\n        }\n    },\n    computed: {\n        listeners() {\n            return {\n                ...this.$listeners,\n                input: this.updateValue,\n                focus: this.onFocus,\n                blur: this.onBlur,\n            }\n        },\n        slotData() {\n            return {\n                focused: this.focused,\n                ...this.listeners,\n            }\n        },\n        hasIcon() {\n            const { addonRight, addonLeft } = this.$slots\n            return (\n                addonRight !== undefined ||\n                addonLeft !== undefined ||\n                this.addonRightIcon !== undefined ||\n                this.addonLeftIcon !== undefined\n            )\n        },\n    },\n    methods: {\n        updateValue(evt) {\n            let value = evt.target.value\n            this.$emit('input', value)\n        },\n        onFocus(value) {\n            this.focused = true\n            this.$emit('focus', value)\n        },\n        onBlur(value) {\n            this.focused = false\n            this.$emit('blur', value)\n        },\n    },\n}\n",{"version":3,"sources":["BaseInput.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"BaseInput.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div\n    class=\"form-group\"\n    :class=\"[\n       {'input-group': hasIcon},\n       {'focused': focused},\n       {'has-label': label || $slots.label},\n       {'has-success': valid === true},\n       ]\"\n  >\n    <slot name=\"label\">\n      <label v-if=\"label\" class=\"form-control-label\" :class=\"labelClasses\">\n        {{label}}\n        <span v-if=\"required\">*</span>\n      </label>\n    </slot>\n\n    <div v-if=\"addonLeftIcon || $slots.addonLeft\" class=\"input-group-prepend\">\n      <span class=\"input-group-text\">\n        <slot name=\"addonLeft\">\n          <i :class=\"addonLeftIcon\"></i>\n        </slot>\n      </span>\n    </div>\n    <slot v-bind=\"slotData\">\n      <input\n        :value=\"value\"\n        v-on=\"listeners\"\n        v-bind=\"$attrs\"\n        class=\"form-control\"\n        :class=\"[\n                     {'is-valid': valid === true},\n                     {'is-invalid': valid === false}, inputClasses]\"\n        aria-describedby=\"addon-right addon-left\"\n      />\n    </slot>\n    <div v-if=\"addonRightIcon || $slots.addonRight\" class=\"input-group-append\">\n      <span class=\"input-group-text\">\n        <slot name=\"addonRight\">\n          <i :class=\"addonRightIcon\"></i>\n        </slot>\n      </span>\n    </div>\n    <slot name=\"infoBlock\"></slot>\n    <slot name=\"helpBlock\">\n      <div\n        class=\"text-danger invalid-feedback\"\n        style=\"display: block;\"\n        :class=\"{'mt-2': hasIcon}\"\n        v-if=\"error\"\n      >{{ error }}</div>\n    </slot>\n  </div>\n</template>\n<script>\nexport default {\n    inheritAttrs: false,\n    name: 'base-input',\n    props: {\n        required: {\n            type: Boolean,\n            description: 'Whether input is required (adds an asterix *)',\n        },\n        valid: {\n            type: Boolean,\n            description: 'Whether is valid',\n            default: undefined,\n        },\n        label: {\n            type: String,\n            description: 'Input label (text before input)',\n        },\n        error: {\n            type: String,\n            description: 'Input error (below input)',\n        },\n        labelClasses: {\n            type: String,\n            description: 'Input label css classes',\n        },\n        inputClasses: {\n            type: String,\n            description: 'Input css classes',\n        },\n        value: {\n            type: [String, Number],\n            description: 'Input value',\n        },\n        addonRightIcon: {\n            type: String,\n            description: 'Addon right icon',\n        },\n        addonLeftIcon: {\n            type: String,\n            description: 'Addont left icon',\n        },\n    },\n    data() {\n        return {\n            focused: false,\n        }\n    },\n    computed: {\n        listeners() {\n            return {\n                ...this.$listeners,\n                input: this.updateValue,\n                focus: this.onFocus,\n                blur: this.onBlur,\n            }\n        },\n        slotData() {\n            return {\n                focused: this.focused,\n                ...this.listeners,\n            }\n        },\n        hasIcon() {\n            const { addonRight, addonLeft } = this.$slots\n            return (\n                addonRight !== undefined ||\n                addonLeft !== undefined ||\n                this.addonRightIcon !== undefined ||\n                this.addonLeftIcon !== undefined\n            )\n        },\n    },\n    methods: {\n        updateValue(evt) {\n            let value = evt.target.value\n            this.$emit('input', value)\n        },\n        onFocus(value) {\n            this.focused = true\n            this.$emit('focus', value)\n        },\n        onBlur(value) {\n            this.focused = false\n            this.$emit('blur', value)\n        },\n    },\n}\n</script>\n<style>\n</style>\n"]}]}