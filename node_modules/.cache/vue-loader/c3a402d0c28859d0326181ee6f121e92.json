{"remainingRequest":"/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jlawrence/10x/apps/OmsVue/src/views/Dashboard/DashboardMap.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/jlawrence/10x/apps/OmsVue/src/views/Dashboard/DashboardMap.vue","mtime":1585672524041},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.autocomplete input {\n    border-radius: 0;\n}\n",{"version":3,"sources":["DashboardMap.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6GA;AACA;AACA","file":"DashboardMap.vue","sourceRoot":"src/views/Dashboard","sourcesContent":["<template>\n    <div class>\n        <l-map :zoom=\"zoom\" :center=\"center\" ref=\"map\" style=\"height:418px\">\n            <l-tile-layer :url=\"url\" :attribution=\"attribution\"></l-tile-layer>\n            <l-marker\n                v-for=\"(driver, index) in drivers\"\n                :key=\"index\"\n                :lat-lng=\"drivers[index].latlon\"\n            >\n                <l-popup :autoClose=\"false\">{{driver.first_name}} {{driver.last_name}}</l-popup>\n            </l-marker>\n        </l-map>\n    </div>\n</template>\n\n<script>\nimport { LMap, LTileLayer, LMarker, LPopup } from 'vue2-leaflet'\nimport VueBootstrapTypeahead from 'vue-bootstrap-typeahead'\nimport _ from 'lodash'\nconst { NominatimJS } = require('@owsas/nominatim-js')\nimport api from '@/api/user'\n\nexport default {\n    name: 'dashboard-map',\n    components: { LMap, LTileLayer, LMarker, LPopup, VueBootstrapTypeahead },\n    props: {\n        value: {\n            name: 'value',\n            type: Object,\n            default: () => L.latLng(18, -77.2),\n        },\n    },\n    data() {\n        return {\n            model: {\n                id: 0,\n                name: '',\n                location: '',\n                lat: '',\n                lon: '',\n            },\n            center: new L.latLng(18, -77.4),\n            updating: false,\n            zoom: 8,\n            url: 'http://{s}.tile.osm.org/{z}/{x}/{y}.png',\n            attribution:\n                '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n            popupData: \"Hello I'm a Popup\",\n            query: '',\n            addresses: [],\n            drivers: [],\n        }\n    },\n    mounted() {\n        api.fetchDriverLocations().then(res => {\n            let drivers = res.data.success.data\n\n            // fetch locations of drivers\n            let lat = 0\n            let lon = 0\n            let count = 0\n\n            // average locations of workers and set center\n            drivers = drivers.map(d => {\n                if (d.lat == null || d.long == null) return null\n\n                //console.log(d)\n                lat += parseFloat(d.lat)\n                lon += parseFloat(d.long)\n                count++\n                // console.log('center: ' + lat + ' ' + lon)\n                // console.log('center: ' + d.lat + ' ' + d.long)\n\n                d.latlon = new L.latLng(parseFloat(d.lat), parseFloat(d.long))\n                return d\n            })\n\n            drivers = drivers.filter(d => {\n                return d != null\n            })\n\n            // console.log(drivers)\n\n            if (count != 0) {\n                lat = lat / count\n                lon = lon / count\n            }\n\n            // console.log('center: ' + this.center)\n            // console.log('center: ' + lat + ' ' + lon)\n            // console.log('count: ' + count)\n            //this.center = new L.latLng(lat, lon)\n            this.drivers = drivers\n        })\n    },\n    methods: {\n        setMarkerPos(pos) {\n            //console.log('new pos', this.$refs.marker.mapObject.getLatLng())\n            this.$emit('input', this.$refs.marker.mapObject.getLatLng())\n        },\n        itemSelected(item) {\n            this.$emit('input', L.latLng(item.lat, item.lon))\n        },\n    },\n    watch: {},\n}\n</script>\n\n<style>\n.autocomplete input {\n    border-radius: 0;\n}\n</style>"]}]}