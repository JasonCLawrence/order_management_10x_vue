{"remainingRequest":"/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jlawrence/10x/apps/OmsVue/src/views/Orders/Tasks.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/jlawrence/10x/apps/OmsVue/src/views/Orders/Tasks.vue","mtime":1585672524045},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport api from '@/api/order'\n\nexport default {\n    name: 'tasks',\n    data() {\n        return {\n            tasks: [\n                {\n                    checked: true,\n                    name: 'Simple item task...',\n                    deleted: false,\n                },\n            ],\n            submitting: false,\n            hash: null,\n        }\n    },\n    methods: {\n        update() {},\n        currency(num) {\n            return num.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n        },\n        /* Task functions */\n        addTask() {\n            this.tasks.push({\n                checked: false,\n                name: '',\n                deleted: false,\n            })\n        },\n        deleteTask(index) {\n            this.tasks[index].deleted = true\n        },\n        restoreTask(index) {\n            this.tasks[index].deleted = false\n        },\n        updateTasks() {\n            this.submitting = true\n            api.updateTasks(this.$route.params.id, this.tasks)\n                .then(result => {\n                    let tasks = result.data.success.data\n                    this.tasks = tasks.map(x => {\n                        x.checked = !!x.checked\n                        x.deleted = false\n                        return x\n                    })\n\n                    this.hashItems()\n\n                    this.$swal({\n                        title: 'Tasks Updated',\n                        type: 'success',\n                    })\n                })\n                .catch(error => {\n                    this.$swal({\n                        title: error.response.data.error.message,\n                        type: 'error',\n                    })\n                })\n                .finally(() => {\n                    this.submitting = false\n                })\n        },\n        getHash() {\n            return JSON.stringify(this.tasks)\n        },\n        hashItems() {\n            this.hash = this.getHash()\n        },\n        hasUnsavedChanges() {\n            let newHash = this.getHash()\n            if (this.hash != newHash) return true\n            return false\n        },\n    },\n    mounted() {\n        api.fetchTasks(this.$route.params.id).then(result => {\n            let tasks = result.data.success.data\n            this.tasks = tasks.map(x => {\n                x.checked = !!x.checked\n                x.deleted = false\n                return x\n            })\n\n            this.hashItems()\n        })\n    },\n}\n",{"version":3,"sources":["Tasks.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"Tasks.vue","sourceRoot":"src/views/Orders","sourcesContent":["<template>\n    <div>\n        <h6 class=\"heading-small text-muted mb-4\">Tasks</h6>\n        <div v-if=\"tasks.length == 0\" class=\"text-center\" style=\"margin:5em 0;\">\n            No tasks created as yet..\n            <br />\n            <br />\n            <base-button type=\"primary\" @click=\"addTask()\">Add Your First Task</base-button>\n        </div>\n        <template v-else>\n            <div class=\"row task\" v-for=\"(item, index) in tasks\" :key=\"index\">\n                <template v-if=\"item.deleted == false\">\n                    <div class=\"col-md-1\">\n                        <base-checkbox class=\"mb-3\" v-model=\"tasks[index].checked\"></base-checkbox>\n                    </div>\n                    <div class=\"col-md-10\">\n                        <input\n                            placeholder=\"Luxury Car\"\n                            name=\"name\"\n                            class=\"form-control\"\n                            v-model=\"tasks[index].name\"\n                        />\n                    </div>\n                </template>\n                <template v-else>\n                    <div class=\"col-md-11 deleted-task\">{{item.name?item.name:\"empty task\"}}</div>\n                </template>\n                <div class=\"col-md-1\">\n                    <base-button\n                        v-if=\"item.deleted == false\"\n                        type=\"warning\"\n                        @click=\"deleteTask(index)\"\n                        icon=\"ni ni-fat-remove\"\n                    ></base-button>\n                    <base-button\n                        v-if=\"item.deleted == true\"\n                        block\n                        type=\"success\"\n                        @click=\"restoreTask(index)\"\n                    >\n                        <i class=\"ni ni-fat-add\"></i>\n                    </base-button>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <base-button\n                        size=\"sm\"\n                        type=\"primary\"\n                        @click=\"addTask()\"\n                        :disabled=\"submitting?true:false\"\n                    >{{ \"Add Task\" }}</base-button>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <base-button\n                        type=\"primary\"\n                        @click=\"updateTasks()\"\n                        class=\"float-right\"\n                        :disabled=\"submitting?true:false\"\n                    >{{ submitting?\"Saving Changes...\":\"Save Changes\" }}</base-button>\n                </div>\n            </div>\n        </template>\n    </div>\n</template>\n\n<script>\nimport api from '@/api/order'\n\nexport default {\n    name: 'tasks',\n    data() {\n        return {\n            tasks: [\n                {\n                    checked: true,\n                    name: 'Simple item task...',\n                    deleted: false,\n                },\n            ],\n            submitting: false,\n            hash: null,\n        }\n    },\n    methods: {\n        update() {},\n        currency(num) {\n            return num.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n        },\n        /* Task functions */\n        addTask() {\n            this.tasks.push({\n                checked: false,\n                name: '',\n                deleted: false,\n            })\n        },\n        deleteTask(index) {\n            this.tasks[index].deleted = true\n        },\n        restoreTask(index) {\n            this.tasks[index].deleted = false\n        },\n        updateTasks() {\n            this.submitting = true\n            api.updateTasks(this.$route.params.id, this.tasks)\n                .then(result => {\n                    let tasks = result.data.success.data\n                    this.tasks = tasks.map(x => {\n                        x.checked = !!x.checked\n                        x.deleted = false\n                        return x\n                    })\n\n                    this.hashItems()\n\n                    this.$swal({\n                        title: 'Tasks Updated',\n                        type: 'success',\n                    })\n                })\n                .catch(error => {\n                    this.$swal({\n                        title: error.response.data.error.message,\n                        type: 'error',\n                    })\n                })\n                .finally(() => {\n                    this.submitting = false\n                })\n        },\n        getHash() {\n            return JSON.stringify(this.tasks)\n        },\n        hashItems() {\n            this.hash = this.getHash()\n        },\n        hasUnsavedChanges() {\n            let newHash = this.getHash()\n            if (this.hash != newHash) return true\n            return false\n        },\n    },\n    mounted() {\n        api.fetchTasks(this.$route.params.id).then(result => {\n            let tasks = result.data.success.data\n            this.tasks = tasks.map(x => {\n                x.checked = !!x.checked\n                x.deleted = false\n                return x\n            })\n\n            this.hashItems()\n        })\n    },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.task {\n    .form-control {\n        border: 0;\n        border-bottom: 2px solid rgb(202, 209, 215);\n        border-radius: 0;\n    }\n    margin-bottom: 10px;\n}\n\n.task {\n    .custom-checkbox {\n        width: 100%;\n        height: 100%;\n    }\n}\n</style>"]}]}