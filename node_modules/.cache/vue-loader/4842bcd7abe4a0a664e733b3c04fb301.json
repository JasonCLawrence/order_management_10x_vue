{"remainingRequest":"/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jlawrence/10x/apps/OmsVue/src/views/Customers/CustomerTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/jlawrence/10x/apps/OmsVue/src/views/Customers/CustomerTable.vue","mtime":1585672524041},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport _ from 'lodash'\n\nexport default {\n    name: 'customer-table',\n    props: {\n        type: {\n            type: String,\n        },\n        title: String,\n    },\n    data() {\n        return {\n            query: '',\n            page: 1,\n        }\n    },\n    mounted() {\n        if (this.$route.query.query) this.query = this.$route.query.query\n        this.doSearch()\n    },\n\n    methods: {\n        updateQuery: _.debounce(function(query) {\n            this.query = query\n            this.$router.push({ query: { query: this.query } })\n            this.doSearch()\n        }, 200),\n        changePage: function(page) {\n            this.page = page\n            this.$router.push({ query: { page: page } })\n            this.doSearch()\n        },\n        doSearch() {\n            this.$store.dispatch('customers/fetch', {\n                query: this.query,\n                page: this.page,\n            })\n        },\n        view(index) {\n            this.$router.push({ path: `customers/${index}` })\n        },\n        deleteItem(id) {\n            let item = this.customers.find(el => el.id == id)\n\n            this.$swal\n                .fire({\n                    title: 'Delete Customer?',\n                    text: `Are you sure you want to delete ${item.name}?`,\n                    type: 'warning',\n                    showCancelButton: true,\n                    confirmButtonColor: '#3085d6',\n                    cancelButtonColor: '#d33',\n                    confirmButtonText: 'Yes, delete it!',\n                })\n                .then(result => {\n                    if (result.value) {\n                        this.$store\n                            .dispatch('customers/delete', id)\n                            .then(x => {\n                                this.$swal.fire(\n                                    'Deleted!',\n                                    'Customer deleted.',\n                                    'success'\n                                )\n                            })\n                            .catch(x => {\n                                this.$swal.fire(\n                                    'Error!',\n                                    'Unable to delete customer!',\n                                    'error'\n                                )\n                            })\n                    }\n                })\n        },\n    },\n\n    computed: {\n        customers() {\n            return this.$store.state.customers.items\n        },\n        pagination() {\n            return this.$store.state.customers.pagination\n        },\n    },\n}\n",{"version":3,"sources":["CustomerTable.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"CustomerTable.vue","sourceRoot":"src/views/Customers","sourcesContent":["<template>\n    <div class=\"card shadow\" :class=\"type === 'dark' ? 'bg-default': ''\">\n        <div class=\"card-header border-0\" :class=\"type === 'dark' ? 'bg-transparent': ''\">\n            <div class=\"row\">\n                <div class=\"col-md-10\">\n                    <base-input\n                        placeholder=\"Filter...\"\n                        addon-right-icon=\"ni ni-zoom-split-in\"\n                        v-model=\"query\"\n                        @input=\"updateQuery\"\n                    ></base-input>\n                </div>\n                <div class=\"col text-right\">\n                    <base-button type=\"primary\" @click=\"$emit('add')\">Add Customer</base-button>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"table-responsive\">\n            <base-table\n                class=\"table align-items-center table-flush\"\n                :class=\"type === 'dark' ? 'table-dark': ''\"\n                :thead-classes=\"type === 'dark' ? 'thead-dark': 'thead-light'\"\n                tbody-classes=\"list\"\n                :data=\"customers\"\n            >\n                <template slot=\"columns\">\n                    <th>Name</th>\n                    <th>Email</th>\n                    <th>Address</th>\n                    <th>Actions</th>\n                </template>\n\n                <template slot-scope=\"{row}\">\n                    <th scope=\"row\">\n                        <div class=\"media align-items-center\">\n                            <div class=\"media-body\">\n                                <span class=\"name mb-0 text-sm\">{{row.name}}</span>\n                            </div>\n                        </div>\n                    </th>\n                    <td>\n                        <div class=\"d-flex align-items-center\">\n                            <span>{{row.email}}</span>\n                        </div>\n                    </td>\n                    <td>\n                        <div class=\"d-flex align-items-center\">\n                            <span>{{row.address}}</span>\n                        </div>\n                    </td>\n\n                    <td>\n                        <div class=\"d-flex align-items-center\">\n                            <div>\n                                <base-button type=\"primary\" @click=\"view(row.id)\">Edit</base-button>\n                                <base-button type=\"danger\" @click=\"deleteItem(row.id)\">Delete</base-button>\n                            </div>\n                        </div>\n                    </td>\n                </template>\n            </base-table>\n        </div>\n\n        <div\n            class=\"card-footer d-flex justify-content-end\"\n            :class=\"type === 'dark' ? 'bg-transparent': ''\"\n        >\n            <base-pagination\n                v-if=\"pagination!=null\"\n                :perPage=\"pagination.pageSize\"\n                :value=\"pagination.page\"\n                :total=\"pagination.total\"\n                @input=\"changePage\"\n            ></base-pagination>\n        </div>\n    </div>\n</template>\n<script>\nimport _ from 'lodash'\n\nexport default {\n    name: 'customer-table',\n    props: {\n        type: {\n            type: String,\n        },\n        title: String,\n    },\n    data() {\n        return {\n            query: '',\n            page: 1,\n        }\n    },\n    mounted() {\n        if (this.$route.query.query) this.query = this.$route.query.query\n        this.doSearch()\n    },\n\n    methods: {\n        updateQuery: _.debounce(function(query) {\n            this.query = query\n            this.$router.push({ query: { query: this.query } })\n            this.doSearch()\n        }, 200),\n        changePage: function(page) {\n            this.page = page\n            this.$router.push({ query: { page: page } })\n            this.doSearch()\n        },\n        doSearch() {\n            this.$store.dispatch('customers/fetch', {\n                query: this.query,\n                page: this.page,\n            })\n        },\n        view(index) {\n            this.$router.push({ path: `customers/${index}` })\n        },\n        deleteItem(id) {\n            let item = this.customers.find(el => el.id == id)\n\n            this.$swal\n                .fire({\n                    title: 'Delete Customer?',\n                    text: `Are you sure you want to delete ${item.name}?`,\n                    type: 'warning',\n                    showCancelButton: true,\n                    confirmButtonColor: '#3085d6',\n                    cancelButtonColor: '#d33',\n                    confirmButtonText: 'Yes, delete it!',\n                })\n                .then(result => {\n                    if (result.value) {\n                        this.$store\n                            .dispatch('customers/delete', id)\n                            .then(x => {\n                                this.$swal.fire(\n                                    'Deleted!',\n                                    'Customer deleted.',\n                                    'success'\n                                )\n                            })\n                            .catch(x => {\n                                this.$swal.fire(\n                                    'Error!',\n                                    'Unable to delete customer!',\n                                    'error'\n                                )\n                            })\n                    }\n                })\n        },\n    },\n\n    computed: {\n        customers() {\n            return this.$store.state.customers.items\n        },\n        pagination() {\n            return this.$store.state.customers.pagination\n        },\n    },\n}\n</script>\n<style>\n</style>\n"]}]}