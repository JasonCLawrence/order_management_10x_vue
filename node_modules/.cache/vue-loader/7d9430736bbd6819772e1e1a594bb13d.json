{"remainingRequest":"/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jlawrence/10x/apps/OmsVue/src/views/Orders/ViewOrder.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/jlawrence/10x/apps/OmsVue/src/views/Orders/ViewOrder.vue","mtime":1585672524045},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport api from '@/api/order'\nimport flatPicker from 'vue-flatpickr-component'\nimport tasks from './Tasks.vue'\nimport invoice from './Invoice.vue'\nimport notes from './Notes.vue'\nimport attachments from './Attachments.vue'\nimport signature from './Signature.vue'\nimport warehouseSignature from './WarehouseSignature.vue'\nimport LocationPicker from '@/components/Map/LocationPicker'\n\nexport default {\n    name: 'view-order',\n    components: {\n        flatPicker,\n        tasks,\n        invoice,\n        notes,\n        LocationPicker,\n        attachments,\n        signature,\n        warehouseSignature,\n    },\n    data() {\n        return {\n            basicsModel: {\n                /* other props go gere */\n                notes: [\n                    {\n                        content: 'Simple item task...',\n                    },\n                ],\n            },\n            basicsModelHash: '',\n            tasksModel: {},\n            invoiceModel: {},\n            tasks: [\n                // {\n                //     checked: true,\n                //     name: 'Simple item task...',\n                //     deleted: false,\n                // },\n            ],\n            invoiceItems: [\n                // {\n                //     item: 'Sample Item',\n                //     quantity: 0,\n                //     price: 0,\n                //     deleted: false,\n                // },\n            ],\n\n            updating: false,\n            submittingTasks: false,\n            drivers: [],\n            warehouses: [],\n            customers: [],\n        }\n    },\n    methods: {\n        downloadSummary() {\n            api.downloadSummary(this.orderId)\n        },\n        updated() {\n            console.log(this.basicsModel)\n        },\n        update() {\n            // this.basicsModel.schedule_at =\n            //     this.basicsModel.date + ' ' + this.basicsModel.time + ':00'\n\n            // this.basicsModel.lat = this.basicsModel.location.lat\n            // this.basicsModel.long = this.basicsModel.location.lng\n\n            // let model = JSON.parse(JSON.stringify(this.basicsModel))\n\n            // model.signature = model.signature ? 1 : 0\n\n            let model = this.getModel()\n\n            this.updating = true\n\n            api.update(this.$route.params.id, model)\n                .then(result => {\n                    this.$swal({\n                        title: 'Order Updated!',\n                        type: 'success',\n                    })\n                    let model = result.data.success.data\n\n                    // split scheduled_at into date and time\n                    const time = model.schedule_at.split(' ')\n                    model.date = time[0]\n                    model.time = time[1]\n\n                    model.completed = model.completed === 1\n                    model.signature = model.signature === 1\n\n                    model.location = new L.latLng(\n                        model.lat ? model.lat : 0,\n                        model.long ? model.long : 0\n                    )\n\n                    this.basicsModel = model\n\n                    this.hashBasicsModel()\n                })\n                .catch(error => {\n                    this.$swal({\n                        title: 'Error Updating Order!',\n                        type: 'error',\n                    })\n                })\n                .finally(() => {\n                    this.updating = false\n                })\n        },\n        currency(num) {\n            return num.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n        },\n        toggleCompletion() {\n            // this.markAsIncomplete()\n            if (this.basicsModel.complete) {\n                this.markAsIncomplete()\n            } else {\n                this.markAsComplete()\n            }\n        },\n        markAsComplete() {\n            this.$swal\n                .fire({\n                    title: 'Mark as Complete?',\n                    text: `Are you sure you want to mark this order as complete?`,\n                    type: 'warning',\n                    showCancelButton: true,\n                    confirmButtonColor: '#3085d6',\n                    cancelButtonColor: '#d33',\n                    confirmButtonText: 'Yes',\n                })\n                .then(result => {\n                    if (!result.value) return\n\n                    this.updating = true\n                    api.markAsComplete(this.$route.params.id)\n                        .then(res => {\n                            this.$swal({\n                                title: 'Order Completed!',\n                                type: 'success',\n                            })\n                            this.basicsModel.complete = true\n                        })\n                        .catch(error => {\n                            this.$swal({\n                                title: 'Error Marking as Complete!',\n                                type: 'error',\n                            })\n                        })\n                        .finally(() => {\n                            this.updating = false\n                        })\n                })\n        },\n        markAsIncomplete() {\n            this.$swal\n                .fire({\n                    title: 'Mark as Incomplete?',\n                    text: `Are you sure you want to mark this order as incomplete?`,\n                    type: 'warning',\n                    showCancelButton: true,\n                    confirmButtonColor: '#3085d6',\n                    cancelButtonColor: '#d33',\n                    confirmButtonText: 'Yes',\n                })\n                .then(result => {\n                    if (!result.value) return\n\n                    this.updating = true\n                    api.markAsIncomplete(this.$route.params.id)\n                        .then(res => {\n                            this.$swal({\n                                title: 'Order Set As Incompleted!',\n                                type: 'success',\n                            })\n                            this.basicsModel.complete = false\n                            this.hashBasicsModel()\n                        })\n                        .catch(error => {\n                            this.$swal({\n                                title: 'Error Marking as Complete!',\n                                type: 'error',\n                            })\n                        })\n                        .finally(() => {\n                            this.updating = false\n                        })\n                })\n        },\n        getModel() {\n            if (this.basicsModel == null) return null\n\n            let m = JSON.parse(JSON.stringify(this.basicsModel))\n\n            let model = {}\n            model.customer_id = m.customer_id\n            model.driver_id = m.driver_id\n            model.warehouse_id = m.warehouse_id\n            model.description = m.description == '' ? null : m.description\n            model.address = m.address == '' ? null : m.address\n            model.schedule_at = m.date + ' ' + m.time // + ':00'\n\n            if (m.location) {\n                model.lat = m.location.lat\n                model.long = m.location.lng\n            }\n\n            model.signature = m.signature ? 1 : 0\n\n            return model\n        },\n        getModelHash() {\n            return JSON.stringify(this.getModel())\n        },\n        hashBasicsModel() {\n            // create hash\n            this.basicsModelHash = this.getModelHash()\n        },\n        hasBasicModelChanged() {\n            let hash = this.getModelHash()\n            // console.log(hash)\n            // console.log(this.basicsModelHash)\n            if (this.basicsModelHash != hash) return true\n            return false\n        },\n        hasTasksModelChanged() {},\n        hasInvoiceModelChanged() {},\n    },\n    mounted() {\n        api.fetchById(this.$route.params.id).then(result => {\n            let model = result.data.success.data\n\n            // split scheduled_at into date and time\n            const time = model.schedule_at.split(' ')\n            model.date = time[0]\n            model.time = time[1]\n\n            model.complete = model.completed === 1\n            model.signature = model.signature === 1\n\n            model.location = new L.latLng(\n                model.lat ? model.lat : 0,\n                model.long ? model.long : 0\n            )\n\n            this.basicsModel = model\n            this.hashBasicsModel()\n        })\n\n        api.fetchTasks(this.$route.params.id).then(result => {\n            let tasks = result.data.success.data\n            this.tasks = tasks\n        })\n\n        api.fetchDrivers().then(result => {\n            let drivers = result.data.success.data\n\n            this.drivers = drivers\n        })\n\n        api.fetchWarehouses().then(result => {\n            let warehouses = result.data.success.data\n            this.warehouses = warehouses\n        })\n\n        api.fetchCustomers().then(result => {\n            let customers = result.data.success.data\n            this.customers = customers\n        })\n    },\n\n    computed: {\n        complete() {\n            return this.basicsModel.complete\n        },\n        orderId() {\n            return this.$route.params.id\n        },\n    },\n    beforeRouteLeave(to, from, next) {\n        // check basic model\n        if (this.hasBasicModelChanged()) {\n            let answer = window.confirm(\n                'Do you really want to leave? you have unsaved changes!'\n            )\n            if (answer) {\n                next()\n            } else {\n                next(false)\n            }\n            return\n        }\n\n        // check tasks\n        if (this.$refs.tasks.hasUnsavedChanges()) {\n            let answer = window.confirm(\n                'Do you really want to leave? you have unsaved changes to your tasks!'\n            )\n            if (answer) {\n                next()\n            } else {\n                next(false)\n            }\n            return\n        }\n\n        // check invoice\n        if (this.$refs.invoice) {\n            if (this.$refs.invoice.hasUnsavedChanges()) {\n                let answer = window.confirm(\n                    'Do you really want to leave? You have unsaved changes to your invoice items!'\n                )\n                if (answer) {\n                    next()\n                } else {\n                    next(false)\n                }\n                return\n            }\n        }\n\n        next()\n\n        // if (hasChanges) {\n        //     next()\n        // } else {\n        //     next(false)\n    },\n}\n",{"version":3,"sources":["ViewOrder.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"ViewOrder.vue","sourceRoot":"src/views/Orders","sourcesContent":["<template>\n    <div>\n        <base-header class=\"header pb-8 pt-5 pt-lg-5 d-flex\" />\n\n        <div class=\"container-fluid mt--7 pb-4\">\n            <div class=\"row\">\n                <div class=\"col-xl-12 order-xl-1\">\n                    <card shadow type=\"secondary\">\n                        <div slot=\"header\" class=\"bg-white border-0\">\n                            <div class=\"row align-items-center\">\n                                <div class=\"col-8\">\n                                    <h3 class=\"mb-0\">\n                                        Order\n                                        <span>{{ this.basicsModel.complete?\"(complete)\":\"(incomplete)\" }}</span>\n                                    </h3>\n                                </div>\n                                <div class=\"col-4 text-right\">\n                                    <base-button\n                                        @click=\"downloadSummary()\"\n                                        :disabled=\"updating\"\n                                    >Download Summary</base-button>\n                                    <base-button\n                                        @click=\"toggleCompletion()\"\n                                        :disabled=\"updating\"\n                                    >{{ this.basicsModel.complete?\"Mark as Incomplete\":\"Mark as Complete\" }}</base-button>\n                                </div>\n                            </div>\n                        </div>\n                        <template>\n                            <div class=\"pl-lg-4\">\n                                <h6 class=\"heading-small text-muted mb-4\">Basics</h6>\n                                <form @submit.prevent=\"update()\">\n                                    <div class=\"row\">\n                                        <div class=\"col-lg-8\">\n                                            <div class=\"form-group\">\n                                                <label class=\"form-control-label\">Driver</label>\n                                                <div class=\"has-label\">\n                                                    <select\n                                                        class=\"form-control\"\n                                                        v-model=\"basicsModel.driver_id\"\n                                                    >\n                                                        <option\n                                                            v-for=\"(driver, key) in drivers\"\n                                                            :value=\"driver.id\"\n                                                            :key=\"key\"\n                                                        >{{driver.first_name}} {{driver.last_name}}</option>\n                                                    </select>\n                                                </div>\n                                            </div>\n                                        </div>\n\n                                        <div class=\"col-lg-8\">\n                                            <div class=\"form-group\">\n                                                <label class=\"form-control-label\">Customer</label>\n                                                <div class=\"has-label\">\n                                                    <select\n                                                        class=\"form-control\"\n                                                        v-model=\"basicsModel.customer_id\"\n                                                    >\n                                                        <option\n                                                            v-for=\"(el, key) in customers\"\n                                                            :value=\"el.id\"\n                                                            :key=\"key\"\n                                                        >{{el.name}}</option>\n                                                    </select>\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <div class=\"col-lg-8\">\n                                            <div class=\"form-group\">\n                                                <label class=\"form-control-label\">Warehouse</label>\n                                                <div class=\"has-label\">\n                                                    <select\n                                                        class=\"form-control\"\n                                                        v-model=\"basicsModel.warehouse_id\"\n                                                    >\n                                                        <option\n                                                            v-for=\"(el, key) in warehouses\"\n                                                            :value=\"el.id\"\n                                                            :key=\"key\"\n                                                        >{{el.name}}</option>\n                                                    </select>\n                                                </div>\n                                            </div>\n                                        </div>\n\n                                        <div class=\"col-lg-8\">\n                                            <div class=\"form-group\">\n                                                <label class=\"form-control-label\">Description</label>\n                                                <div class=\"has-label\">\n                                                    <textarea\n                                                        class=\"form-control\"\n                                                        rows=\"3\"\n                                                        placeholder=\"Small description of order...\"\n                                                        name=\"description\"\n                                                        v-model=\"basicsModel.description\"\n                                                        :error=\"errors.first('description')\"\n                                                    ></textarea>\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <!-- Empty col as passing for row -->\n                                        <div class=\"col-lg-4\"></div>\n\n                                        <div class=\"col-lg-4\">\n                                            <base-input label=\"Date\">\n                                                <flat-picker\n                                                    slot-scope=\"{focus, blur}\"\n                                                    @on-open=\"focus\"\n                                                    @on-close=\"blur\"\n                                                    :config=\"{allowInput: true}\"\n                                                    class=\"form-control datepicker\"\n                                                    v-model=\"basicsModel.date\"\n                                                ></flat-picker>\n                                            </base-input>\n                                        </div>\n\n                                        <div class=\"col-lg-4\">\n                                            <base-input\n                                                label=\"Time\"\n                                                :error=\"errors.first('time')\"\n                                                v-validate=\"'required'\"\n                                                name=\"time\"\n                                            >\n                                                <flat-picker\n                                                    slot-scope=\"{focus, blur}\"\n                                                    @on-open=\"focus\"\n                                                    @on-close=\"blur\"\n                                                    :config=\"{enableTime: true,noCalendar: true,dateFormat: 'H:i:ss'}\"\n                                                    class=\"form-control datepicker\"\n                                                    v-model=\"basicsModel.time\"\n                                                ></flat-picker>\n                                            </base-input>\n                                        </div>\n\n                                        <div class=\"col-lg-8\">\n                                            <base-input\n                                                label=\"Address\"\n                                                placeholder=\"Doe\"\n                                                v-model=\"basicsModel.address\"\n                                                :error=\"errors.first('address')\"\n                                                name=\"address\"\n                                            />\n                                        </div>\n                                        <div class=\"col-lg-8\">\n                                            <location-picker v-model=\"basicsModel.location\" />\n                                        </div>\n\n                                        <div class=\"col-lg-8\">\n                                            <base-checkbox\n                                                v-model=\"basicsModel.signature\"\n                                            >Require Signature</base-checkbox>\n                                        </div>\n                                    </div>\n\n                                    <div class=\"row\">\n                                        <div class=\"col-md-12\">\n                                            <base-button\n                                                type=\"primary\"\n                                                @click=\"update()\"\n                                                class=\"float-right\"\n                                                :disabled=\"updating?true:false\"\n                                            >{{ updating?\"Saving Changes...\":\"Save Changes\" }}</base-button>\n                                        </div>\n                                    </div>\n                                </form>\n                                <template v-if=\"basicsModel.signature\">\n                                    <hr />\n                                    <signature :order=\"basicsModel\" />\n                                </template>\n\n                                <hr />\n                                <warehouse-signature :order=\"basicsModel\" />\n\n                                <hr />\n                                <tasks ref=\"tasks\" />\n\n                                <hr />\n                                <invoice ref=\"invoice\" />\n                                <hr />\n                                <notes :order=\"basicsModel\" />\n                                <hr />\n                                <attachments :order=\"basicsModel\" />\n                                <!-- <notes /> -->\n                            </div>\n                        </template>\n                    </card>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n<script>\nimport api from '@/api/order'\nimport flatPicker from 'vue-flatpickr-component'\nimport tasks from './Tasks.vue'\nimport invoice from './Invoice.vue'\nimport notes from './Notes.vue'\nimport attachments from './Attachments.vue'\nimport signature from './Signature.vue'\nimport warehouseSignature from './WarehouseSignature.vue'\nimport LocationPicker from '@/components/Map/LocationPicker'\n\nexport default {\n    name: 'view-order',\n    components: {\n        flatPicker,\n        tasks,\n        invoice,\n        notes,\n        LocationPicker,\n        attachments,\n        signature,\n        warehouseSignature,\n    },\n    data() {\n        return {\n            basicsModel: {\n                /* other props go gere */\n                notes: [\n                    {\n                        content: 'Simple item task...',\n                    },\n                ],\n            },\n            basicsModelHash: '',\n            tasksModel: {},\n            invoiceModel: {},\n            tasks: [\n                // {\n                //     checked: true,\n                //     name: 'Simple item task...',\n                //     deleted: false,\n                // },\n            ],\n            invoiceItems: [\n                // {\n                //     item: 'Sample Item',\n                //     quantity: 0,\n                //     price: 0,\n                //     deleted: false,\n                // },\n            ],\n\n            updating: false,\n            submittingTasks: false,\n            drivers: [],\n            warehouses: [],\n            customers: [],\n        }\n    },\n    methods: {\n        downloadSummary() {\n            api.downloadSummary(this.orderId)\n        },\n        updated() {\n            console.log(this.basicsModel)\n        },\n        update() {\n            // this.basicsModel.schedule_at =\n            //     this.basicsModel.date + ' ' + this.basicsModel.time + ':00'\n\n            // this.basicsModel.lat = this.basicsModel.location.lat\n            // this.basicsModel.long = this.basicsModel.location.lng\n\n            // let model = JSON.parse(JSON.stringify(this.basicsModel))\n\n            // model.signature = model.signature ? 1 : 0\n\n            let model = this.getModel()\n\n            this.updating = true\n\n            api.update(this.$route.params.id, model)\n                .then(result => {\n                    this.$swal({\n                        title: 'Order Updated!',\n                        type: 'success',\n                    })\n                    let model = result.data.success.data\n\n                    // split scheduled_at into date and time\n                    const time = model.schedule_at.split(' ')\n                    model.date = time[0]\n                    model.time = time[1]\n\n                    model.completed = model.completed === 1\n                    model.signature = model.signature === 1\n\n                    model.location = new L.latLng(\n                        model.lat ? model.lat : 0,\n                        model.long ? model.long : 0\n                    )\n\n                    this.basicsModel = model\n\n                    this.hashBasicsModel()\n                })\n                .catch(error => {\n                    this.$swal({\n                        title: 'Error Updating Order!',\n                        type: 'error',\n                    })\n                })\n                .finally(() => {\n                    this.updating = false\n                })\n        },\n        currency(num) {\n            return num.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n        },\n        toggleCompletion() {\n            // this.markAsIncomplete()\n            if (this.basicsModel.complete) {\n                this.markAsIncomplete()\n            } else {\n                this.markAsComplete()\n            }\n        },\n        markAsComplete() {\n            this.$swal\n                .fire({\n                    title: 'Mark as Complete?',\n                    text: `Are you sure you want to mark this order as complete?`,\n                    type: 'warning',\n                    showCancelButton: true,\n                    confirmButtonColor: '#3085d6',\n                    cancelButtonColor: '#d33',\n                    confirmButtonText: 'Yes',\n                })\n                .then(result => {\n                    if (!result.value) return\n\n                    this.updating = true\n                    api.markAsComplete(this.$route.params.id)\n                        .then(res => {\n                            this.$swal({\n                                title: 'Order Completed!',\n                                type: 'success',\n                            })\n                            this.basicsModel.complete = true\n                        })\n                        .catch(error => {\n                            this.$swal({\n                                title: 'Error Marking as Complete!',\n                                type: 'error',\n                            })\n                        })\n                        .finally(() => {\n                            this.updating = false\n                        })\n                })\n        },\n        markAsIncomplete() {\n            this.$swal\n                .fire({\n                    title: 'Mark as Incomplete?',\n                    text: `Are you sure you want to mark this order as incomplete?`,\n                    type: 'warning',\n                    showCancelButton: true,\n                    confirmButtonColor: '#3085d6',\n                    cancelButtonColor: '#d33',\n                    confirmButtonText: 'Yes',\n                })\n                .then(result => {\n                    if (!result.value) return\n\n                    this.updating = true\n                    api.markAsIncomplete(this.$route.params.id)\n                        .then(res => {\n                            this.$swal({\n                                title: 'Order Set As Incompleted!',\n                                type: 'success',\n                            })\n                            this.basicsModel.complete = false\n                            this.hashBasicsModel()\n                        })\n                        .catch(error => {\n                            this.$swal({\n                                title: 'Error Marking as Complete!',\n                                type: 'error',\n                            })\n                        })\n                        .finally(() => {\n                            this.updating = false\n                        })\n                })\n        },\n        getModel() {\n            if (this.basicsModel == null) return null\n\n            let m = JSON.parse(JSON.stringify(this.basicsModel))\n\n            let model = {}\n            model.customer_id = m.customer_id\n            model.driver_id = m.driver_id\n            model.warehouse_id = m.warehouse_id\n            model.description = m.description == '' ? null : m.description\n            model.address = m.address == '' ? null : m.address\n            model.schedule_at = m.date + ' ' + m.time // + ':00'\n\n            if (m.location) {\n                model.lat = m.location.lat\n                model.long = m.location.lng\n            }\n\n            model.signature = m.signature ? 1 : 0\n\n            return model\n        },\n        getModelHash() {\n            return JSON.stringify(this.getModel())\n        },\n        hashBasicsModel() {\n            // create hash\n            this.basicsModelHash = this.getModelHash()\n        },\n        hasBasicModelChanged() {\n            let hash = this.getModelHash()\n            // console.log(hash)\n            // console.log(this.basicsModelHash)\n            if (this.basicsModelHash != hash) return true\n            return false\n        },\n        hasTasksModelChanged() {},\n        hasInvoiceModelChanged() {},\n    },\n    mounted() {\n        api.fetchById(this.$route.params.id).then(result => {\n            let model = result.data.success.data\n\n            // split scheduled_at into date and time\n            const time = model.schedule_at.split(' ')\n            model.date = time[0]\n            model.time = time[1]\n\n            model.complete = model.completed === 1\n            model.signature = model.signature === 1\n\n            model.location = new L.latLng(\n                model.lat ? model.lat : 0,\n                model.long ? model.long : 0\n            )\n\n            this.basicsModel = model\n            this.hashBasicsModel()\n        })\n\n        api.fetchTasks(this.$route.params.id).then(result => {\n            let tasks = result.data.success.data\n            this.tasks = tasks\n        })\n\n        api.fetchDrivers().then(result => {\n            let drivers = result.data.success.data\n\n            this.drivers = drivers\n        })\n\n        api.fetchWarehouses().then(result => {\n            let warehouses = result.data.success.data\n            this.warehouses = warehouses\n        })\n\n        api.fetchCustomers().then(result => {\n            let customers = result.data.success.data\n            this.customers = customers\n        })\n    },\n\n    computed: {\n        complete() {\n            return this.basicsModel.complete\n        },\n        orderId() {\n            return this.$route.params.id\n        },\n    },\n    beforeRouteLeave(to, from, next) {\n        // check basic model\n        if (this.hasBasicModelChanged()) {\n            let answer = window.confirm(\n                'Do you really want to leave? you have unsaved changes!'\n            )\n            if (answer) {\n                next()\n            } else {\n                next(false)\n            }\n            return\n        }\n\n        // check tasks\n        if (this.$refs.tasks.hasUnsavedChanges()) {\n            let answer = window.confirm(\n                'Do you really want to leave? you have unsaved changes to your tasks!'\n            )\n            if (answer) {\n                next()\n            } else {\n                next(false)\n            }\n            return\n        }\n\n        // check invoice\n        if (this.$refs.invoice) {\n            if (this.$refs.invoice.hasUnsavedChanges()) {\n                let answer = window.confirm(\n                    'Do you really want to leave? You have unsaved changes to your invoice items!'\n                )\n                if (answer) {\n                    next()\n                } else {\n                    next(false)\n                }\n                return\n            }\n        }\n\n        next()\n\n        // if (hasChanges) {\n        //     next()\n        // } else {\n        //     next(false)\n    },\n}\n</script>\n<style>\n.deleted-task {\n    color: red;\n    text-decoration: line-through;\n}\n</style>\n"]}]}