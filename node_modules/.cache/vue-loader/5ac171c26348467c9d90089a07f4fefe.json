{"remainingRequest":"/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jlawrence/10x/apps/OmsVue/src/views/Orders/Notes.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/jlawrence/10x/apps/OmsVue/src/views/Orders/Notes.vue","mtime":1585672524045},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport api from '@/api/order'\nimport moment from 'moment'\n\nexport default {\n    name: 'notes',\n    props: {\n        order: {\n            type: Object,\n            default() {\n                return {\n                    notes: [\n                        {\n                            id: 0,\n                            content: '',\n                        },\n                    ],\n                }\n            },\n        },\n    },\n    data() {\n        return {\n            submitting: false,\n        }\n    },\n    methods: {\n        deleteNote(id) {\n            this.$swal\n                .fire({\n                    title: 'Delete Note?',\n                    text: `Are you sure you want to delete this order?`,\n                    type: 'warning',\n                    showCancelButton: true,\n                    confirmButtonColor: '#3085d6',\n                    cancelButtonColor: '#d33',\n                })\n                .then(result => {\n                    if (!result.value) return\n\n                    this.submitting = true\n                    api.deleteNote(this.order.id, id)\n                        .then(res => {\n                            this.$swal({\n                                title: 'Note Deleted!',\n                                type: 'success',\n                            })\n\n                            let index = this.order.notes.findIndex(\n                                x => x.id == id\n                            )\n                            this.order.notes.splice(index, 1)\n                        })\n                        .catch(error => {\n                            this.$swal({\n                                title: 'Error Deleting Note!',\n                                type: 'error',\n                            })\n                        })\n                        .finally(() => {\n                            this.submitting = false\n                        })\n                })\n        },\n        displayTime(time) {\n            return moment(time, 'YYYY-MM-DD HH:mm:ss').format(\n                'dddd, MMMM Do YYYY, h:mm:ss a'\n            )\n        },\n    },\n    mounted() {\n        // api.fetchNotes(this.$route.params.id).then(result => {\n        //     this.notes = result.data.success.data\n        // })\n    },\n}\n",{"version":3,"sources":["Notes.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Notes.vue","sourceRoot":"src/views/Orders","sourcesContent":["<template>\n    <div>\n        <h6 class=\"heading-small text-muted mb-4\">Notes</h6>\n        <template v-if=\"order && order.notes && order.notes.length != 0\">\n            <div class=\"row\" v-for=\"(item, index) in order.notes\" :key=\"index\">\n                <div class=\"col-lg-12\">\n                    <div class=\"form-group\">\n                        <i class=\"text-sm\">{{ displayTime(item.created_at) }}</i>\n                        <div class=\"has-label\">\n                            <textarea class=\"form-control\" disabled v-model=\"item.content\"></textarea>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-md-12 text-right\">\n                    <base-button\n                        size=\"sm\"\n                        type=\"primary\"\n                        @click=\"deleteNote(item.id)\"\n                        :disabled=\"submitting?true:false\"\n                    >{{ \"Delete Note\" }}</base-button>\n                </div>\n            </div>\n        </template>\n        <div v-else style=\"padding:5em 0; text-align:center;\">No Notes Submitted</div>\n    </div>\n</template>\n\n<script>\nimport api from '@/api/order'\nimport moment from 'moment'\n\nexport default {\n    name: 'notes',\n    props: {\n        order: {\n            type: Object,\n            default() {\n                return {\n                    notes: [\n                        {\n                            id: 0,\n                            content: '',\n                        },\n                    ],\n                }\n            },\n        },\n    },\n    data() {\n        return {\n            submitting: false,\n        }\n    },\n    methods: {\n        deleteNote(id) {\n            this.$swal\n                .fire({\n                    title: 'Delete Note?',\n                    text: `Are you sure you want to delete this order?`,\n                    type: 'warning',\n                    showCancelButton: true,\n                    confirmButtonColor: '#3085d6',\n                    cancelButtonColor: '#d33',\n                })\n                .then(result => {\n                    if (!result.value) return\n\n                    this.submitting = true\n                    api.deleteNote(this.order.id, id)\n                        .then(res => {\n                            this.$swal({\n                                title: 'Note Deleted!',\n                                type: 'success',\n                            })\n\n                            let index = this.order.notes.findIndex(\n                                x => x.id == id\n                            )\n                            this.order.notes.splice(index, 1)\n                        })\n                        .catch(error => {\n                            this.$swal({\n                                title: 'Error Deleting Note!',\n                                type: 'error',\n                            })\n                        })\n                        .finally(() => {\n                            this.submitting = false\n                        })\n                })\n        },\n        displayTime(time) {\n            return moment(time, 'YYYY-MM-DD HH:mm:ss').format(\n                'dddd, MMMM Do YYYY, h:mm:ss a'\n            )\n        },\n    },\n    mounted() {\n        // api.fetchNotes(this.$route.params.id).then(result => {\n        //     this.notes = result.data.success.data\n        // })\n    },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n</style>"]}]}