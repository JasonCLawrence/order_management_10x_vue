{"remainingRequest":"/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jlawrence/10x/apps/OmsVue/src/views/Orders/ChangeOrdersWarehouse.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/jlawrence/10x/apps/OmsVue/src/views/Orders/ChangeOrdersWarehouse.vue","mtime":1585672524045},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport api from '@/api/order'\nimport flatPicker from 'vue-flatpickr-component'\n\nexport default {\n    name: 'change-orders-warehouse',\n    components: { flatPicker },\n    props: ['orders'],\n    data: () => {\n        return {\n            visible: false,\n            warehouses: [],\n            warehouseId: 0,\n            submitting: false,\n        }\n    },\n    created() {},\n    methods: {\n        show() {\n            this.visible = true\n            this.warehouseId = 0\n        },\n        close() {\n            this.visible = false\n        },\n        cancel() {\n            this.visible = false\n        },\n        submit() {\n            this.submitting = true\n            this.$store\n                .dispatch('orders/bulkSetWarehouse', {\n                    orders: this.orders,\n                    warehouseId: this.warehouseId,\n                })\n                .then(x => {\n                    this.$swal.fire('Success!', 'Warehouse changed', 'success')\n\n                    this.$emit('success')\n                    this.visible = false\n                })\n                .catch(x => {\n                    this.$swal.fire(\n                        'Error!',\n                        'Error changing warehouse',\n                        'error'\n                    )\n\n                    this.$emit('error')\n                    this.visible = false\n                })\n                .finally(x => {\n                    this.submitting = false\n                })\n        },\n    },\n    mounted() {\n        api.fetchWarehouses().then(result => {\n            let warehouses = result.data.success.data\n            this.warehouses = warehouses\n\n            // if there is no assigned warehouse, assign the first one\n            if (!this.warehouseId && warehouses.length > 0)\n                this.warehouseId = warehouses[0].id\n        })\n    },\n}\n",{"version":3,"sources":["ChangeOrdersWarehouse.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"ChangeOrdersWarehouse.vue","sourceRoot":"src/views/Orders","sourcesContent":["<template>\n    <modal :show=\"visible\" modalClasses=\"wide-modal\" @close=\"close()\">\n        <form role=\"form\" submit.prevent=\"submit\">\n            <h2 class=\"text-center\">Set Warehouse</h2>\n\n            <div class=\"form-group\">\n                <label class=\"form-control-label\">Warehouse</label>\n                <div class=\"has-label\">\n                    <select\n                        id=\"warehouse\"\n                        name=\"driver\"\n                        class=\"form-control\"\n                        v-model=\"warehouseId\"\n                        v-validate=\"'required'\"\n                    >\n                        <option\n                            v-for=\"(el, key) in warehouses\"\n                            :value=\"el.id\"\n                            :key=\"key\"\n                        >{{el.name}}</option>\n                    </select>\n                </div>\n                <div\n                    class=\"text-danger invalid-feedback\"\n                    style=\"display: block;\"\n                    v-if=\"errors.has('warehouse')\"\n                >{{ errors.first('warehouse') }}</div>\n            </div>\n\n            <div class=\"text-right\">\n                <base-button\n                    class=\"my-4\"\n                    type=\"warning\"\n                    :disabled=\"submitting?true:false\"\n                    @click=\"cancel()\"\n                >Cancel</base-button>\n                <base-button\n                    class=\"my-4\"\n                    type=\"primary\"\n                    :disabled=\"submitting?true:false\"\n                    @click=\"submit()\"\n                >{{ submitting?'Submitting':'Change' }}</base-button>\n            </div>\n        </form>\n    </modal>\n</template>\n\n<script>\nimport api from '@/api/order'\nimport flatPicker from 'vue-flatpickr-component'\n\nexport default {\n    name: 'change-orders-warehouse',\n    components: { flatPicker },\n    props: ['orders'],\n    data: () => {\n        return {\n            visible: false,\n            warehouses: [],\n            warehouseId: 0,\n            submitting: false,\n        }\n    },\n    created() {},\n    methods: {\n        show() {\n            this.visible = true\n            this.warehouseId = 0\n        },\n        close() {\n            this.visible = false\n        },\n        cancel() {\n            this.visible = false\n        },\n        submit() {\n            this.submitting = true\n            this.$store\n                .dispatch('orders/bulkSetWarehouse', {\n                    orders: this.orders,\n                    warehouseId: this.warehouseId,\n                })\n                .then(x => {\n                    this.$swal.fire('Success!', 'Warehouse changed', 'success')\n\n                    this.$emit('success')\n                    this.visible = false\n                })\n                .catch(x => {\n                    this.$swal.fire(\n                        'Error!',\n                        'Error changing warehouse',\n                        'error'\n                    )\n\n                    this.$emit('error')\n                    this.visible = false\n                })\n                .finally(x => {\n                    this.submitting = false\n                })\n        },\n    },\n    mounted() {\n        api.fetchWarehouses().then(result => {\n            let warehouses = result.data.success.data\n            this.warehouses = warehouses\n\n            // if there is no assigned warehouse, assign the first one\n            if (!this.warehouseId && warehouses.length > 0)\n                this.warehouseId = warehouses[0].id\n        })\n    },\n}\n</script>\n"]}]}