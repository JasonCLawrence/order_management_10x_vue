{"remainingRequest":"/home/jlawrence/10x/apps/OmsVue/node_modules/thread-loader/dist/cjs.js!/home/jlawrence/10x/apps/OmsVue/node_modules/babel-loader/lib/index.js!/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jlawrence/10x/apps/OmsVue/src/views/Orders/ViewOrder.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/jlawrence/10x/apps/OmsVue/src/views/Orders/ViewOrder.vue","mtime":1585672524045},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.split\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport api from '@/api/order';\nimport flatPicker from 'vue-flatpickr-component';\nimport tasks from \"./Tasks.vue\";\nimport invoice from \"./Invoice.vue\";\nimport notes from \"./Notes.vue\";\nimport attachments from \"./Attachments.vue\";\nimport signature from \"./Signature.vue\";\nimport warehouseSignature from \"./WarehouseSignature.vue\";\nimport LocationPicker from '@/components/Map/LocationPicker';\nexport default {\n  name: 'view-order',\n  components: {\n    flatPicker: flatPicker,\n    tasks: tasks,\n    invoice: invoice,\n    notes: notes,\n    LocationPicker: LocationPicker,\n    attachments: attachments,\n    signature: signature,\n    warehouseSignature: warehouseSignature\n  },\n  data: function data() {\n    return {\n      basicsModel: {\n        /* other props go gere */\n        notes: [{\n          content: 'Simple item task...'\n        }]\n      },\n      basicsModelHash: '',\n      tasksModel: {},\n      invoiceModel: {},\n      tasks: [// {\n        //     checked: true,\n        //     name: 'Simple item task...',\n        //     deleted: false,\n        // },\n      ],\n      invoiceItems: [// {\n        //     item: 'Sample Item',\n        //     quantity: 0,\n        //     price: 0,\n        //     deleted: false,\n        // },\n      ],\n      updating: false,\n      submittingTasks: false,\n      drivers: [],\n      warehouses: [],\n      customers: []\n    };\n  },\n  methods: {\n    downloadSummary: function downloadSummary() {\n      api.downloadSummary(this.orderId);\n    },\n    updated: function updated() {\n      console.log(this.basicsModel);\n    },\n    update: function update() {\n      var _this = this;\n\n      // this.basicsModel.schedule_at =\n      //     this.basicsModel.date + ' ' + this.basicsModel.time + ':00'\n      // this.basicsModel.lat = this.basicsModel.location.lat\n      // this.basicsModel.long = this.basicsModel.location.lng\n      // let model = JSON.parse(JSON.stringify(this.basicsModel))\n      // model.signature = model.signature ? 1 : 0\n      var model = this.getModel();\n      this.updating = true;\n      api.update(this.$route.params.id, model).then(function (result) {\n        _this.$swal({\n          title: 'Order Updated!',\n          type: 'success'\n        });\n\n        var model = result.data.success.data; // split scheduled_at into date and time\n\n        var time = model.schedule_at.split(' ');\n        model.date = time[0];\n        model.time = time[1];\n        model.completed = model.completed === 1;\n        model.signature = model.signature === 1;\n        model.location = new L.latLng(model.lat ? model.lat : 0, model.long ? model.long : 0);\n        _this.basicsModel = model;\n\n        _this.hashBasicsModel();\n      }).catch(function (error) {\n        _this.$swal({\n          title: 'Error Updating Order!',\n          type: 'error'\n        });\n      }).finally(function () {\n        _this.updating = false;\n      });\n    },\n    currency: function currency(num) {\n      return num.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n    },\n    toggleCompletion: function toggleCompletion() {\n      // this.markAsIncomplete()\n      if (this.basicsModel.complete) {\n        this.markAsIncomplete();\n      } else {\n        this.markAsComplete();\n      }\n    },\n    markAsComplete: function markAsComplete() {\n      var _this2 = this;\n\n      this.$swal.fire({\n        title: 'Mark as Complete?',\n        text: \"Are you sure you want to mark this order as complete?\",\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Yes'\n      }).then(function (result) {\n        if (!result.value) return;\n        _this2.updating = true;\n        api.markAsComplete(_this2.$route.params.id).then(function (res) {\n          _this2.$swal({\n            title: 'Order Completed!',\n            type: 'success'\n          });\n\n          _this2.basicsModel.complete = true;\n        }).catch(function (error) {\n          _this2.$swal({\n            title: 'Error Marking as Complete!',\n            type: 'error'\n          });\n        }).finally(function () {\n          _this2.updating = false;\n        });\n      });\n    },\n    markAsIncomplete: function markAsIncomplete() {\n      var _this3 = this;\n\n      this.$swal.fire({\n        title: 'Mark as Incomplete?',\n        text: \"Are you sure you want to mark this order as incomplete?\",\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Yes'\n      }).then(function (result) {\n        if (!result.value) return;\n        _this3.updating = true;\n        api.markAsIncomplete(_this3.$route.params.id).then(function (res) {\n          _this3.$swal({\n            title: 'Order Set As Incompleted!',\n            type: 'success'\n          });\n\n          _this3.basicsModel.complete = false;\n\n          _this3.hashBasicsModel();\n        }).catch(function (error) {\n          _this3.$swal({\n            title: 'Error Marking as Complete!',\n            type: 'error'\n          });\n        }).finally(function () {\n          _this3.updating = false;\n        });\n      });\n    },\n    getModel: function getModel() {\n      if (this.basicsModel == null) return null;\n      var m = JSON.parse(JSON.stringify(this.basicsModel));\n      var model = {};\n      model.customer_id = m.customer_id;\n      model.driver_id = m.driver_id;\n      model.warehouse_id = m.warehouse_id;\n      model.description = m.description == '' ? null : m.description;\n      model.address = m.address == '' ? null : m.address;\n      model.schedule_at = m.date + ' ' + m.time; // + ':00'\n\n      if (m.location) {\n        model.lat = m.location.lat;\n        model.long = m.location.lng;\n      }\n\n      model.signature = m.signature ? 1 : 0;\n      return model;\n    },\n    getModelHash: function getModelHash() {\n      return JSON.stringify(this.getModel());\n    },\n    hashBasicsModel: function hashBasicsModel() {\n      // create hash\n      this.basicsModelHash = this.getModelHash();\n    },\n    hasBasicModelChanged: function hasBasicModelChanged() {\n      var hash = this.getModelHash(); // console.log(hash)\n      // console.log(this.basicsModelHash)\n\n      if (this.basicsModelHash != hash) return true;\n      return false;\n    },\n    hasTasksModelChanged: function hasTasksModelChanged() {},\n    hasInvoiceModelChanged: function hasInvoiceModelChanged() {}\n  },\n  mounted: function mounted() {\n    var _this4 = this;\n\n    api.fetchById(this.$route.params.id).then(function (result) {\n      var model = result.data.success.data; // split scheduled_at into date and time\n\n      var time = model.schedule_at.split(' ');\n      model.date = time[0];\n      model.time = time[1];\n      model.complete = model.completed === 1;\n      model.signature = model.signature === 1;\n      model.location = new L.latLng(model.lat ? model.lat : 0, model.long ? model.long : 0);\n      _this4.basicsModel = model;\n\n      _this4.hashBasicsModel();\n    });\n    api.fetchTasks(this.$route.params.id).then(function (result) {\n      var tasks = result.data.success.data;\n      _this4.tasks = tasks;\n    });\n    api.fetchDrivers().then(function (result) {\n      var drivers = result.data.success.data;\n      _this4.drivers = drivers;\n    });\n    api.fetchWarehouses().then(function (result) {\n      var warehouses = result.data.success.data;\n      _this4.warehouses = warehouses;\n    });\n    api.fetchCustomers().then(function (result) {\n      var customers = result.data.success.data;\n      _this4.customers = customers;\n    });\n  },\n  computed: {\n    complete: function complete() {\n      return this.basicsModel.complete;\n    },\n    orderId: function orderId() {\n      return this.$route.params.id;\n    }\n  },\n  beforeRouteLeave: function beforeRouteLeave(to, from, next) {\n    // check basic model\n    if (this.hasBasicModelChanged()) {\n      var answer = window.confirm('Do you really want to leave? you have unsaved changes!');\n\n      if (answer) {\n        next();\n      } else {\n        next(false);\n      }\n\n      return;\n    } // check tasks\n\n\n    if (this.$refs.tasks.hasUnsavedChanges()) {\n      var _answer = window.confirm('Do you really want to leave? you have unsaved changes to your tasks!');\n\n      if (_answer) {\n        next();\n      } else {\n        next(false);\n      }\n\n      return;\n    } // check invoice\n\n\n    if (this.$refs.invoice) {\n      if (this.$refs.invoice.hasUnsavedChanges()) {\n        var _answer2 = window.confirm('Do you really want to leave? You have unsaved changes to your invoice items!');\n\n        if (_answer2) {\n          next();\n        } else {\n          next(false);\n        }\n\n        return;\n      }\n    }\n\n    next(); // if (hasChanges) {\n    //     next()\n    // } else {\n    //     next(false)\n  }\n};",{"version":3,"sources":["ViewOrder.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div>\n        <base-header class=\"header pb-8 pt-5 pt-lg-5 d-flex\" />\n\n        <div class=\"container-fluid mt--7 pb-4\">\n            <div class=\"row\">\n                <div class=\"col-xl-12 order-xl-1\">\n                    <card shadow type=\"secondary\">\n                        <div slot=\"header\" class=\"bg-white border-0\">\n                            <div class=\"row align-items-center\">\n                                <div class=\"col-8\">\n                                    <h3 class=\"mb-0\">\n                                        Order\n                                        <span>{{ this.basicsModel.complete?\"(complete)\":\"(incomplete)\" }}</span>\n                                    </h3>\n                                </div>\n                                <div class=\"col-4 text-right\">\n                                    <base-button\n                                        @click=\"downloadSummary()\"\n                                        :disabled=\"updating\"\n                                    >Download Summary</base-button>\n                                    <base-button\n                                        @click=\"toggleCompletion()\"\n                                        :disabled=\"updating\"\n                                    >{{ this.basicsModel.complete?\"Mark as Incomplete\":\"Mark as Complete\" }}</base-button>\n                                </div>\n                            </div>\n                        </div>\n                        <template>\n                            <div class=\"pl-lg-4\">\n                                <h6 class=\"heading-small text-muted mb-4\">Basics</h6>\n                                <form @submit.prevent=\"update()\">\n                                    <div class=\"row\">\n                                        <div class=\"col-lg-8\">\n                                            <div class=\"form-group\">\n                                                <label class=\"form-control-label\">Driver</label>\n                                                <div class=\"has-label\">\n                                                    <select\n                                                        class=\"form-control\"\n                                                        v-model=\"basicsModel.driver_id\"\n                                                    >\n                                                        <option\n                                                            v-for=\"(driver, key) in drivers\"\n                                                            :value=\"driver.id\"\n                                                            :key=\"key\"\n                                                        >{{driver.first_name}} {{driver.last_name}}</option>\n                                                    </select>\n                                                </div>\n                                            </div>\n                                        </div>\n\n                                        <div class=\"col-lg-8\">\n                                            <div class=\"form-group\">\n                                                <label class=\"form-control-label\">Customer</label>\n                                                <div class=\"has-label\">\n                                                    <select\n                                                        class=\"form-control\"\n                                                        v-model=\"basicsModel.customer_id\"\n                                                    >\n                                                        <option\n                                                            v-for=\"(el, key) in customers\"\n                                                            :value=\"el.id\"\n                                                            :key=\"key\"\n                                                        >{{el.name}}</option>\n                                                    </select>\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <div class=\"col-lg-8\">\n                                            <div class=\"form-group\">\n                                                <label class=\"form-control-label\">Warehouse</label>\n                                                <div class=\"has-label\">\n                                                    <select\n                                                        class=\"form-control\"\n                                                        v-model=\"basicsModel.warehouse_id\"\n                                                    >\n                                                        <option\n                                                            v-for=\"(el, key) in warehouses\"\n                                                            :value=\"el.id\"\n                                                            :key=\"key\"\n                                                        >{{el.name}}</option>\n                                                    </select>\n                                                </div>\n                                            </div>\n                                        </div>\n\n                                        <div class=\"col-lg-8\">\n                                            <div class=\"form-group\">\n                                                <label class=\"form-control-label\">Description</label>\n                                                <div class=\"has-label\">\n                                                    <textarea\n                                                        class=\"form-control\"\n                                                        rows=\"3\"\n                                                        placeholder=\"Small description of order...\"\n                                                        name=\"description\"\n                                                        v-model=\"basicsModel.description\"\n                                                        :error=\"errors.first('description')\"\n                                                    ></textarea>\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <!-- Empty col as passing for row -->\n                                        <div class=\"col-lg-4\"></div>\n\n                                        <div class=\"col-lg-4\">\n                                            <base-input label=\"Date\">\n                                                <flat-picker\n                                                    slot-scope=\"{focus, blur}\"\n                                                    @on-open=\"focus\"\n                                                    @on-close=\"blur\"\n                                                    :config=\"{allowInput: true}\"\n                                                    class=\"form-control datepicker\"\n                                                    v-model=\"basicsModel.date\"\n                                                ></flat-picker>\n                                            </base-input>\n                                        </div>\n\n                                        <div class=\"col-lg-4\">\n                                            <base-input\n                                                label=\"Time\"\n                                                :error=\"errors.first('time')\"\n                                                v-validate=\"'required'\"\n                                                name=\"time\"\n                                            >\n                                                <flat-picker\n                                                    slot-scope=\"{focus, blur}\"\n                                                    @on-open=\"focus\"\n                                                    @on-close=\"blur\"\n                                                    :config=\"{enableTime: true,noCalendar: true,dateFormat: 'H:i:ss'}\"\n                                                    class=\"form-control datepicker\"\n                                                    v-model=\"basicsModel.time\"\n                                                ></flat-picker>\n                                            </base-input>\n                                        </div>\n\n                                        <div class=\"col-lg-8\">\n                                            <base-input\n                                                label=\"Address\"\n                                                placeholder=\"Doe\"\n                                                v-model=\"basicsModel.address\"\n                                                :error=\"errors.first('address')\"\n                                                name=\"address\"\n                                            />\n                                        </div>\n                                        <div class=\"col-lg-8\">\n                                            <location-picker v-model=\"basicsModel.location\" />\n                                        </div>\n\n                                        <div class=\"col-lg-8\">\n                                            <base-checkbox\n                                                v-model=\"basicsModel.signature\"\n                                            >Require Signature</base-checkbox>\n                                        </div>\n                                    </div>\n\n                                    <div class=\"row\">\n                                        <div class=\"col-md-12\">\n                                            <base-button\n                                                type=\"primary\"\n                                                @click=\"update()\"\n                                                class=\"float-right\"\n                                                :disabled=\"updating?true:false\"\n                                            >{{ updating?\"Saving Changes...\":\"Save Changes\" }}</base-button>\n                                        </div>\n                                    </div>\n                                </form>\n                                <template v-if=\"basicsModel.signature\">\n                                    <hr />\n                                    <signature :order=\"basicsModel\" />\n                                </template>\n\n                                <hr />\n                                <warehouse-signature :order=\"basicsModel\" />\n\n                                <hr />\n                                <tasks ref=\"tasks\" />\n\n                                <hr />\n                                <invoice ref=\"invoice\" />\n                                <hr />\n                                <notes :order=\"basicsModel\" />\n                                <hr />\n                                <attachments :order=\"basicsModel\" />\n                                <!-- <notes /> -->\n                            </div>\n                        </template>\n                    </card>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n<script>\nimport api from '@/api/order'\nimport flatPicker from 'vue-flatpickr-component'\nimport tasks from './Tasks.vue'\nimport invoice from './Invoice.vue'\nimport notes from './Notes.vue'\nimport attachments from './Attachments.vue'\nimport signature from './Signature.vue'\nimport warehouseSignature from './WarehouseSignature.vue'\nimport LocationPicker from '@/components/Map/LocationPicker'\n\nexport default {\n    name: 'view-order',\n    components: {\n        flatPicker,\n        tasks,\n        invoice,\n        notes,\n        LocationPicker,\n        attachments,\n        signature,\n        warehouseSignature,\n    },\n    data() {\n        return {\n            basicsModel: {\n                /* other props go gere */\n                notes: [\n                    {\n                        content: 'Simple item task...',\n                    },\n                ],\n            },\n            basicsModelHash: '',\n            tasksModel: {},\n            invoiceModel: {},\n            tasks: [\n                // {\n                //     checked: true,\n                //     name: 'Simple item task...',\n                //     deleted: false,\n                // },\n            ],\n            invoiceItems: [\n                // {\n                //     item: 'Sample Item',\n                //     quantity: 0,\n                //     price: 0,\n                //     deleted: false,\n                // },\n            ],\n\n            updating: false,\n            submittingTasks: false,\n            drivers: [],\n            warehouses: [],\n            customers: [],\n        }\n    },\n    methods: {\n        downloadSummary() {\n            api.downloadSummary(this.orderId)\n        },\n        updated() {\n            console.log(this.basicsModel)\n        },\n        update() {\n            // this.basicsModel.schedule_at =\n            //     this.basicsModel.date + ' ' + this.basicsModel.time + ':00'\n\n            // this.basicsModel.lat = this.basicsModel.location.lat\n            // this.basicsModel.long = this.basicsModel.location.lng\n\n            // let model = JSON.parse(JSON.stringify(this.basicsModel))\n\n            // model.signature = model.signature ? 1 : 0\n\n            let model = this.getModel()\n\n            this.updating = true\n\n            api.update(this.$route.params.id, model)\n                .then(result => {\n                    this.$swal({\n                        title: 'Order Updated!',\n                        type: 'success',\n                    })\n                    let model = result.data.success.data\n\n                    // split scheduled_at into date and time\n                    const time = model.schedule_at.split(' ')\n                    model.date = time[0]\n                    model.time = time[1]\n\n                    model.completed = model.completed === 1\n                    model.signature = model.signature === 1\n\n                    model.location = new L.latLng(\n                        model.lat ? model.lat : 0,\n                        model.long ? model.long : 0\n                    )\n\n                    this.basicsModel = model\n\n                    this.hashBasicsModel()\n                })\n                .catch(error => {\n                    this.$swal({\n                        title: 'Error Updating Order!',\n                        type: 'error',\n                    })\n                })\n                .finally(() => {\n                    this.updating = false\n                })\n        },\n        currency(num) {\n            return num.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n        },\n        toggleCompletion() {\n            // this.markAsIncomplete()\n            if (this.basicsModel.complete) {\n                this.markAsIncomplete()\n            } else {\n                this.markAsComplete()\n            }\n        },\n        markAsComplete() {\n            this.$swal\n                .fire({\n                    title: 'Mark as Complete?',\n                    text: `Are you sure you want to mark this order as complete?`,\n                    type: 'warning',\n                    showCancelButton: true,\n                    confirmButtonColor: '#3085d6',\n                    cancelButtonColor: '#d33',\n                    confirmButtonText: 'Yes',\n                })\n                .then(result => {\n                    if (!result.value) return\n\n                    this.updating = true\n                    api.markAsComplete(this.$route.params.id)\n                        .then(res => {\n                            this.$swal({\n                                title: 'Order Completed!',\n                                type: 'success',\n                            })\n                            this.basicsModel.complete = true\n                        })\n                        .catch(error => {\n                            this.$swal({\n                                title: 'Error Marking as Complete!',\n                                type: 'error',\n                            })\n                        })\n                        .finally(() => {\n                            this.updating = false\n                        })\n                })\n        },\n        markAsIncomplete() {\n            this.$swal\n                .fire({\n                    title: 'Mark as Incomplete?',\n                    text: `Are you sure you want to mark this order as incomplete?`,\n                    type: 'warning',\n                    showCancelButton: true,\n                    confirmButtonColor: '#3085d6',\n                    cancelButtonColor: '#d33',\n                    confirmButtonText: 'Yes',\n                })\n                .then(result => {\n                    if (!result.value) return\n\n                    this.updating = true\n                    api.markAsIncomplete(this.$route.params.id)\n                        .then(res => {\n                            this.$swal({\n                                title: 'Order Set As Incompleted!',\n                                type: 'success',\n                            })\n                            this.basicsModel.complete = false\n                            this.hashBasicsModel()\n                        })\n                        .catch(error => {\n                            this.$swal({\n                                title: 'Error Marking as Complete!',\n                                type: 'error',\n                            })\n                        })\n                        .finally(() => {\n                            this.updating = false\n                        })\n                })\n        },\n        getModel() {\n            if (this.basicsModel == null) return null\n\n            let m = JSON.parse(JSON.stringify(this.basicsModel))\n\n            let model = {}\n            model.customer_id = m.customer_id\n            model.driver_id = m.driver_id\n            model.warehouse_id = m.warehouse_id\n            model.description = m.description == '' ? null : m.description\n            model.address = m.address == '' ? null : m.address\n            model.schedule_at = m.date + ' ' + m.time // + ':00'\n\n            if (m.location) {\n                model.lat = m.location.lat\n                model.long = m.location.lng\n            }\n\n            model.signature = m.signature ? 1 : 0\n\n            return model\n        },\n        getModelHash() {\n            return JSON.stringify(this.getModel())\n        },\n        hashBasicsModel() {\n            // create hash\n            this.basicsModelHash = this.getModelHash()\n        },\n        hasBasicModelChanged() {\n            let hash = this.getModelHash()\n            // console.log(hash)\n            // console.log(this.basicsModelHash)\n            if (this.basicsModelHash != hash) return true\n            return false\n        },\n        hasTasksModelChanged() {},\n        hasInvoiceModelChanged() {},\n    },\n    mounted() {\n        api.fetchById(this.$route.params.id).then(result => {\n            let model = result.data.success.data\n\n            // split scheduled_at into date and time\n            const time = model.schedule_at.split(' ')\n            model.date = time[0]\n            model.time = time[1]\n\n            model.complete = model.completed === 1\n            model.signature = model.signature === 1\n\n            model.location = new L.latLng(\n                model.lat ? model.lat : 0,\n                model.long ? model.long : 0\n            )\n\n            this.basicsModel = model\n            this.hashBasicsModel()\n        })\n\n        api.fetchTasks(this.$route.params.id).then(result => {\n            let tasks = result.data.success.data\n            this.tasks = tasks\n        })\n\n        api.fetchDrivers().then(result => {\n            let drivers = result.data.success.data\n\n            this.drivers = drivers\n        })\n\n        api.fetchWarehouses().then(result => {\n            let warehouses = result.data.success.data\n            this.warehouses = warehouses\n        })\n\n        api.fetchCustomers().then(result => {\n            let customers = result.data.success.data\n            this.customers = customers\n        })\n    },\n\n    computed: {\n        complete() {\n            return this.basicsModel.complete\n        },\n        orderId() {\n            return this.$route.params.id\n        },\n    },\n    beforeRouteLeave(to, from, next) {\n        // check basic model\n        if (this.hasBasicModelChanged()) {\n            let answer = window.confirm(\n                'Do you really want to leave? you have unsaved changes!'\n            )\n            if (answer) {\n                next()\n            } else {\n                next(false)\n            }\n            return\n        }\n\n        // check tasks\n        if (this.$refs.tasks.hasUnsavedChanges()) {\n            let answer = window.confirm(\n                'Do you really want to leave? you have unsaved changes to your tasks!'\n            )\n            if (answer) {\n                next()\n            } else {\n                next(false)\n            }\n            return\n        }\n\n        // check invoice\n        if (this.$refs.invoice) {\n            if (this.$refs.invoice.hasUnsavedChanges()) {\n                let answer = window.confirm(\n                    'Do you really want to leave? You have unsaved changes to your invoice items!'\n                )\n                if (answer) {\n                    next()\n                } else {\n                    next(false)\n                }\n                return\n            }\n        }\n\n        next()\n\n        // if (hasChanges) {\n        //     next()\n        // } else {\n        //     next(false)\n    },\n}\n</script>\n<style>\n.deleted-task {\n    color: red;\n    text-decoration: line-through;\n}\n</style>\n"],"sourceRoot":"src/views/Orders"}]}