{"remainingRequest":"/home/jlawrence/10x/apps/OmsVue/node_modules/babel-loader/lib/index.js!/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jlawrence/10x/apps/OmsVue/src/views/Orders/Attachments.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/jlawrence/10x/apps/OmsVue/src/views/Orders/Attachments.vue","mtime":1585672524045},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.array.find-index\";\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport api from '@/api/order';\nimport moment from 'moment';\nimport LightBox from 'vue-image-lightbox';\nexport default {\n  name: 'attachments',\n  components: {\n    LightBox: LightBox\n  },\n  props: {\n    order: {\n      type: Object,\n      default: function _default() {\n        return {\n          attachments: [{\n            url: ''\n          }]\n        };\n      }\n    }\n  },\n  data: function data() {\n    return {\n      images: [],\n      submitting: false\n    };\n  },\n  methods: {\n    deleteAttachment: function deleteAttachment(id) {\n      var _this = this;\n\n      this.$swal.fire({\n        title: 'Delete Attachment?',\n        text: \"Are you sure you want to delete this attachment?\",\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33'\n      }).then(function (result) {\n        if (!result.value) return;\n        _this.submitting = true;\n        api.deleteAttachment(_this.order.id, id).then(function (res) {\n          _this.$swal({\n            title: 'Attachment Deleted!',\n            type: 'success'\n          });\n\n          var index = _this.order.attachments.findIndex(function (x) {\n            return x.id == id;\n          });\n\n          _this.order.attachments.splice(index, 1);\n\n          _this.recaclImages();\n        }).catch(function (error) {\n          _this.$swal({\n            title: 'Error Deleting Attachment!',\n            type: 'error'\n          });\n        }).finally(function () {\n          _this.submitting = false;\n        });\n      });\n    },\n    displayTime: function displayTime(time) {\n      return moment(time, 'YYYY-MM-DD HH:mm:ss').format('dddd, MMMM Do YYYY, h:mm:ss a');\n    },\n    openGallery: function openGallery(index) {\n      this.$refs.lightbox.showImage(index);\n    },\n    recaclImages: function recaclImages() {\n      if (this.order) {\n        this.images = []; // console.log(this.order.attachments)\n\n        var _iterator = _createForOfIteratorHelper(this.order.attachments),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var a = _step.value;\n            this.images.push({\n              thumb: a.url,\n              src: a.url,\n              caption: ''\n            });\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n  },\n  mounted: function mounted() {// api.fetchNotes(this.$route.params.id).then(result => {\n    //     this.notes = result.data.success.data\n    // })\n    // convert images to format lightbox uses\n  },\n  watch: {\n    order: function order() {\n      // console.log(this.order)\n      // console.log(this.order.attachments)\n      this.recaclImages();\n    }\n  }\n};",{"version":3,"sources":["Attachments.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div>\n        <h6 class=\"heading-small text-muted mb-4\">Attachments</h6>\n        <template v-if=\"order && order.attachments && order.attachments.length != 0\">\n            <LightBox :images=\"images\" ref=\"lightbox\" :show-caption=\"true\" :show-light-box=\"false\"></LightBox>\n            <div class=\"row\">\n                <div\n                    class=\"col-lg-4 text-right\"\n                    v-for=\"(item, index) in order.attachments\"\n                    :key=\"index\"\n                >\n                    <img\n                        :src=\"item.url\"\n                        @click=\"openGallery(index)\"\n                        style=\"width:100%; cursor:pointer;\"\n                    />\n                    <base-button\n                        style=\"margin-top:1em;\"\n                        size=\"sm\"\n                        type=\"primary\"\n                        @click=\"deleteAttachment(item.id)\"\n                        :disabled=\"submitting?true:false\"\n                    >{{ \"Delete Attachment\" }}</base-button>\n                </div>\n                <!-- <div class=\"col-md-12 text-right\">\n                \n                </div>-->\n            </div>\n        </template>\n        <div v-else style=\"padding:5em 0; text-align:center;\">No Attachments Submitted</div>\n    </div>\n</template>\n\n<script>\nimport api from '@/api/order'\nimport moment from 'moment'\nimport LightBox from 'vue-image-lightbox'\n\nexport default {\n    name: 'attachments',\n    components: {\n        LightBox,\n    },\n    props: {\n        order: {\n            type: Object,\n            default() {\n                return {\n                    attachments: [\n                        {\n                            url: '',\n                        },\n                    ],\n                }\n            },\n        },\n    },\n    data() {\n        return {\n            images: [],\n            submitting: false,\n        }\n    },\n    methods: {\n        deleteAttachment(id) {\n            this.$swal\n                .fire({\n                    title: 'Delete Attachment?',\n                    text: `Are you sure you want to delete this attachment?`,\n                    type: 'warning',\n                    showCancelButton: true,\n                    confirmButtonColor: '#3085d6',\n                    cancelButtonColor: '#d33',\n                })\n                .then(result => {\n                    if (!result.value) return\n\n                    this.submitting = true\n                    api.deleteAttachment(this.order.id, id)\n                        .then(res => {\n                            this.$swal({\n                                title: 'Attachment Deleted!',\n                                type: 'success',\n                            })\n\n                            let index = this.order.attachments.findIndex(\n                                x => x.id == id\n                            )\n                            this.order.attachments.splice(index, 1)\n\n                            this.recaclImages()\n                        })\n                        .catch(error => {\n                            this.$swal({\n                                title: 'Error Deleting Attachment!',\n                                type: 'error',\n                            })\n                        })\n                        .finally(() => {\n                            this.submitting = false\n                        })\n                })\n        },\n        displayTime(time) {\n            return moment(time, 'YYYY-MM-DD HH:mm:ss').format(\n                'dddd, MMMM Do YYYY, h:mm:ss a'\n            )\n        },\n\n        openGallery(index) {\n            this.$refs.lightbox.showImage(index)\n        },\n        recaclImages() {\n            if (this.order) {\n                this.images = []\n                // console.log(this.order.attachments)\n                for (let a of this.order.attachments) {\n                    this.images.push({\n                        thumb: a.url,\n                        src: a.url,\n                        caption: '',\n                    })\n                }\n            }\n        },\n    },\n    mounted() {\n        // api.fetchNotes(this.$route.params.id).then(result => {\n        //     this.notes = result.data.success.data\n        // })\n        // convert images to format lightbox uses\n    },\n    watch: {\n        order() {\n            // console.log(this.order)\n            // console.log(this.order.attachments)\n            this.recaclImages()\n        },\n    },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n</style>"],"sourceRoot":"src/views/Orders"}]}