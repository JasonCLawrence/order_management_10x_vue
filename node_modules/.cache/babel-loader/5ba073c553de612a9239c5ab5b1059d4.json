{"remainingRequest":"/home/jlawrence/10x/apps/OmsVue/node_modules/thread-loader/dist/cjs.js!/home/jlawrence/10x/apps/OmsVue/node_modules/babel-loader/lib/index.js!/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jlawrence/10x/apps/OmsVue/src/views/Orders/OrderTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/jlawrence/10x/apps/OmsVue/src/views/Orders/OrderTable.vue","mtime":1585672524045},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.array.find\";\nimport _defineProperty from \"/home/jlawrence/10x/apps/OmsVue/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport _ from 'lodash';\nimport QueryFilter from \"./QueryFilter.vue\";\nimport ChangeOrdersDriver from \"./ChangeOrdersDriver.vue\";\nimport ChangeOrdersWarehouse from \"./ChangeOrdersWarehouse.vue\";\nexport default {\n  name: 'fleet-table',\n  components: {\n    QueryFilter: QueryFilter,\n    ChangeOrdersDriver: ChangeOrdersDriver,\n    ChangeOrdersWarehouse: ChangeOrdersWarehouse\n  },\n  props: {\n    type: {\n      type: String\n    },\n    title: String\n  },\n  data: function data() {\n    return {\n      query: '',\n      page: 1,\n      shouldShowFilters: false,\n      filters: {},\n      bulkAction: 'none',\n      ordersMainCheck: false\n    };\n  },\n  mounted: function mounted() {\n    if (this.$route.query.query) this.query = this.$route.query.query;\n    this.doSearch();\n  },\n  methods: {\n    bulkSetDriver: function bulkSetDriver() {\n      this.$refs.changeOrdersDriverDialog.show();\n    },\n    bulkDriverSuccess: function bulkDriverSuccess() {\n      this.doSearch();\n      this.ordersMainCheck = false;\n    },\n    bulkSetWarehouse: function bulkSetWarehouse() {\n      this.$refs.changeOrdersWarehouseDialog.show();\n    },\n    bulkWarehouseSuccess: function bulkWarehouseSuccess() {\n      this.doSearch();\n      this.ordersMainCheck = false;\n    },\n    bulkDriverError: function bulkDriverError() {},\n    bulkSetIncomplete: function bulkSetIncomplete() {\n      var _this = this;\n\n      this.$swal.fire({\n        title: 'Mark Orders as Complete?',\n        text: \"Are you sure you want to mark these orders as complete?\",\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Yes'\n      }).then(function (result) {\n        if (result.value) {\n          _this.$store.dispatch('orders/bulkSetIncomplete', {\n            orders: _this.checkedOrders\n          }).then(function (x) {\n            _this.$swal.fire('Success!', 'Selected orders were marked as complete', 'success');\n\n            _this.ordersMainCheck = false;\n\n            _this.doSearch();\n          }).catch(function (x) {\n            _this.$swal.fire('Error!', 'There was an error marking orders as complete', 'error');\n          });\n        }\n      });\n    },\n    bulkDelete: function bulkDelete() {\n      var _this2 = this;\n\n      this.$swal.fire({\n        title: 'Delete Orders?',\n        text: \"Are you sure you want to delete these orders?\",\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Yes'\n      }).then(function (result) {\n        if (result.value) {\n          _this2.$store.dispatch('orders/bulkDelete', {\n            orders: _this2.checkedOrders\n          }).then(function (x) {\n            _this2.$swal.fire('Success!', 'Selected orders were deleted', 'success');\n\n            _this2.doSearch();\n          }).catch(function (x) {\n            _this2.$swal.fire('Error!', 'Error deleting selected orders', 'error');\n          });\n\n          _this2.ordersMainCheck = false;\n        }\n      });\n    },\n    toggleChecked: function toggleChecked() {\n      // if there's a checked item then check the rest\n      if (this.checkedOrders.length != this.orders.length) {\n        this.checkAllItems();\n      } else {\n        // if all are checked, then uncheck them\n        this.unCheckAllItems();\n      }\n    },\n    checkAllItems: function checkAllItems() {\n      var _iterator = _createForOfIteratorHelper(this.orders),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var order = _step.value;\n          order.checked = true;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    },\n    unCheckAllItems: function unCheckAllItems() {\n      var _iterator2 = _createForOfIteratorHelper(this.orders),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var order = _step2.value;\n          order.checked = false;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    },\n    applyBulkAction: function applyBulkAction() {},\n    showFilters: function showFilters() {\n      this.shouldShowFilters = true;\n      return false;\n    },\n    hideFilters: function hideFilters() {\n      this.shouldShowFilters = false;\n      return false;\n    },\n    updateQuery: _.debounce(function (query) {\n      this.query = query;\n      this.$router.push({\n        query: {\n          query: this.query\n        }\n      });\n      this.doSearch();\n    }, 200),\n    changePage: function changePage(page) {\n      this.page = page;\n      this.$router.push({\n        query: _objectSpread({\n          page: page,\n          query: this.query\n        }, this.filters)\n      });\n      this.doSearch();\n    },\n    doSearch: function doSearch() {\n      this.$store.dispatch('orders/fetch', {\n        query: this.query,\n        filters: this.filters,\n        page: this.page\n      });\n    },\n    filtersChanged: function filtersChanged(filters) {\n      // requery\n      console.log('filters changed');\n      this.filters = filters;\n      this.doSearch();\n    },\n    view: function view(index) {\n      this.$router.push({\n        path: \"orders/\".concat(index)\n      });\n    },\n    deleteItem: function deleteItem(id) {\n      var _this3 = this;\n\n      var item = this.orders.find(function (el) {\n        return el.id == id;\n      });\n      this.$swal.fire({\n        title: 'Delete Order?',\n        text: \"Are you sure you want to delete this order?\",\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Yes, delete it!'\n      }).then(function (result) {\n        if (result.value) {\n          _this3.$store.dispatch('orders/delete', id).then(function (x) {\n            _this3.$swal.fire('Deleted!', 'Your order has been deleted.', 'success');\n          }).catch(function (x) {\n            _this3.$swal.fire('Error!', 'Unable to delete order!', 'error');\n          });\n        }\n      });\n    },\n    currency: function currency(num) {\n      return num.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n    }\n  },\n  computed: {\n    checkedOrders: function checkedOrders() {\n      return this.$store.state.orders.items.filter(function (x) {\n        return x.checked == true;\n      });\n    },\n    orders: function orders() {\n      return this.$store.state.orders.items;\n    },\n    pagination: function pagination() {\n      return this.$store.state.orders.pagination;\n    }\n  },\n  watch: {\n    filters: {\n      handler: function handler() {\n        console.log('doing search');\n        this.doSearch();\n      },\n      deep: true\n    }\n  }\n};",{"version":3,"sources":["OrderTable.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyKA,OAAA,CAAA,MAAA,QAAA;AACA,OAAA,WAAA;AACA,OAAA,kBAAA;AACA,OAAA,qBAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,aADA;AAEA,EAAA,UAAA,EAAA;AAAA,IAAA,WAAA,EAAA,WAAA;AAAA,IAAA,kBAAA,EAAA,kBAAA;AAAA,IAAA,qBAAA,EAAA;AAAA,GAFA;AAGA,EAAA,KAAA,EAAA;AACA,IAAA,IAAA,EAAA;AACA,MAAA,IAAA,EAAA;AADA,KADA;AAIA,IAAA,KAAA,EAAA;AAJA,GAHA;AASA,EAAA,IATA,kBASA;AACA,WAAA;AACA,MAAA,KAAA,EAAA,EADA;AAEA,MAAA,IAAA,EAAA,CAFA;AAGA,MAAA,iBAAA,EAAA,KAHA;AAIA,MAAA,OAAA,EAAA,EAJA;AAKA,MAAA,UAAA,EAAA,MALA;AAMA,MAAA,eAAA,EAAA;AANA,KAAA;AAQA,GAlBA;AAoBA,EAAA,OApBA,qBAoBA;AACA,QAAA,KAAA,MAAA,CAAA,KAAA,CAAA,KAAA,EAAA,KAAA,KAAA,GAAA,KAAA,MAAA,CAAA,KAAA,CAAA,KAAA;AACA,SAAA,QAAA;AACA,GAvBA;AAyBA,EAAA,OAAA,EAAA;AACA,IAAA,aADA,2BACA;AACA,WAAA,KAAA,CAAA,wBAAA,CAAA,IAAA;AACA,KAHA;AAIA,IAAA,iBAJA,+BAIA;AACA,WAAA,QAAA;AACA,WAAA,eAAA,GAAA,KAAA;AACA,KAPA;AAQA,IAAA,gBARA,8BAQA;AACA,WAAA,KAAA,CAAA,2BAAA,CAAA,IAAA;AACA,KAVA;AAWA,IAAA,oBAXA,kCAWA;AACA,WAAA,QAAA;AACA,WAAA,eAAA,GAAA,KAAA;AACA,KAdA;AAeA,IAAA,eAfA,6BAeA,CAAA,CAfA;AAgBA,IAAA,iBAhBA,+BAgBA;AAAA;;AACA,WAAA,KAAA,CACA,IADA,CACA;AACA,QAAA,KAAA,EAAA,0BADA;AAEA,QAAA,IAAA,2DAFA;AAGA,QAAA,IAAA,EAAA,SAHA;AAIA,QAAA,gBAAA,EAAA,IAJA;AAKA,QAAA,kBAAA,EAAA,SALA;AAMA,QAAA,iBAAA,EAAA,MANA;AAOA,QAAA,iBAAA,EAAA;AAPA,OADA,EAUA,IAVA,CAUA,UAAA,MAAA,EAAA;AACA,YAAA,MAAA,CAAA,KAAA,EAAA;AACA,UAAA,KAAA,CAAA,MAAA,CACA,QADA,CACA,0BADA,EACA;AACA,YAAA,MAAA,EAAA,KAAA,CAAA;AADA,WADA,EAIA,IAJA,CAIA,UAAA,CAAA,EAAA;AACA,YAAA,KAAA,CAAA,KAAA,CAAA,IAAA,CACA,UADA,EAEA,yCAFA,EAGA,SAHA;;AAMA,YAAA,KAAA,CAAA,eAAA,GAAA,KAAA;;AACA,YAAA,KAAA,CAAA,QAAA;AACA,WAbA,EAcA,KAdA,CAcA,UAAA,CAAA,EAAA;AACA,YAAA,KAAA,CAAA,KAAA,CAAA,IAAA,CACA,QADA,EAEA,+CAFA,EAGA,OAHA;AAKA,WApBA;AAqBA;AACA,OAlCA;AAmCA,KApDA;AAqDA,IAAA,UArDA,wBAqDA;AAAA;;AACA,WAAA,KAAA,CACA,IADA,CACA;AACA,QAAA,KAAA,EAAA,gBADA;AAEA,QAAA,IAAA,iDAFA;AAGA,QAAA,IAAA,EAAA,SAHA;AAIA,QAAA,gBAAA,EAAA,IAJA;AAKA,QAAA,kBAAA,EAAA,SALA;AAMA,QAAA,iBAAA,EAAA,MANA;AAOA,QAAA,iBAAA,EAAA;AAPA,OADA,EAUA,IAVA,CAUA,UAAA,MAAA,EAAA;AACA,YAAA,MAAA,CAAA,KAAA,EAAA;AACA,UAAA,MAAA,CAAA,MAAA,CACA,QADA,CACA,mBADA,EACA;AACA,YAAA,MAAA,EAAA,MAAA,CAAA;AADA,WADA,EAIA,IAJA,CAIA,UAAA,CAAA,EAAA;AACA,YAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CACA,UADA,EAEA,8BAFA,EAGA,SAHA;;AAMA,YAAA,MAAA,CAAA,QAAA;AACA,WAZA,EAaA,KAbA,CAaA,UAAA,CAAA,EAAA;AACA,YAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CACA,QADA,EAEA,gCAFA,EAGA,OAHA;AAKA,WAnBA;;AAqBA,UAAA,MAAA,CAAA,eAAA,GAAA,KAAA;AACA;AACA,OAnCA;AAoCA,KA1FA;AA2FA,IAAA,aA3FA,2BA2FA;AACA;AACA,UAAA,KAAA,aAAA,CAAA,MAAA,IAAA,KAAA,MAAA,CAAA,MAAA,EAAA;AACA,aAAA,aAAA;AACA,OAFA,MAEA;AACA;AACA,aAAA,eAAA;AACA;AACA,KAnGA;AAoGA,IAAA,aApGA,2BAoGA;AAAA,iDACA,KAAA,MADA;AAAA;;AAAA;AACA,4DAAA;AAAA,cAAA,KAAA;AACA,UAAA,KAAA,CAAA,OAAA,GAAA,IAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAIA,KAxGA;AAyGA,IAAA,eAzGA,6BAyGA;AAAA,kDACA,KAAA,MADA;AAAA;;AAAA;AACA,+DAAA;AAAA,cAAA,KAAA;AACA,UAAA,KAAA,CAAA,OAAA,GAAA,KAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAIA,KA7GA;AA8GA,IAAA,eA9GA,6BA8GA,CAAA,CA9GA;AA+GA,IAAA,WA/GA,yBA+GA;AACA,WAAA,iBAAA,GAAA,IAAA;AACA,aAAA,KAAA;AACA,KAlHA;AAmHA,IAAA,WAnHA,yBAmHA;AACA,WAAA,iBAAA,GAAA,KAAA;AACA,aAAA,KAAA;AACA,KAtHA;AAuHA,IAAA,WAAA,EAAA,CAAA,CAAA,QAAA,CAAA,UAAA,KAAA,EAAA;AACA,WAAA,KAAA,GAAA,KAAA;AACA,WAAA,OAAA,CAAA,IAAA,CAAA;AAAA,QAAA,KAAA,EAAA;AAAA,UAAA,KAAA,EAAA,KAAA;AAAA;AAAA,OAAA;AACA,WAAA,QAAA;AACA,KAJA,EAIA,GAJA,CAvHA;AA4HA,IAAA,UAAA,EAAA,oBAAA,IAAA,EAAA;AACA,WAAA,IAAA,GAAA,IAAA;AACA,WAAA,OAAA,CAAA,IAAA,CAAA;AACA,QAAA,KAAA;AAAA,UAAA,IAAA,EAAA,IAAA;AAAA,UAAA,KAAA,EAAA,KAAA;AAAA,WAAA,KAAA,OAAA;AADA,OAAA;AAGA,WAAA,QAAA;AACA,KAlIA;AAmIA,IAAA,QAnIA,sBAmIA;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,cAAA,EAAA;AACA,QAAA,KAAA,EAAA,KAAA,KADA;AAEA,QAAA,OAAA,EAAA,KAAA,OAFA;AAGA,QAAA,IAAA,EAAA,KAAA;AAHA,OAAA;AAKA,KAzIA;AA0IA,IAAA,cA1IA,0BA0IA,OA1IA,EA0IA;AACA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,iBAAA;AACA,WAAA,OAAA,GAAA,OAAA;AACA,WAAA,QAAA;AACA,KA/IA;AAgJA,IAAA,IAhJA,gBAgJA,KAhJA,EAgJA;AACA,WAAA,OAAA,CAAA,IAAA,CAAA;AAAA,QAAA,IAAA,mBAAA,KAAA;AAAA,OAAA;AACA,KAlJA;AAmJA,IAAA,UAnJA,sBAmJA,EAnJA,EAmJA;AAAA;;AACA,UAAA,IAAA,GAAA,KAAA,MAAA,CAAA,IAAA,CAAA,UAAA,EAAA;AAAA,eAAA,EAAA,CAAA,EAAA,IAAA,EAAA;AAAA,OAAA,CAAA;AAEA,WAAA,KAAA,CACA,IADA,CACA;AACA,QAAA,KAAA,EAAA,eADA;AAEA,QAAA,IAAA,+CAFA;AAGA,QAAA,IAAA,EAAA,SAHA;AAIA,QAAA,gBAAA,EAAA,IAJA;AAKA,QAAA,kBAAA,EAAA,SALA;AAMA,QAAA,iBAAA,EAAA,MANA;AAOA,QAAA,iBAAA,EAAA;AAPA,OADA,EAUA,IAVA,CAUA,UAAA,MAAA,EAAA;AACA,YAAA,MAAA,CAAA,KAAA,EAAA;AACA,UAAA,MAAA,CAAA,MAAA,CACA,QADA,CACA,eADA,EACA,EADA,EAEA,IAFA,CAEA,UAAA,CAAA,EAAA;AACA,YAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CACA,UADA,EAEA,8BAFA,EAGA,SAHA;AAKA,WARA,EASA,KATA,CASA,UAAA,CAAA,EAAA;AACA,YAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CACA,QADA,EAEA,yBAFA,EAGA,OAHA;AAKA,WAfA;AAgBA;AACA,OA7BA;AA8BA,KApLA;AAqLA,IAAA,QArLA,oBAqLA,GArLA,EAqLA;AACA,aAAA,GAAA,CAAA,OAAA,CAAA,CAAA,EAAA,OAAA,CAAA,mBAAA,EAAA,KAAA,CAAA;AACA;AAvLA,GAzBA;AAmNA,EAAA,QAAA,EAAA;AACA,IAAA,aADA,2BACA;AACA,aAAA,KAAA,MAAA,CAAA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,MAAA,CAAA,UAAA,CAAA;AAAA,eAAA,CAAA,CAAA,OAAA,IAAA,IAAA;AAAA,OAAA,CAAA;AACA,KAHA;AAIA,IAAA,MAJA,oBAIA;AACA,aAAA,KAAA,MAAA,CAAA,KAAA,CAAA,MAAA,CAAA,KAAA;AACA,KANA;AAOA,IAAA,UAPA,wBAOA;AACA,aAAA,KAAA,MAAA,CAAA,KAAA,CAAA,MAAA,CAAA,UAAA;AACA;AATA,GAnNA;AA+NA,EAAA,KAAA,EAAA;AACA,IAAA,OAAA,EAAA;AACA,MAAA,OADA,qBACA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,cAAA;AACA,aAAA,QAAA;AACA,OAJA;AAKA,MAAA,IAAA,EAAA;AALA;AADA;AA/NA,CAAA","sourcesContent":["<template>\n    <div class=\"card shadow\" :class=\"type === 'dark' ? 'bg-default': ''\">\n        <change-orders-driver\n            ref=\"changeOrdersDriverDialog\"\n            :orders=\"checkedOrders\"\n            @success=\"bulkDriverSuccess()\"\n        />\n\n        <change-orders-warehouse\n            ref=\"changeOrdersWarehouseDialog\"\n            :orders=\"checkedOrders\"\n            @success=\"bulkWarehouseSuccess()\"\n        />\n\n        <div class=\"card-header border-0\" :class=\"type === 'dark' ? 'bg-transparent': ''\">\n            <div class=\"row\">\n                <div class=\"col-md-8\">\n                    <base-input\n                        placeholder=\"Filter...\"\n                        addon-right-icon=\"ni ni-zoom-split-in\"\n                        v-model=\"query\"\n                        @input=\"updateQuery\"\n                    ></base-input>\n                </div>\n                <div class=\"col-md-2 text-right\">\n                    <base-button type=\"primary\" block @click=\"$emit('add')\">Create Order</base-button>\n                </div>\n                <div class=\"col-md-2 text-right\">\n                    <base-button type=\"primary\" block @click=\"$emit('import')\">Import Invoices</base-button>\n                </div>\n            </div>\n            <div v-if=\"shouldShowFilters == false\">\n                <base-button size=\"sm\" @click=\"showFilters()\">show additional filters</base-button>\n            </div>\n            <template v-else>\n                <query-filter ref=\"queryFilter\" :model=\"filters\" @input=\"filtersChanged\" />\n                <base-button size=\"sm\" @click=\"hideFilters()\">hide additional filters</base-button>\n            </template>\n        </div>\n\n        <div\n            class=\"bulk-actions\"\n            style=\"overflow:hidden;\"\n            v-show=\"this.checkedOrders.length>0 || true\"\n        >\n            <div style=\"width:50%; float:left;\">\n                <span>Bulk Actions:</span>\n                <br />\n                <base-button\n                    size=\"sm\"\n                    :disabled=\"this.checkedOrders.length==0\"\n                    @click=\"bulkSetDriver\"\n                >Set Driver</base-button>\n                <base-button\n                    size=\"sm\"\n                    :disabled=\"this.checkedOrders.length==0\"\n                    @click=\"bulkSetWarehouse\"\n                >Set Warehouse</base-button>\n                <base-button\n                    size=\"sm\"\n                    :disabled=\"this.checkedOrders.length==0\"\n                    @click=\"bulkSetIncomplete\"\n                >Set Incomplete</base-button>\n                <base-button\n                    size=\"sm\"\n                    :disabled=\"this.checkedOrders.length==0\"\n                    type=\"warning\"\n                    @click=\"bulkDelete\"\n                >Delete</base-button>\n            </div>\n            <div style=\"width:50%; float:left;overflow:hidden;text-align:right;\">\n                <span>Time:</span>\n                <br />\n                <base-button size=\"sm\" @click=\"bulkSetDriver\">Today</base-button>\n                <base-button size=\"sm\" @click=\"bulkSetWarehouse\">Yesterday</base-button>\n                <base-button size=\"sm\" @click=\"bulkSetIncomplete\">All</base-button>\n            </div>\n        </div>\n\n        <div class=\"table-responsive\">\n            <!-- <div>\n                <select v-model=\"bulkAction\">\n                    <option value=\"none\" selected>Bulk Actions</option>\n                    <option value=\"set_driver\">Set Driver</option>\n                    <option value=\"set_customer\">Set Customer</option>\n                    <option value=\"set_incomplete\">Set Driver</option>\n                </select>\n                <base-button @click=\"applyBulkAction\" :disabled=\"this.checkedOrders.length==0\">Apply</base-button>\n            </div>-->\n            <base-table\n                class=\"table align-items-center table-flush\"\n                :class=\"type === 'dark' ? 'table-dark': ''\"\n                :thead-classes=\"type === 'dark' ? 'thead-dark': 'thead-light'\"\n                tbody-classes=\"list\"\n                :data=\"orders\"\n            >\n                <template slot=\"columns\">\n                    <th>\n                        <!-- <input type=\"checkbox\" @click=\"toggleChecked\" /> -->\n                        <base-checkbox :model=\"ordersMainCheck\" @click=\"toggleChecked\" />\n                    </th>\n                    <th>Invoice Number</th>\n                    <th>Customer</th>\n                    <th>Total</th>\n                    <th>Type</th>\n                    <th>Driver</th>\n                    <th>Tasks</th>\n                    <th>Warehouse Released</th>\n                    <th>Completed</th>\n                    <th>Actions</th>\n                </template>\n\n                <template slot-scope=\"{row}\">\n                    <td>\n                        <!-- <input type=\"checkbox\" v-model=\"row.checked\" /> -->\n                        <base-checkbox v-model=\"row.checked\" />\n                    </td>\n                    <td>{{row.invoice_id}}</td>\n                    <td>{{row.customer.name}}</td>\n                    <td>${{currency(row.invoice_total)}}</td>\n                    <td>{{row.type.toUpperCase()}}</td>\n\n                    <td v-if=\"row.driver\">{{row.driver.first_name}} {{ row.driver.last_name }}</td>\n                    <td v-else>---</td>\n\n                    <td v-if=\"row.type=='invoice'\">\n                        {{row.completedTasks}} / {{row.totalTasks}}\n                        <base-progress\n                            type=\"success\"\n                            :show-percentage=\"false\"\n                            class=\"pt-0\"\n                            :value=\"row.taskCompletion\"\n                        />\n                    </td>\n                    <td v-else></td>\n\n                    <td>\n                        <span v-if=\"row.warehouse_signed==1\" class=\"text-success\">RELEASED</span>\n                        <span v-else class=\"text-danger\">UNRELEASED</span>\n                    </td>\n\n                    <td>\n                        <span v-if=\"row.completed\" class=\"text-success\">COMPLETE</span>\n                        <span v-else class=\"text-danger\">INCOMPLETE</span>\n                    </td>\n\n                    <td>\n                        <base-button type=\"primary\" @click=\"view(row.id)\">Edit</base-button>\n                        <base-button type=\"danger\" @click=\"deleteItem(row.id)\">Delete</base-button>\n                    </td>\n                </template>\n            </base-table>\n        </div>\n\n        <div\n            class=\"card-footer d-flex justify-content-end\"\n            :class=\"type === 'dark' ? 'bg-transparent': ''\"\n        >\n            <base-pagination\n                v-if=\"pagination!=null\"\n                :perPage=\"pagination.pageSize\"\n                :value=\"pagination.page\"\n                :total=\"pagination.total\"\n                @input=\"changePage\"\n            ></base-pagination>\n        </div>\n    </div>\n</template>\n<script>\nimport _ from 'lodash'\nimport QueryFilter from './QueryFilter.vue'\nimport ChangeOrdersDriver from './ChangeOrdersDriver.vue'\nimport ChangeOrdersWarehouse from './ChangeOrdersWarehouse.vue'\n\nexport default {\n    name: 'fleet-table',\n    components: { QueryFilter, ChangeOrdersDriver, ChangeOrdersWarehouse },\n    props: {\n        type: {\n            type: String,\n        },\n        title: String,\n    },\n    data() {\n        return {\n            query: '',\n            page: 1,\n            shouldShowFilters: false,\n            filters: {},\n            bulkAction: 'none',\n            ordersMainCheck: false,\n        }\n    },\n\n    mounted() {\n        if (this.$route.query.query) this.query = this.$route.query.query\n        this.doSearch()\n    },\n\n    methods: {\n        bulkSetDriver() {\n            this.$refs.changeOrdersDriverDialog.show()\n        },\n        bulkDriverSuccess() {\n            this.doSearch()\n            this.ordersMainCheck = false\n        },\n        bulkSetWarehouse() {\n            this.$refs.changeOrdersWarehouseDialog.show()\n        },\n        bulkWarehouseSuccess() {\n            this.doSearch()\n            this.ordersMainCheck = false\n        },\n        bulkDriverError() {},\n        bulkSetIncomplete() {\n            this.$swal\n                .fire({\n                    title: 'Mark Orders as Complete?',\n                    text: `Are you sure you want to mark these orders as complete?`,\n                    type: 'warning',\n                    showCancelButton: true,\n                    confirmButtonColor: '#3085d6',\n                    cancelButtonColor: '#d33',\n                    confirmButtonText: 'Yes',\n                })\n                .then(result => {\n                    if (result.value) {\n                        this.$store\n                            .dispatch('orders/bulkSetIncomplete', {\n                                orders: this.checkedOrders,\n                            })\n                            .then(x => {\n                                this.$swal.fire(\n                                    'Success!',\n                                    'Selected orders were marked as complete',\n                                    'success'\n                                )\n\n                                this.ordersMainCheck = false\n                                this.doSearch()\n                            })\n                            .catch(x => {\n                                this.$swal.fire(\n                                    'Error!',\n                                    'There was an error marking orders as complete',\n                                    'error'\n                                )\n                            })\n                    }\n                })\n        },\n        bulkDelete() {\n            this.$swal\n                .fire({\n                    title: 'Delete Orders?',\n                    text: `Are you sure you want to delete these orders?`,\n                    type: 'warning',\n                    showCancelButton: true,\n                    confirmButtonColor: '#3085d6',\n                    cancelButtonColor: '#d33',\n                    confirmButtonText: 'Yes',\n                })\n                .then(result => {\n                    if (result.value) {\n                        this.$store\n                            .dispatch('orders/bulkDelete', {\n                                orders: this.checkedOrders,\n                            })\n                            .then(x => {\n                                this.$swal.fire(\n                                    'Success!',\n                                    'Selected orders were deleted',\n                                    'success'\n                                )\n\n                                this.doSearch()\n                            })\n                            .catch(x => {\n                                this.$swal.fire(\n                                    'Error!',\n                                    'Error deleting selected orders',\n                                    'error'\n                                )\n                            })\n\n                        this.ordersMainCheck = false\n                    }\n                })\n        },\n        toggleChecked() {\n            // if there's a checked item then check the rest\n            if (this.checkedOrders.length != this.orders.length) {\n                this.checkAllItems()\n            } else {\n                // if all are checked, then uncheck them\n                this.unCheckAllItems()\n            }\n        },\n        checkAllItems() {\n            for (let order of this.orders) {\n                order.checked = true\n            }\n        },\n        unCheckAllItems() {\n            for (let order of this.orders) {\n                order.checked = false\n            }\n        },\n        applyBulkAction() {},\n        showFilters() {\n            this.shouldShowFilters = true\n            return false\n        },\n        hideFilters() {\n            this.shouldShowFilters = false\n            return false\n        },\n        updateQuery: _.debounce(function(query) {\n            this.query = query\n            this.$router.push({ query: { query: this.query } })\n            this.doSearch()\n        }, 200),\n        changePage: function(page) {\n            this.page = page\n            this.$router.push({\n                query: { page: page, query: this.query, ...this.filters },\n            })\n            this.doSearch()\n        },\n        doSearch() {\n            this.$store.dispatch('orders/fetch', {\n                query: this.query,\n                filters: this.filters,\n                page: this.page,\n            })\n        },\n        filtersChanged(filters) {\n            // requery\n            console.log('filters changed')\n            this.filters = filters\n            this.doSearch()\n        },\n        view(index) {\n            this.$router.push({ path: `orders/${index}` })\n        },\n        deleteItem(id) {\n            let item = this.orders.find(el => el.id == id)\n\n            this.$swal\n                .fire({\n                    title: 'Delete Order?',\n                    text: `Are you sure you want to delete this order?`,\n                    type: 'warning',\n                    showCancelButton: true,\n                    confirmButtonColor: '#3085d6',\n                    cancelButtonColor: '#d33',\n                    confirmButtonText: 'Yes, delete it!',\n                })\n                .then(result => {\n                    if (result.value) {\n                        this.$store\n                            .dispatch('orders/delete', id)\n                            .then(x => {\n                                this.$swal.fire(\n                                    'Deleted!',\n                                    'Your order has been deleted.',\n                                    'success'\n                                )\n                            })\n                            .catch(x => {\n                                this.$swal.fire(\n                                    'Error!',\n                                    'Unable to delete order!',\n                                    'error'\n                                )\n                            })\n                    }\n                })\n        },\n        currency(num) {\n            return num.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n        },\n    },\n\n    computed: {\n        checkedOrders() {\n            return this.$store.state.orders.items.filter(x => x.checked == true)\n        },\n        orders() {\n            return this.$store.state.orders.items\n        },\n        pagination() {\n            return this.$store.state.orders.pagination\n        },\n    },\n\n    watch: {\n        filters: {\n            handler() {\n                console.log('doing search')\n                this.doSearch()\n            },\n            deep: true,\n        },\n    },\n}\n</script>\n<style>\n.bulk-actions {\n    vertical-align: middle;\n    padding: 0.7rem 1.5rem;\n    background: #f6f9fc;\n    border-top: solid 1px #e9ecef;\n}\n\n.bulk-actions span {\n    margin-right: 1rem;\n}\n</style>\n"],"sourceRoot":"src/views/Orders"}]}