{"remainingRequest":"/home/jlawrence/10x/apps/OmsVue/node_modules/thread-loader/dist/cjs.js!/home/jlawrence/10x/apps/OmsVue/node_modules/babel-loader/lib/index.js!/home/jlawrence/10x/apps/OmsVue/node_modules/eslint-loader/index.js??ref--13-0!/home/jlawrence/10x/apps/OmsVue/src/refresh-token.js","dependencies":[{"path":"/home/jlawrence/10x/apps/OmsVue/src/refresh-token.js","mtime":1585672524041},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import store from \"./store\";\nimport router from \"./router\"; // https://blog.liplex.de/axios-interceptor-to-refresh-jwt-token-after-expiration/\n\nexport function addRefreshTokenFlow(axios) {\n  axios.interceptors.response.use(function (res) {\n    return res;\n  }, function (error) {\n    if (error.response.status !== 401) {\n      return new Promise(function (resolve, reject) {\n        reject(error);\n      });\n    } // if this is a failed attempt to refresh token\n    // logout\n\n\n    if (error.config.url == '/auth/refresh-token') {\n      // clear refresh token and return to home page\n      store.commit('unauthenticate');\n      router.push('/login');\n      return new Promise(function (resolve, reject) {\n        reject(error);\n      });\n    } // actually refresh token\n\n\n    return refreshToken(axios).then(function (token) {\n      // New request with new token\n      // console.log(token)\n      // console.log(error.config)\n      var config = error.config;\n      config.headers['Authorization'] = \"Bearer \".concat(token);\n      return new Promise(function (resolve, reject) {\n        axios.request(config).then(function (response) {\n          resolve(response);\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    }).catch(function (error) {\n      return new Promise(function (resolve, reject) {\n        reject(error);\n      });\n    });\n  });\n} // actually fetch the auth token\n\nexport function refreshToken(axios) {\n  return new Promise(function (resolve, reject) {\n    axios.get('/auth/refresh-token').then(function (res) {\n      var token = res.data.success.data.token; //console.log(token)\n\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + token;\n      store.commit('authenticate', token);\n      localStorage.setItem('accessToken', token); // console.log(token)\n\n      resolve(token);\n    }).catch(function (error) {\n      // if error is 500 then logout\n      if (error.response && error.response.status == 500) {\n        store.commit('unauthenticate');\n        localStorage.removeItem('accessToken');\n      }\n\n      reject(error);\n    });\n  });\n}",{"version":3,"sources":["/home/jlawrence/10x/apps/OmsVue/src/refresh-token.js"],"names":["store","router","addRefreshTokenFlow","axios","interceptors","response","use","res","error","status","Promise","resolve","reject","config","url","commit","push","refreshToken","then","token","headers","request","catch","get","data","success","defaults","common","localStorage","setItem","removeItem"],"mappings":"AAAA,OAAOA,KAAP;AACA,OAAOC,MAAP,iB,CAEA;;AACA,OAAO,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AACvCA,EAAAA,KAAK,CAACC,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CACI,UAAAC,GAAG,EAAI;AACH,WAAOA,GAAP;AACH,GAHL,EAII,UAAAC,KAAK,EAAI;AACL,QAAIA,KAAK,CAACH,QAAN,CAAeI,MAAf,KAA0B,GAA9B,EAAmC;AAC/B,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCA,QAAAA,MAAM,CAACJ,KAAD,CAAN;AACH,OAFM,CAAP;AAGH,KALI,CAOL;AACA;;;AACA,QAAIA,KAAK,CAACK,MAAN,CAAaC,GAAb,IAAoB,qBAAxB,EAA+C;AAC3C;AACAd,MAAAA,KAAK,CAACe,MAAN,CAAa,gBAAb;AACAd,MAAAA,MAAM,CAACe,IAAP,CAAY,QAAZ;AAEA,aAAO,IAAIN,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCA,QAAAA,MAAM,CAACJ,KAAD,CAAN;AACH,OAFM,CAAP;AAGH,KAjBI,CAmBL;;;AACA,WAAOS,YAAY,CAACd,KAAD,CAAZ,CACFe,IADE,CACG,UAAAC,KAAK,EAAI;AACX;AACA;AACA;AACA,UAAMN,MAAM,GAAGL,KAAK,CAACK,MAArB;AACAA,MAAAA,MAAM,CAACO,OAAP,CAAe,eAAf,qBAA4CD,KAA5C;AAEA,aAAO,IAAIT,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCT,QAAAA,KAAK,CACAkB,OADL,CACaR,MADb,EAEKK,IAFL,CAEU,UAAAb,QAAQ,EAAI;AACdM,UAAAA,OAAO,CAACN,QAAD,CAAP;AACH,SAJL,EAKKiB,KALL,CAKW,UAAAd,KAAK,EAAI;AACZI,UAAAA,MAAM,CAACJ,KAAD,CAAN;AACH,SAPL;AAQH,OATM,CAAP;AAUH,KAlBE,EAmBFc,KAnBE,CAmBI,UAAAd,KAAK,EAAI;AACZ,aAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCA,QAAAA,MAAM,CAACJ,KAAD,CAAN;AACH,OAFM,CAAP;AAGH,KAvBE,CAAP;AAwBH,GAhDL;AAkDH,C,CAED;;AACA,OAAO,SAASS,YAAT,CAAsBd,KAAtB,EAA6B;AAChC,SAAO,IAAIO,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCT,IAAAA,KAAK,CACAoB,GADL,CACS,qBADT,EAEKL,IAFL,CAEU,UAAAX,GAAG,EAAI;AACT,UAAIY,KAAK,GAAGZ,GAAG,CAACiB,IAAJ,CAASC,OAAT,CAAiBD,IAAjB,CAAsBL,KAAlC,CADS,CAET;;AACAhB,MAAAA,KAAK,CAACuB,QAAN,CAAeN,OAAf,CAAuBO,MAAvB,CAA8B,eAA9B,IACI,YAAYR,KADhB;AAGAnB,MAAAA,KAAK,CAACe,MAAN,CAAa,cAAb,EAA6BI,KAA7B;AACAS,MAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCV,KAApC,EAPS,CAQT;;AACAR,MAAAA,OAAO,CAACQ,KAAD,CAAP;AACH,KAZL,EAaKG,KAbL,CAaW,UAAAd,KAAK,EAAI;AACZ;AACA,UAAIA,KAAK,CAACH,QAAN,IAAkBG,KAAK,CAACH,QAAN,CAAeI,MAAf,IAAyB,GAA/C,EAAoD;AAChDT,QAAAA,KAAK,CAACe,MAAN,CAAa,gBAAb;AACAa,QAAAA,YAAY,CAACE,UAAb,CAAwB,aAAxB;AACH;;AAEDlB,MAAAA,MAAM,CAACJ,KAAD,CAAN;AACH,KArBL;AAsBH,GAvBM,CAAP;AAwBH","sourcesContent":["import store from './store'\nimport router from './router'\n\n// https://blog.liplex.de/axios-interceptor-to-refresh-jwt-token-after-expiration/\nexport function addRefreshTokenFlow(axios) {\n    axios.interceptors.response.use(\n        res => {\n            return res\n        },\n        error => {\n            if (error.response.status !== 401) {\n                return new Promise((resolve, reject) => {\n                    reject(error)\n                })\n            }\n\n            // if this is a failed attempt to refresh token\n            // logout\n            if (error.config.url == '/auth/refresh-token') {\n                // clear refresh token and return to home page\n                store.commit('unauthenticate')\n                router.push('/login')\n\n                return new Promise((resolve, reject) => {\n                    reject(error)\n                })\n            }\n\n            // actually refresh token\n            return refreshToken(axios)\n                .then(token => {\n                    // New request with new token\n                    // console.log(token)\n                    // console.log(error.config)\n                    const config = error.config\n                    config.headers['Authorization'] = `Bearer ${token}`\n\n                    return new Promise((resolve, reject) => {\n                        axios\n                            .request(config)\n                            .then(response => {\n                                resolve(response)\n                            })\n                            .catch(error => {\n                                reject(error)\n                            })\n                    })\n                })\n                .catch(error => {\n                    return new Promise((resolve, reject) => {\n                        reject(error)\n                    })\n                })\n        }\n    )\n}\n\n// actually fetch the auth token\nexport function refreshToken(axios) {\n    return new Promise((resolve, reject) => {\n        axios\n            .get('/auth/refresh-token')\n            .then(res => {\n                let token = res.data.success.data.token\n                //console.log(token)\n                axios.defaults.headers.common['Authorization'] =\n                    'Bearer ' + token\n\n                store.commit('authenticate', token)\n                localStorage.setItem('accessToken', token)\n                // console.log(token)\n                resolve(token)\n            })\n            .catch(error => {\n                // if error is 500 then logout\n                if (error.response && error.response.status == 500) {\n                    store.commit('unauthenticate')\n                    localStorage.removeItem('accessToken')\n                }\n\n                reject(error)\n            })\n    })\n}\n"]}]}