{"remainingRequest":"/home/jlawrence/10x/apps/OmsVue/node_modules/thread-loader/dist/cjs.js!/home/jlawrence/10x/apps/OmsVue/node_modules/babel-loader/lib/index.js!/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jlawrence/10x/apps/OmsVue/src/views/Dashboard/DashboardMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/jlawrence/10x/apps/OmsVue/src/views/Dashboard/DashboardMap.vue","mtime":1585672524041},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { LMap, LTileLayer, LMarker, LPopup } from 'vue2-leaflet';\nimport VueBootstrapTypeahead from 'vue-bootstrap-typeahead';\nimport _ from 'lodash';\n\nvar _require = require('@owsas/nominatim-js'),\n    NominatimJS = _require.NominatimJS;\n\nimport api from '@/api/user';\nexport default {\n  name: 'dashboard-map',\n  components: {\n    LMap: LMap,\n    LTileLayer: LTileLayer,\n    LMarker: LMarker,\n    LPopup: LPopup,\n    VueBootstrapTypeahead: VueBootstrapTypeahead\n  },\n  props: {\n    value: {\n      name: 'value',\n      type: Object,\n      default: function _default() {\n        return L.latLng(18, -77.2);\n      }\n    }\n  },\n  data: function data() {\n    return {\n      model: {\n        id: 0,\n        name: '',\n        location: '',\n        lat: '',\n        lon: ''\n      },\n      center: new L.latLng(18, -77.4),\n      updating: false,\n      zoom: 8,\n      url: 'http://{s}.tile.osm.org/{z}/{x}/{y}.png',\n      attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n      popupData: \"Hello I'm a Popup\",\n      query: '',\n      addresses: [],\n      drivers: []\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    api.fetchDriverLocations().then(function (res) {\n      var drivers = res.data.success.data; // fetch locations of drivers\n\n      var lat = 0;\n      var lon = 0;\n      var count = 0; // average locations of workers and set center\n\n      drivers = drivers.map(function (d) {\n        if (d.lat == null || d.long == null) return null; //console.log(d)\n\n        lat += parseFloat(d.lat);\n        lon += parseFloat(d.long);\n        count++; // console.log('center: ' + lat + ' ' + lon)\n        // console.log('center: ' + d.lat + ' ' + d.long)\n\n        d.latlon = new L.latLng(parseFloat(d.lat), parseFloat(d.long));\n        return d;\n      });\n      drivers = drivers.filter(function (d) {\n        return d != null;\n      }); // console.log(drivers)\n\n      if (count != 0) {\n        lat = lat / count;\n        lon = lon / count;\n      } // console.log('center: ' + this.center)\n      // console.log('center: ' + lat + ' ' + lon)\n      // console.log('count: ' + count)\n      //this.center = new L.latLng(lat, lon)\n\n\n      _this.drivers = drivers;\n    });\n  },\n  methods: {\n    setMarkerPos: function setMarkerPos(pos) {\n      //console.log('new pos', this.$refs.marker.mapObject.getLatLng())\n      this.$emit('input', this.$refs.marker.mapObject.getLatLng());\n    },\n    itemSelected: function itemSelected(item) {\n      this.$emit('input', L.latLng(item.lat, item.lon));\n    }\n  },\n  watch: {}\n};",{"version":3,"sources":["DashboardMap.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class>\n        <l-map :zoom=\"zoom\" :center=\"center\" ref=\"map\" style=\"height:418px\">\n            <l-tile-layer :url=\"url\" :attribution=\"attribution\"></l-tile-layer>\n            <l-marker\n                v-for=\"(driver, index) in drivers\"\n                :key=\"index\"\n                :lat-lng=\"drivers[index].latlon\"\n            >\n                <l-popup :autoClose=\"false\">{{driver.first_name}} {{driver.last_name}}</l-popup>\n            </l-marker>\n        </l-map>\n    </div>\n</template>\n\n<script>\nimport { LMap, LTileLayer, LMarker, LPopup } from 'vue2-leaflet'\nimport VueBootstrapTypeahead from 'vue-bootstrap-typeahead'\nimport _ from 'lodash'\nconst { NominatimJS } = require('@owsas/nominatim-js')\nimport api from '@/api/user'\n\nexport default {\n    name: 'dashboard-map',\n    components: { LMap, LTileLayer, LMarker, LPopup, VueBootstrapTypeahead },\n    props: {\n        value: {\n            name: 'value',\n            type: Object,\n            default: () => L.latLng(18, -77.2),\n        },\n    },\n    data() {\n        return {\n            model: {\n                id: 0,\n                name: '',\n                location: '',\n                lat: '',\n                lon: '',\n            },\n            center: new L.latLng(18, -77.4),\n            updating: false,\n            zoom: 8,\n            url: 'http://{s}.tile.osm.org/{z}/{x}/{y}.png',\n            attribution:\n                '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n            popupData: \"Hello I'm a Popup\",\n            query: '',\n            addresses: [],\n            drivers: [],\n        }\n    },\n    mounted() {\n        api.fetchDriverLocations().then(res => {\n            let drivers = res.data.success.data\n\n            // fetch locations of drivers\n            let lat = 0\n            let lon = 0\n            let count = 0\n\n            // average locations of workers and set center\n            drivers = drivers.map(d => {\n                if (d.lat == null || d.long == null) return null\n\n                //console.log(d)\n                lat += parseFloat(d.lat)\n                lon += parseFloat(d.long)\n                count++\n                // console.log('center: ' + lat + ' ' + lon)\n                // console.log('center: ' + d.lat + ' ' + d.long)\n\n                d.latlon = new L.latLng(parseFloat(d.lat), parseFloat(d.long))\n                return d\n            })\n\n            drivers = drivers.filter(d => {\n                return d != null\n            })\n\n            // console.log(drivers)\n\n            if (count != 0) {\n                lat = lat / count\n                lon = lon / count\n            }\n\n            // console.log('center: ' + this.center)\n            // console.log('center: ' + lat + ' ' + lon)\n            // console.log('count: ' + count)\n            //this.center = new L.latLng(lat, lon)\n            this.drivers = drivers\n        })\n    },\n    methods: {\n        setMarkerPos(pos) {\n            //console.log('new pos', this.$refs.marker.mapObject.getLatLng())\n            this.$emit('input', this.$refs.marker.mapObject.getLatLng())\n        },\n        itemSelected(item) {\n            this.$emit('input', L.latLng(item.lat, item.lon))\n        },\n    },\n    watch: {},\n}\n</script>\n\n<style>\n.autocomplete input {\n    border-radius: 0;\n}\n</style>"],"sourceRoot":"src/views/Dashboard"}]}