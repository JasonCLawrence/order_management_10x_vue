{"remainingRequest":"/home/jlawrence/10x/apps/OmsVue/node_modules/babel-loader/lib/index.js!/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jlawrence/10x/apps/OmsVue/src/views/Dashboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/jlawrence/10x/apps/OmsVue/src/views/Dashboard.vue","mtime":1585672524041},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// Charts\nimport * as chartConfigs from '@/components/Charts/config';\nimport LineChart from '@/components/Charts/LineChart';\nimport BarChart from '@/components/Charts/BarChart';\nimport api from '@/api/dashboard'; // Tables\n\nimport SocialTrafficTable from \"./Dashboard/SocialTrafficTable\";\nimport RecentOrdersTable from \"./Dashboard/RecentOrdersTable\"; // Map\n\nimport DashboardMap from \"./Dashboard/DashboardMap\";\nexport default {\n  components: {\n    LineChart: LineChart,\n    BarChart: BarChart,\n    RecentOrdersTable: RecentOrdersTable,\n    SocialTrafficTable: SocialTrafficTable,\n    DashboardMap: DashboardMap\n  },\n  data: function data() {\n    return {\n      recentOrders: [],\n      timeSeries: [],\n      users: '0',\n      orders: '0',\n      warehouses: '0',\n      customers: '0',\n      fleet: '0',\n      chartData: {\n        labels: ['Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n        datasets: [{\n          label: 'Orders' // data: [25, 20, 30, 22, 17, 29],\n\n        }]\n      },\n      // map data\n      zoom: 13,\n      url: 'http://{s}.tile.osm.org/{z}/{x}/{y}.png',\n      attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n      popupData: \"Hello I'm a Popup\"\n    };\n  },\n  methods: {\n    setChartData: function setChartData(timeSeries) {\n      //\n      var shortMonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n      var labels = [];\n      var dataSet = [];\n\n      var _iterator = _createForOfIteratorHelper(timeSeries),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var entry = _step.value;\n          labels.push(shortMonths[entry.month - 1]);\n          dataSet.push(entry.count);\n        } // add extra empty months to fill the chart\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var lastEntryMonth = 0;\n      if (timeSeries.length > 0) lastEntryMonth = timeSeries[timeSeries.length - 1].month;\n\n      while (dataSet.length < 8) {\n        lastEntryMonth = (lastEntryMonth + 1) % 12;\n        labels.push(shortMonths[lastEntryMonth]);\n        dataSet.push(0);\n      } // set data\n\n\n      this.chartData.labels = labels;\n      this.chartData.datasets[0].data = dataSet;\n      this.$refs.barChart.renderChart(this.chartData, null);\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    api.fetch().then(function (res) {\n      var data = res.data.success.data; // basics\n\n      _this.users = data.users.toString();\n      _this.fleet = data.fleet.toString();\n      _this.customers = data.customers.toString();\n      _this.warehouses = data.warehouses.toString(); // chart\n\n      _this.timeSeries = data.time_series_orders;\n\n      _this.setChartData(_this.timeSeries); // calculate\n      // orders\n\n\n      var orders = data.most_recent_orders;\n      orders = orders.map(function (o) {\n        // calculate task completion\n        o.totalTasks = o.checklist.length;\n        o.completedTasks = o.checklist.filter(function (x) {\n          return x.checked == 1;\n        }).length;\n        if (o.totalTasks != 0) o.taskCompletion = o.completedTasks / o.totalTasks * 100;else o.taskCompletion = 0;\n        return o;\n      });\n      _this.recentOrders = orders;\n    });\n  }\n};",{"version":3,"sources":["Dashboard.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class=\"mt--1 pb-4\">\n        <base-header class=\"pb-6 pb-8 pt-5 pt-md-8\">\n            <!-- Card stats -->\n            <div class=\"row\">\n                <div class=\"col-xl-3 col-lg-6\">\n                    <router-link to=\"/users\">\n                        <stats-card\n                            title=\"Users\"\n                            type=\"gradient-red\"\n                            :sub-title=\"users\"\n                            icon=\"ni ni-circle-08\"\n                            class=\"mb-4 mb-xl-0\"\n                        ></stats-card>\n                    </router-link>\n                </div>\n                <div class=\"col-xl-3 col-lg-6\">\n                    <router-link to=\"/fleet\">\n                        <stats-card\n                            title=\"Fleet\"\n                            type=\"gradient-orange\"\n                            :sub-title=\"fleet\"\n                            icon=\"ni ni-delivery-fast\"\n                            class=\"mb-4 mb-xl-0\"\n                        ></stats-card>\n                    </router-link>\n                </div>\n                <div class=\"col-xl-3 col-lg-6\">\n                    <router-link to=\"/customers\">\n                        <stats-card\n                            title=\"Customers\"\n                            type=\"gradient-green\"\n                            :sub-title=\"customers\"\n                            icon=\"ni ni-shop\"\n                            class=\"mb-4 mb-xl-0\"\n                        ></stats-card>\n                    </router-link>\n                </div>\n                <div class=\"col-xl-3 col-lg-6\">\n                    <router-link to=\"/warehouses\">\n                        <stats-card\n                            title=\"Warehouses\"\n                            type=\"gradient-info\"\n                            :sub-title=\"warehouses\"\n                            icon=\"ni ni-shop\"\n                            class=\"mb-4 mb-xl-0\"\n                        ></stats-card>\n                    </router-link>\n                </div>\n            </div>\n        </base-header>\n\n        <!--Charts-->\n        <div class=\"container-fluid mt--7\">\n            <div class=\"row\">\n                <div class=\"col-md-7 mb-5 mb-xl-0\">\n                    <card type=\"default\" header-classes=\"bg-transparent\">\n                        <div slot=\"header\" class=\"row align-items-center\">\n                            <div class=\"col\">\n                                <h6 class=\"text-uppercase text-muted ls-1 mb-1\">Performance</h6>\n                                <h5 class=\"h3 mb-0\">Total Orders</h5>\n                            </div>\n                        </div>\n\n                        <bar-chart :height=\"350\" ref=\"barChart\" :chart-data=\"chartData\"></bar-chart>\n                    </card>\n                </div>\n\n                <div class=\"col-md-5 mb-5 mb-xl-0\">\n                    <div class=\"card\">\n                        <div class=\"card-header border-0\">\n                            <div class=\"row align-items-center\">\n                                <div class=\"col\">\n                                    <h3 class=\"mb-0\">Drivers Last Locations</h3>\n                                </div>\n                            </div>\n                        </div>\n                        <dashboard-map />\n                    </div>\n                </div>\n            </div>\n\n            <!-- Driver Map -->\n            <!-- <div class=\"row\">\n                <div class=\"col-xl-12 mb-5 mb-xl-0 mt-5\">\n                    <div class=\"card\">\n                        <div class=\"card-header border-0\">\n                            <div class=\"row align-items-center\">\n                                <div class=\"col\">\n                                    <h3 class=\"mb-0\">Drivers</h3>\n                                </div>\n                            </div>\n                        </div>\n                        <dashboard-map />\n                    </div>\n                </div>\n            </div>-->\n\n            <!--Tables-->\n            <div class=\"row mt-5\">\n                <div class=\"col-xl-12 mb-5 mb-xl-0\">\n                    <recent-orders-table :orders=\"recentOrders\" />\n                </div>\n            </div>\n            <!--End tables-->\n        </div>\n    </div>\n</template>\n<script>\n// Charts\nimport * as chartConfigs from '@/components/Charts/config'\nimport LineChart from '@/components/Charts/LineChart'\nimport BarChart from '@/components/Charts/BarChart'\nimport api from '@/api/dashboard'\n\n// Tables\nimport SocialTrafficTable from './Dashboard/SocialTrafficTable'\nimport RecentOrdersTable from './Dashboard/RecentOrdersTable'\n\n// Map\nimport DashboardMap from './Dashboard/DashboardMap'\n\nexport default {\n    components: {\n        LineChart,\n        BarChart,\n        RecentOrdersTable,\n        SocialTrafficTable,\n        DashboardMap,\n    },\n    data() {\n        return {\n            recentOrders: [],\n            timeSeries: [],\n            users: '0',\n            orders: '0',\n            warehouses: '0',\n            customers: '0',\n            fleet: '0',\n            chartData: {\n                labels: ['Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n                datasets: [\n                    {\n                        label: 'Orders',\n                        // data: [25, 20, 30, 22, 17, 29],\n                    },\n                ],\n            },\n\n            // map data\n            zoom: 13,\n            url: 'http://{s}.tile.osm.org/{z}/{x}/{y}.png',\n            attribution:\n                '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n            popupData: \"Hello I'm a Popup\",\n        }\n    },\n    methods: {\n        setChartData(timeSeries) {\n            //\n            let shortMonths = [\n                'Jan',\n                'Feb',\n                'Mar',\n                'Apr',\n                'May',\n                'Jun',\n                'Jul',\n                'Aug',\n                'Sep',\n                'Oct',\n                'Nov',\n                'Dec',\n            ]\n            let labels = []\n            let dataSet = []\n            for (let entry of timeSeries) {\n                labels.push(shortMonths[entry.month - 1])\n                dataSet.push(entry.count)\n            }\n\n            // add extra empty months to fill the chart\n            let lastEntryMonth = 0\n            if (timeSeries.length > 0)\n                lastEntryMonth = timeSeries[timeSeries.length - 1].month\n\n            while (dataSet.length < 8) {\n                lastEntryMonth = (lastEntryMonth + 1) % 12\n                labels.push(shortMonths[lastEntryMonth])\n                dataSet.push(0)\n            }\n\n            // set data\n            this.chartData.labels = labels\n            this.chartData.datasets[0].data = dataSet\n\n            this.$refs.barChart.renderChart(this.chartData, null)\n        },\n    },\n    mounted() {\n        api.fetch().then(res => {\n            const data = res.data.success.data\n\n            // basics\n            this.users = data.users.toString()\n            this.fleet = data.fleet.toString()\n            this.customers = data.customers.toString()\n            this.warehouses = data.warehouses.toString()\n\n            // chart\n            this.timeSeries = data.time_series_orders\n            this.setChartData(this.timeSeries)\n\n            // calculate\n\n            // orders\n            let orders = data.most_recent_orders\n            orders = orders.map(o => {\n                // calculate task completion\n                o.totalTasks = o.checklist.length\n                o.completedTasks = o.checklist.filter(x => {\n                    return x.checked == 1\n                }).length\n\n                if (o.totalTasks != 0)\n                    o.taskCompletion = (o.completedTasks / o.totalTasks) * 100\n                else o.taskCompletion = 0\n\n                return o\n            })\n\n            this.recentOrders = orders\n        })\n    },\n}\n</script>\n<style></style>\n"],"sourceRoot":"src/views"}]}