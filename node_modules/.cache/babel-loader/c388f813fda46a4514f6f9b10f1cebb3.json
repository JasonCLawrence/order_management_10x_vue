{"remainingRequest":"/home/jlawrence/10x/apps/OmsVue/node_modules/thread-loader/dist/cjs.js!/home/jlawrence/10x/apps/OmsVue/node_modules/babel-loader/lib/index.js!/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jlawrence/10x/apps/OmsVue/src/components/BaseNav.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/jlawrence/10x/apps/OmsVue/src/components/BaseNav.vue","mtime":1585672524041},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.number.constructor\";\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport NavbarToggleButton from \"./NavbarToggleButton\";\nexport default {\n  name: 'base-nav',\n  components: {\n    NavbarToggleButton: NavbarToggleButton\n  },\n  props: {\n    type: {\n      type: String,\n      default: '',\n      description: 'Navbar type (e.g default, primary etc)'\n    },\n    title: {\n      type: String,\n      default: '',\n      description: 'Title of navbar'\n    },\n    contentId: {\n      type: [String, Number],\n      default: Math.random().toString(),\n      description: \"Explicit id for the menu. By default it's a generated random number\"\n    },\n    containerClasses: {\n      type: [String, Object, Array],\n      default: 'container-fluid'\n    },\n    transparent: {\n      type: Boolean,\n      default: false,\n      description: 'Whether navbar is transparent'\n    },\n    expand: {\n      type: Boolean,\n      default: false,\n      description: 'Whether navbar should contain `navbar-expand-lg` class'\n    },\n    showToggleButton: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data: function data() {\n    return {\n      toggled: false,\n      paths: []\n    };\n  },\n  methods: {\n    closeMenu: function closeMenu() {\n      this.toggled = false;\n    },\n    calcPath: function calcPath() {\n      // generate path\n      var pathSplit = this.$route.path.split('/');\n      pathSplit.splice(0, 1); // remove\n\n      var paths = [];\n      var runningPath = '';\n\n      var _iterator = _createForOfIteratorHelper(pathSplit),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var segment = _step.value;\n          runningPath += '/' + segment;\n          paths.push({\n            path: runningPath,\n            text: segment\n          });\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this.paths = paths;\n      console.log(paths);\n    }\n  },\n  mounted: function mounted() {\n    this.calcPath();\n  },\n  watch: {\n    $route: function $route(to, from) {\n      console.log('new path');\n      this.calcPath();\n    }\n  }\n};",{"version":3,"sources":["BaseNav.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA,OAAA,kBAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,UADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,kBAAA,EAAA;AADA,GAFA;AAKA,EAAA,KAAA,EAAA;AACA,IAAA,IAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA,EAFA;AAGA,MAAA,WAAA,EAAA;AAHA,KADA;AAMA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA,EAFA;AAGA,MAAA,WAAA,EAAA;AAHA,KANA;AAWA,IAAA,SAAA,EAAA;AACA,MAAA,IAAA,EAAA,CAAA,MAAA,EAAA,MAAA,CADA;AAEA,MAAA,OAAA,EAAA,IAAA,CAAA,MAAA,GAAA,QAAA,EAFA;AAGA,MAAA,WAAA,EACA;AAJA,KAXA;AAiBA,IAAA,gBAAA,EAAA;AACA,MAAA,IAAA,EAAA,CAAA,MAAA,EAAA,MAAA,EAAA,KAAA,CADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAjBA;AAqBA,IAAA,WAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA,KAFA;AAGA,MAAA,WAAA,EAAA;AAHA,KArBA;AA0BA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA,KAFA;AAGA,MAAA,WAAA,EACA;AAJA,KA1BA;AAgCA,IAAA,gBAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA;AAhCA,GALA;AA0CA,EAAA,IA1CA,kBA0CA;AACA,WAAA;AACA,MAAA,OAAA,EAAA,KADA;AAEA,MAAA,KAAA,EAAA;AAFA,KAAA;AAIA,GA/CA;AAgDA,EAAA,OAAA,EAAA;AACA,IAAA,SADA,uBACA;AACA,WAAA,OAAA,GAAA,KAAA;AACA,KAHA;AAIA,IAAA,QAJA,sBAIA;AACA;AACA,UAAA,SAAA,GAAA,KAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,GAAA,CAAA;AACA,MAAA,SAAA,CAAA,MAAA,CAAA,CAAA,EAAA,CAAA,EAHA,CAGA;;AAEA,UAAA,KAAA,GAAA,EAAA;AACA,UAAA,WAAA,GAAA,EAAA;;AANA,iDAOA,SAPA;AAAA;;AAAA;AAOA,4DAAA;AAAA,cAAA,OAAA;AACA,UAAA,WAAA,IAAA,MAAA,OAAA;AAEA,UAAA,KAAA,CAAA,IAAA,CAAA;AACA,YAAA,IAAA,EAAA,WADA;AAEA,YAAA,IAAA,EAAA;AAFA,WAAA;AAIA;AAdA;AAAA;AAAA;AAAA;AAAA;;AAgBA,WAAA,KAAA,GAAA,KAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,KAAA;AACA;AAtBA,GAhDA;AAwEA,EAAA,OAxEA,qBAwEA;AACA,SAAA,QAAA;AACA,GA1EA;AA2EA,EAAA,KAAA,EAAA;AACA,IAAA,MADA,kBACA,EADA,EACA,IADA,EACA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,UAAA;AACA,WAAA,QAAA;AACA;AAJA;AA3EA,CAAA","sourcesContent":["<template>\n    <nav\n        class=\"navbar\"\n        :class=\"[\n            {'navbar-expand-md': expand},\n            {'navbar-transparent': transparent},\n            {[`bg-${type}`]: type}\n         ]\"\n    >\n        <div :class=\"containerClasses\">\n            <slot name=\"brand\">\n                <!-- <router-link\n                    :to=\"$route.path\"\n                    class=\"h4 mb-0 text-white text-uppercase d-none d-lg-inline-block\"\n                >{{$route.name}}</router-link>-->\n                <template v-for=\"(path, key) in paths\">\n                    <span\n                        class=\"h4 mb-0 text-lg text-white text-uppercase d-none d-lg-inline-block\"\n                        :key=\"key + 'span'\"\n                        v-if=\"key != 0\"\n                    >&nbsp;/&nbsp;</span>\n                    <router-link\n                        :to=\"path.path\"\n                        class=\"h4 mb-0 text-lg text-white text-uppercase d-none d-lg-inline-block\"\n                        :key=\"key\"\n                    >{{path.text}}</router-link>\n                </template>\n            </slot>\n            <navbar-toggle-button\n                v-if=\"showToggleButton\"\n                :toggled=\"toggled\"\n                :target=\"contentId\"\n                @click.native.stop=\"toggled = !toggled\"\n            >\n                <span class=\"navbar-toggler-icon\"></span>\n            </navbar-toggle-button>\n\n            <div\n                class=\"collapse navbar-collapse\"\n                :class=\"{show: toggled}\"\n                :id=\"contentId\"\n                v-click-outside=\"closeMenu\"\n            >\n                <slot :close-menu=\"closeMenu\"></slot>\n            </div>\n        </div>\n    </nav>\n</template>\n<script>\nimport NavbarToggleButton from './NavbarToggleButton'\n\nexport default {\n    name: 'base-nav',\n    components: {\n        NavbarToggleButton,\n    },\n    props: {\n        type: {\n            type: String,\n            default: '',\n            description: 'Navbar type (e.g default, primary etc)',\n        },\n        title: {\n            type: String,\n            default: '',\n            description: 'Title of navbar',\n        },\n        contentId: {\n            type: [String, Number],\n            default: Math.random().toString(),\n            description:\n                \"Explicit id for the menu. By default it's a generated random number\",\n        },\n        containerClasses: {\n            type: [String, Object, Array],\n            default: 'container-fluid',\n        },\n        transparent: {\n            type: Boolean,\n            default: false,\n            description: 'Whether navbar is transparent',\n        },\n        expand: {\n            type: Boolean,\n            default: false,\n            description:\n                'Whether navbar should contain `navbar-expand-lg` class',\n        },\n        showToggleButton: {\n            type: Boolean,\n            default: true,\n        },\n    },\n    data() {\n        return {\n            toggled: false,\n            paths: [],\n        }\n    },\n    methods: {\n        closeMenu() {\n            this.toggled = false\n        },\n        calcPath() {\n            // generate path\n            let pathSplit = this.$route.path.split('/')\n            pathSplit.splice(0, 1) // remove\n\n            let paths = []\n            let runningPath = ''\n            for (let segment of pathSplit) {\n                runningPath += '/' + segment\n\n                paths.push({\n                    path: runningPath,\n                    text: segment,\n                })\n            }\n\n            this.paths = paths\n            console.log(paths)\n        },\n    },\n    mounted() {\n        this.calcPath()\n    },\n    watch: {\n        $route(to, from) {\n            console.log('new path')\n            this.calcPath()\n        },\n    },\n}\n</script>\n<style>\n</style>\n"],"sourceRoot":"src/components"}]}