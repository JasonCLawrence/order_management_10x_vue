{"remainingRequest":"/home/jlawrence/10x/apps/OmsVue/node_modules/thread-loader/dist/cjs.js!/home/jlawrence/10x/apps/OmsVue/node_modules/babel-loader/lib/index.js!/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jlawrence/10x/apps/OmsVue/src/views/Customers/CreateCustomerForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/jlawrence/10x/apps/OmsVue/src/views/Customers/CreateCustomerForm.vue","mtime":1585672524041},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { LMap, LTileLayer, LMarker } from 'vue2-leaflet';\nexport default {\n  name: 'create-customer-form',\n  components: {\n    LMap: LMap,\n    LTileLayer: LTileLayer,\n    LMarker: LMarker\n  },\n  props: [],\n  data: function data() {\n    return {\n      model: {\n        name: '',\n        email: '',\n        address: ''\n      },\n      submitting: false,\n      hasErrors: false\n    };\n  },\n  methods: {\n    cancel: function cancel() {\n      this.$emit('cancel');\n    },\n    create: function create() {\n      var _this = this;\n\n      this.$validator.validate().then(function (valid) {\n        if (valid) {\n          _this.submitting = true;\n\n          _this.$store.dispatch('customers/create', _this.model).then(function () {\n            _this.$emit('success');\n          }).catch(function () {}).finally(function () {\n            _this.submitting = false;\n          });\n        } else {}\n      });\n    },\n    invalidateMap: function invalidateMap() {\n      var _this2 = this;\n\n      setTimeout(function () {\n        _this2.$refs.map.mapObject.invalidateSize();\n      }, 1000);\n    }\n  },\n  mounted: function mounted() {// setTimeout(() => {\n    //     this.$refs.map.mapObject.invalidateSize()\n    //     console.log('update')\n    // }, 1000)\n  }\n};",{"version":3,"sources":["CreateCustomerForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA,SAAA,IAAA,EAAA,UAAA,EAAA,OAAA,QAAA,cAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,sBADA;AAEA,EAAA,UAAA,EAAA;AAAA,IAAA,IAAA,EAAA,IAAA;AAAA,IAAA,UAAA,EAAA,UAAA;AAAA,IAAA,OAAA,EAAA;AAAA,GAFA;AAGA,EAAA,KAAA,EAAA,EAHA;AAIA,EAAA,IAAA,EAAA,gBAAA;AACA,WAAA;AACA,MAAA,KAAA,EAAA;AACA,QAAA,IAAA,EAAA,EADA;AAEA,QAAA,KAAA,EAAA,EAFA;AAGA,QAAA,OAAA,EAAA;AAHA,OADA;AAMA,MAAA,UAAA,EAAA,KANA;AAOA,MAAA,SAAA,EAAA;AAPA,KAAA;AASA,GAdA;AAeA,EAAA,OAAA,EAAA;AACA,IAAA,MADA,oBACA;AACA,WAAA,KAAA,CAAA,QAAA;AACA,KAHA;AAIA,IAAA,MAJA,oBAIA;AAAA;;AACA,WAAA,UAAA,CAAA,QAAA,GAAA,IAAA,CAAA,UAAA,KAAA,EAAA;AACA,YAAA,KAAA,EAAA;AACA,UAAA,KAAA,CAAA,UAAA,GAAA,IAAA;;AACA,UAAA,KAAA,CAAA,MAAA,CACA,QADA,CACA,kBADA,EACA,KAAA,CAAA,KADA,EAEA,IAFA,CAEA,YAAA;AACA,YAAA,KAAA,CAAA,KAAA,CAAA,SAAA;AACA,WAJA,EAKA,KALA,CAKA,YAAA,CAAA,CALA,EAMA,OANA,CAMA,YAAA;AACA,YAAA,KAAA,CAAA,UAAA,GAAA,KAAA;AACA,WARA;AASA,SAXA,MAWA,CACA;AACA,OAdA;AAeA,KApBA;AAqBA,IAAA,aArBA,2BAqBA;AAAA;;AACA,MAAA,UAAA,CAAA,YAAA;AACA,QAAA,MAAA,CAAA,KAAA,CAAA,GAAA,CAAA,SAAA,CAAA,cAAA;AACA,OAFA,EAEA,IAFA,CAAA;AAGA;AAzBA,GAfA;AA0CA,EAAA,OAAA,EAAA,mBAAA,CACA;AACA;AACA;AACA;AACA;AA/CA,CAAA","sourcesContent":["<template>\n    <form role=\"form\" submit.prevent=\"create\">\n        <h2 class=\"text-center\">Add Customer</h2>\n\n        <base-input\n            label=\"Name\"\n            placeholder\n            name=\"name\"\n            v-model=\"model.name\"\n            :error=\"errors.first('name')\"\n            v-validate=\"'required'\"\n            type=\"text\"\n        ></base-input>\n\n        <base-input\n            label=\"Email\"\n            placeholder\n            name=\"email\"\n            v-model=\"model.email\"\n            :error=\"errors.first('email')\"\n            v-validate=\"'required|email'\"\n            type=\"email\"\n        ></base-input>\n\n        <base-input\n            label=\"Address\"\n            placeholder\n            name=\"address\"\n            v-model=\"model.address\"\n            :error=\"errors.first('address')\"\n            v-validate=\"'required'\"\n            type=\"address\"\n        ></base-input>\n\n        <div class=\"text-right\">\n            <base-button\n                class=\"my-4\"\n                type=\"warning\"\n                :disabled=\"submitting?true:false\"\n                @click=\"cancel()\"\n            >Cancel</base-button>\n            <base-button\n                class=\"my-4\"\n                type=\"primary\"\n                :disabled=\"submitting?true:false\"\n                @click=\"create()\"\n            >Create</base-button>\n        </div>\n    </form>\n</template>\n\n<script>\nimport { LMap, LTileLayer, LMarker } from 'vue2-leaflet'\n\nexport default {\n    name: 'create-customer-form',\n    components: { LMap, LTileLayer, LMarker },\n    props: [],\n    data: () => {\n        return {\n            model: {\n                name: '',\n                email: '',\n                address: '',\n            },\n            submitting: false,\n            hasErrors: false,\n        }\n    },\n    methods: {\n        cancel() {\n            this.$emit('cancel')\n        },\n        create() {\n            this.$validator.validate().then(valid => {\n                if (valid) {\n                    this.submitting = true\n                    this.$store\n                        .dispatch('customers/create', this.model)\n                        .then(() => {\n                            this.$emit('success')\n                        })\n                        .catch(() => {})\n                        .finally(() => {\n                            this.submitting = false\n                        })\n                } else {\n                }\n            })\n        },\n        invalidateMap() {\n            setTimeout(() => {\n                this.$refs.map.mapObject.invalidateSize()\n            }, 1000)\n        },\n    },\n    mounted: function() {\n        // setTimeout(() => {\n        //     this.$refs.map.mapObject.invalidateSize()\n        //     console.log('update')\n        // }, 1000)\n    },\n}\n</script>\n"],"sourceRoot":"src/views/Customers"}]}