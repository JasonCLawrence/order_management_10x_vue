{"remainingRequest":"/home/jlawrence/10x/apps/OmsVue/node_modules/thread-loader/dist/cjs.js!/home/jlawrence/10x/apps/OmsVue/node_modules/babel-loader/lib/index.js!/home/jlawrence/10x/apps/OmsVue/node_modules/eslint-loader/index.js??ref--13-0!/home/jlawrence/10x/apps/OmsVue/src/api/order.js","dependencies":[{"path":"/home/jlawrence/10x/apps/OmsVue/src/api/order.js","mtime":1585672524033},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from 'axios';\nimport { refreshToken } from '@/refresh-token';\nimport { encodeData } from '@/utils';\nexport default {\n  create: function create(model) {\n    return axios.post(\"order\", model);\n  },\n  fetchById: function fetchById(id) {\n    return axios.get(\"order/\".concat(id));\n  },\n  fetch: function fetch(query, filters, page) {\n    return axios.get(\"order?q=\".concat(query, \"&page=\").concat(page, \"&\") + buildQuery(filters));\n  },\n  fetchDrivers: function fetchDrivers() {\n    return axios.get(\"user/all\");\n  },\n  fetchWarehouses: function fetchWarehouses() {\n    return axios.get(\"warehouse/all\");\n  },\n  fetchCustomers: function fetchCustomers() {\n    return axios.get(\"customer/all\");\n  },\n  update: function update(id, model) {\n    return axios.put(\"order/\".concat(id), model);\n  },\n  delete: function _delete(id) {\n    return axios.delete(\"order/\".concat(id));\n  },\n  markAsComplete: function markAsComplete(id) {\n    return axios.post(\"order/\".concat(id, \"/complete\"));\n  },\n  markAsIncomplete: function markAsIncomplete(id) {\n    return axios.post(\"order/\".concat(id, \"/incomplete\"));\n  },\n\n  /* Tasks */\n  fetchTasks: function fetchTasks(orderId) {\n    return axios.get(\"order/\".concat(orderId, \"/checklist\"));\n  },\n  updateTasks: function updateTasks(orderId, tasks) {\n    return axios.post(\"order/\".concat(orderId, \"/checklist\"), {\n      data: tasks\n    });\n  },\n\n  /* Invoice */\n  fetchInvoice: function fetchInvoice(orderId) {\n    return axios.get(\"order/\".concat(orderId, \"/invoice\"));\n  },\n  updateInvoice: function updateInvoice(orderId, tasks) {\n    return axios.post(\"order/\".concat(orderId, \"/invoice\"), {\n      data: tasks\n    });\n  },\n  // creates a whole order from an invoice definition\n  // this is used by the\n  uploadInvoice: function uploadInvoice(invoice) {\n    return axios.post(\"order/invoice_upload\", invoice);\n  },\n\n  /* Notes */\n  deleteNote: function deleteNote(orderId, noteId) {\n    return axios.delete(\"order/\".concat(orderId, \"/note/\").concat(noteId));\n  },\n\n  /* Attachment */\n  deleteAttachment: function deleteAttachment(orderId, attachmentId) {\n    return axios.delete(\"order/\".concat(orderId, \"/attachment/\").concat(attachmentId));\n  },\n\n  /* Bulk Actions */\n  bulkSetDriver: function bulkSetDriver(orders, driverId) {\n    return axios.post(\"order/bulk_set_driver\", {\n      driverId: driverId,\n      orders: orders.map(function (x) {\n        return x.id;\n      })\n    });\n  },\n  bulkSetWarehouse: function bulkSetWarehouse(orders, warehouseId) {\n    return axios.post(\"order/bulk_set_warehouse\", {\n      warehouseId: warehouseId,\n      orders: orders.map(function (x) {\n        return x.id;\n      })\n    });\n  },\n  bulkSetIncomplete: function bulkSetIncomplete(orders) {\n    return axios.post(\"order/bulk_set_incomplete\", {\n      orders: orders.map(function (x) {\n        return x.id;\n      })\n    });\n  },\n  bulkDelete: function bulkDelete(orders) {\n    return axios.post(\"order/bulk_delete\", {\n      orders: orders.map(function (x) {\n        return x.id;\n      })\n    });\n  },\n\n  /* Invoice Download */\n  downloadInvoice: function downloadInvoice(id) {\n    refreshToken(axios).then(function () {\n      var url = // 'https://oms.clientloop.io/api/v1/report?' +\n      \"http://localhost:8000/api/v1/order/\".concat(id, \"/download?\") + encodeData({\n        token: localStorage.getItem('accessToken')\n      });\n      window.open(url, '_blank');\n    });\n  },\n\n  /* Order Summary Download */\n  downloadSummary: function downloadSummary(id) {\n    refreshToken(axios).then(function () {\n      var url = // 'https://oms.clientloop.io/api/v1/report?' +\n      \"http://localhost:8000/api/v1/order/\".concat(id, \"/summary?\") + encodeData({\n        token: localStorage.getItem('accessToken')\n      });\n      window.open(url, '_blank');\n    });\n  }\n};\n\nvar buildQuery = function buildQuery(data) {\n  // If the data is already a string, return it as-is\n  if (typeof data === 'string') return data; // Create a query array to hold the key/value pairs\n\n  var query = []; // Loop through the data object\n\n  for (var key in data) {\n    if (data.hasOwnProperty(key)) {\n      // Encode each key and value, concatenate them into a string, and push them to the array\n      query.push(encodeURIComponent(key) + '=' + encodeURIComponent(data[key]));\n    }\n  } // Join each item in the array with a `&` and return the resulting string\n\n\n  return query.join('&');\n};",{"version":3,"sources":["/home/jlawrence/10x/apps/OmsVue/src/api/order.js"],"names":["axios","refreshToken","encodeData","create","model","post","fetchById","id","get","fetch","query","filters","page","buildQuery","fetchDrivers","fetchWarehouses","fetchCustomers","update","put","delete","markAsComplete","markAsIncomplete","fetchTasks","orderId","updateTasks","tasks","data","fetchInvoice","updateInvoice","uploadInvoice","invoice","deleteNote","noteId","deleteAttachment","attachmentId","bulkSetDriver","orders","driverId","map","x","bulkSetWarehouse","warehouseId","bulkSetIncomplete","bulkDelete","downloadInvoice","then","url","token","localStorage","getItem","window","open","downloadSummary","key","hasOwnProperty","push","encodeURIComponent","join"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,UAAT,QAA2B,SAA3B;AAEA,eAAe;AACXC,EAAAA,MADW,kBACJC,KADI,EACG;AACV,WAAOJ,KAAK,CAACK,IAAN,UAAoBD,KAApB,CAAP;AACH,GAHU;AAIXE,EAAAA,SAJW,qBAIDC,EAJC,EAIG;AACV,WAAOP,KAAK,CAACQ,GAAN,iBAAmBD,EAAnB,EAAP;AACH,GANU;AAOXE,EAAAA,KAPW,iBAOLC,KAPK,EAOEC,OAPF,EAOWC,IAPX,EAOiB;AACxB,WAAOZ,KAAK,CAACQ,GAAN,CAAU,kBAAWE,KAAX,mBAAyBE,IAAzB,SAAmCC,UAAU,CAACF,OAAD,CAAvD,CAAP;AACH,GATU;AAUXG,EAAAA,YAVW,0BAUI;AACX,WAAOd,KAAK,CAACQ,GAAN,YAAP;AACH,GAZU;AAaXO,EAAAA,eAbW,6BAaO;AACd,WAAOf,KAAK,CAACQ,GAAN,iBAAP;AACH,GAfU;AAgBXQ,EAAAA,cAhBW,4BAgBM;AACb,WAAOhB,KAAK,CAACQ,GAAN,gBAAP;AACH,GAlBU;AAmBXS,EAAAA,MAnBW,kBAmBJV,EAnBI,EAmBAH,KAnBA,EAmBO;AACd,WAAOJ,KAAK,CAACkB,GAAN,iBAAmBX,EAAnB,GAAyBH,KAAzB,CAAP;AACH,GArBU;AAsBXe,EAAAA,MAtBW,mBAsBJZ,EAtBI,EAsBA;AACP,WAAOP,KAAK,CAACmB,MAAN,iBAAsBZ,EAAtB,EAAP;AACH,GAxBU;AAyBXa,EAAAA,cAzBW,0BAyBIb,EAzBJ,EAyBQ;AACf,WAAOP,KAAK,CAACK,IAAN,iBAAoBE,EAApB,eAAP;AACH,GA3BU;AA4BXc,EAAAA,gBA5BW,4BA4BMd,EA5BN,EA4BU;AACjB,WAAOP,KAAK,CAACK,IAAN,iBAAoBE,EAApB,iBAAP;AACH,GA9BU;;AAgCX;AACAe,EAAAA,UAjCW,sBAiCAC,OAjCA,EAiCS;AAChB,WAAOvB,KAAK,CAACQ,GAAN,iBAAmBe,OAAnB,gBAAP;AACH,GAnCU;AAqCXC,EAAAA,WArCW,uBAqCCD,OArCD,EAqCUE,KArCV,EAqCiB;AACxB,WAAOzB,KAAK,CAACK,IAAN,iBAAoBkB,OAApB,iBAAyC;AAC5CG,MAAAA,IAAI,EAAED;AADsC,KAAzC,CAAP;AAGH,GAzCU;;AA2CX;AACAE,EAAAA,YA5CW,wBA4CEJ,OA5CF,EA4CW;AAClB,WAAOvB,KAAK,CAACQ,GAAN,iBAAmBe,OAAnB,cAAP;AACH,GA9CU;AAgDXK,EAAAA,aAhDW,yBAgDGL,OAhDH,EAgDYE,KAhDZ,EAgDmB;AAC1B,WAAOzB,KAAK,CAACK,IAAN,iBAAoBkB,OAApB,eAAuC;AAC1CG,MAAAA,IAAI,EAAED;AADoC,KAAvC,CAAP;AAGH,GApDU;AAqDX;AACA;AACAI,EAAAA,aAvDW,yBAuDGC,OAvDH,EAuDY;AACnB,WAAO9B,KAAK,CAACK,IAAN,yBAAmCyB,OAAnC,CAAP;AACH,GAzDU;;AA2DX;AACAC,EAAAA,UA5DW,sBA4DAR,OA5DA,EA4DSS,MA5DT,EA4DiB;AACxB,WAAOhC,KAAK,CAACmB,MAAN,iBAAsBI,OAAtB,mBAAsCS,MAAtC,EAAP;AACH,GA9DU;;AAgEX;AACAC,EAAAA,gBAjEW,4BAiEMV,OAjEN,EAiEeW,YAjEf,EAiE6B;AACpC,WAAOlC,KAAK,CAACmB,MAAN,iBAAsBI,OAAtB,yBAA4CW,YAA5C,EAAP;AACH,GAnEU;;AAqEX;AACAC,EAAAA,aAtEW,yBAsEGC,MAtEH,EAsEWC,QAtEX,EAsEqB;AAC5B,WAAOrC,KAAK,CAACK,IAAN,0BAAoC;AACvCgC,MAAAA,QAAQ,EAAEA,QAD6B;AAEvCD,MAAAA,MAAM,EAAEA,MAAM,CAACE,GAAP,CAAW,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAAChC,EAAN;AAAA,OAAZ;AAF+B,KAApC,CAAP;AAIH,GA3EU;AA4EXiC,EAAAA,gBA5EW,4BA4EMJ,MA5EN,EA4EcK,WA5Ed,EA4E2B;AAClC,WAAOzC,KAAK,CAACK,IAAN,6BAAuC;AAC1CoC,MAAAA,WAAW,EAAEA,WAD6B;AAE1CL,MAAAA,MAAM,EAAEA,MAAM,CAACE,GAAP,CAAW,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAAChC,EAAN;AAAA,OAAZ;AAFkC,KAAvC,CAAP;AAIH,GAjFU;AAkFXmC,EAAAA,iBAlFW,6BAkFON,MAlFP,EAkFe;AACtB,WAAOpC,KAAK,CAACK,IAAN,8BAAwC;AAC3C+B,MAAAA,MAAM,EAAEA,MAAM,CAACE,GAAP,CAAW,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAAChC,EAAN;AAAA,OAAZ;AADmC,KAAxC,CAAP;AAGH,GAtFU;AAuFXoC,EAAAA,UAvFW,sBAuFAP,MAvFA,EAuFQ;AACf,WAAOpC,KAAK,CAACK,IAAN,sBAAgC;AACnC+B,MAAAA,MAAM,EAAEA,MAAM,CAACE,GAAP,CAAW,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAAChC,EAAN;AAAA,OAAZ;AAD2B,KAAhC,CAAP;AAGH,GA3FU;;AA6FX;AACAqC,EAAAA,eA9FW,2BA8FKrC,EA9FL,EA8FS;AAChBN,IAAAA,YAAY,CAACD,KAAD,CAAZ,CAAoB6C,IAApB,CAAyB,YAAM;AAC3B,UAAIC,GAAG,GACH;AACA,mDAAsCvC,EAAtC,kBACAL,UAAU,CAAC;AACP6C,QAAAA,KAAK,EAAEC,YAAY,CAACC,OAAb,CAAqB,aAArB;AADA,OAAD,CAHd;AAMAC,MAAAA,MAAM,CAACC,IAAP,CAAYL,GAAZ,EAAiB,QAAjB;AACH,KARD;AASH,GAxGU;;AA0GX;AACAM,EAAAA,eA3GW,2BA2GK7C,EA3GL,EA2GS;AAChBN,IAAAA,YAAY,CAACD,KAAD,CAAZ,CAAoB6C,IAApB,CAAyB,YAAM;AAC3B,UAAIC,GAAG,GACH;AACA,mDAAsCvC,EAAtC,iBACAL,UAAU,CAAC;AACP6C,QAAAA,KAAK,EAAEC,YAAY,CAACC,OAAb,CAAqB,aAArB;AADA,OAAD,CAHd;AAMAC,MAAAA,MAAM,CAACC,IAAP,CAAYL,GAAZ,EAAiB,QAAjB;AACH,KARD;AASH;AArHU,CAAf;;AAwHA,IAAIjC,UAAU,GAAG,SAAbA,UAAa,CAASa,IAAT,EAAe;AAC5B;AACA,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B,OAAOA,IAAP,CAFF,CAI5B;;AACA,MAAIhB,KAAK,GAAG,EAAZ,CAL4B,CAO5B;;AACA,OAAK,IAAI2C,GAAT,IAAgB3B,IAAhB,EAAsB;AAClB,QAAIA,IAAI,CAAC4B,cAAL,CAAoBD,GAApB,CAAJ,EAA8B;AAC1B;AACA3C,MAAAA,KAAK,CAAC6C,IAAN,CACIC,kBAAkB,CAACH,GAAD,CAAlB,GAA0B,GAA1B,GAAgCG,kBAAkB,CAAC9B,IAAI,CAAC2B,GAAD,CAAL,CADtD;AAGH;AACJ,GAf2B,CAiB5B;;;AACA,SAAO3C,KAAK,CAAC+C,IAAN,CAAW,GAAX,CAAP;AACH,CAnBD","sourcesContent":["import axios from 'axios'\nimport { refreshToken } from '@/refresh-token'\nimport { encodeData } from '@/utils'\n\nexport default {\n    create(model) {\n        return axios.post(`order`, model)\n    },\n    fetchById(id) {\n        return axios.get(`order/${id}`)\n    },\n    fetch(query, filters, page) {\n        return axios.get(`order?q=${query}&page=${page}&` + buildQuery(filters))\n    },\n    fetchDrivers() {\n        return axios.get(`user/all`)\n    },\n    fetchWarehouses() {\n        return axios.get(`warehouse/all`)\n    },\n    fetchCustomers() {\n        return axios.get(`customer/all`)\n    },\n    update(id, model) {\n        return axios.put(`order/${id}`, model)\n    },\n    delete(id) {\n        return axios.delete(`order/${id}`)\n    },\n    markAsComplete(id) {\n        return axios.post(`order/${id}/complete`)\n    },\n    markAsIncomplete(id) {\n        return axios.post(`order/${id}/incomplete`)\n    },\n\n    /* Tasks */\n    fetchTasks(orderId) {\n        return axios.get(`order/${orderId}/checklist`)\n    },\n\n    updateTasks(orderId, tasks) {\n        return axios.post(`order/${orderId}/checklist`, {\n            data: tasks,\n        })\n    },\n\n    /* Invoice */\n    fetchInvoice(orderId) {\n        return axios.get(`order/${orderId}/invoice`)\n    },\n\n    updateInvoice(orderId, tasks) {\n        return axios.post(`order/${orderId}/invoice`, {\n            data: tasks,\n        })\n    },\n    // creates a whole order from an invoice definition\n    // this is used by the\n    uploadInvoice(invoice) {\n        return axios.post(`order/invoice_upload`, invoice)\n    },\n\n    /* Notes */\n    deleteNote(orderId, noteId) {\n        return axios.delete(`order/${orderId}/note/${noteId}`)\n    },\n\n    /* Attachment */\n    deleteAttachment(orderId, attachmentId) {\n        return axios.delete(`order/${orderId}/attachment/${attachmentId}`)\n    },\n\n    /* Bulk Actions */\n    bulkSetDriver(orders, driverId) {\n        return axios.post(`order/bulk_set_driver`, {\n            driverId: driverId,\n            orders: orders.map(x => x.id),\n        })\n    },\n    bulkSetWarehouse(orders, warehouseId) {\n        return axios.post(`order/bulk_set_warehouse`, {\n            warehouseId: warehouseId,\n            orders: orders.map(x => x.id),\n        })\n    },\n    bulkSetIncomplete(orders) {\n        return axios.post(`order/bulk_set_incomplete`, {\n            orders: orders.map(x => x.id),\n        })\n    },\n    bulkDelete(orders) {\n        return axios.post(`order/bulk_delete`, {\n            orders: orders.map(x => x.id),\n        })\n    },\n\n    /* Invoice Download */\n    downloadInvoice(id) {\n        refreshToken(axios).then(() => {\n            let url =\n                // 'https://oms.clientloop.io/api/v1/report?' +\n                `http://localhost:8000/api/v1/order/${id}/download?` +\n                encodeData({\n                    token: localStorage.getItem('accessToken'),\n                })\n            window.open(url, '_blank')\n        })\n    },\n\n    /* Order Summary Download */\n    downloadSummary(id) {\n        refreshToken(axios).then(() => {\n            let url =\n                // 'https://oms.clientloop.io/api/v1/report?' +\n                `http://localhost:8000/api/v1/order/${id}/summary?` +\n                encodeData({\n                    token: localStorage.getItem('accessToken'),\n                })\n            window.open(url, '_blank')\n        })\n    },\n}\n\nvar buildQuery = function(data) {\n    // If the data is already a string, return it as-is\n    if (typeof data === 'string') return data\n\n    // Create a query array to hold the key/value pairs\n    var query = []\n\n    // Loop through the data object\n    for (var key in data) {\n        if (data.hasOwnProperty(key)) {\n            // Encode each key and value, concatenate them into a string, and push them to the array\n            query.push(\n                encodeURIComponent(key) + '=' + encodeURIComponent(data[key])\n            )\n        }\n    }\n\n    // Join each item in the array with a `&` and return the resulting string\n    return query.join('&')\n}\n"]}]}