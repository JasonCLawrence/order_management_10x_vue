{"remainingRequest":"/home/jlawrence/10x/apps/OmsVue/node_modules/thread-loader/dist/cjs.js!/home/jlawrence/10x/apps/OmsVue/node_modules/babel-loader/lib/index.js!/home/jlawrence/10x/apps/OmsVue/node_modules/eslint-loader/index.js??ref--13-0!/home/jlawrence/10x/apps/OmsVue/src/store/orders.module.js","dependencies":[{"path":"/home/jlawrence/10x/apps/OmsVue/src/store/orders.module.js","mtime":1585672524041},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find-index\";\nimport api from '@/api/order';\nexport var state = {\n  items: [],\n  pagination: null\n};\nexport var mutations = {\n  set: function set(state, payload) {\n    state.items = payload;\n  },\n  delete: function _delete(state, id) {\n    var index = state.items.findIndex(function (x) {\n      return x.id == id;\n    });\n    state.items.splice(index, 1);\n  },\n  set_pagination: function set_pagination(state, pag) {\n    state.pagination = pag;\n  }\n};\nexport var actions = {\n  create: function create(context, payload) {\n    return new Promise(function (resolve, reject) {\n      api.create(payload).then(function (res) {\n        resolve(res.data.success.data);\n      }).catch(function (res) {\n        reject(res);\n      });\n    });\n  },\n  fetch: function fetch(context, payload) {\n    return new Promise(function (resolve, reject) {\n      api.fetch(payload.query, payload.filters, payload.page).then(function (result) {\n        var orders = result.data.success.data.data.map(function (o) {\n          o.totalTasks = o.checklist.length;\n          o.completedTasks = o.checklist.filter(function (x) {\n            return x.checked == 1;\n          }).length;\n          if (o.totalTasks != 0) o.taskCompletion = o.completedTasks / o.totalTasks * 100;else o.taskCompletion = 0;\n          o.checked = false;\n          return o;\n        });\n        context.commit('set', orders);\n        var pag = result.data.success.data;\n        context.commit('set_pagination', {\n          page: pag.current_page,\n          pageSize: pag.per_page,\n          total: pag.total\n        });\n        resolve();\n      }).catch(function () {\n        reject();\n      });\n    });\n  },\n  update: function update(context, payload) {\n    return new Promise(function (resolve, reject) {\n      api.update(payload.id, payload).then(function () {\n        resolve();\n      }).catch(function () {\n        reject();\n      });\n    });\n  },\n  delete: function _delete(context, id) {\n    return new Promise(function (resolve, reject) {\n      api.delete(id).then(function (result) {\n        context.commit('delete', id);\n        resolve();\n      }).catch(function (result) {\n        reject();\n      });\n    });\n  },\n  bulkSetDriver: function bulkSetDriver(context, payload) {\n    return new Promise(function (resolve, reject) {\n      api.bulkSetDriver(payload.orders, payload.driverId).then(function (result) {\n        resolve();\n      }).catch(function (result) {\n        reject();\n      });\n    });\n  },\n  bulkSetWarehouse: function bulkSetWarehouse(context, payload) {\n    return new Promise(function (resolve, reject) {\n      api.bulkSetWarehouse(payload.orders, payload.warehouseId).then(function (result) {\n        resolve();\n      }).catch(function (result) {\n        reject();\n      });\n    });\n  },\n  bulkSetIncomplete: function bulkSetIncomplete(context, payload) {\n    return new Promise(function (resolve, reject) {\n      api.bulkSetIncomplete(payload.orders).then(function (result) {\n        resolve();\n      }).catch(function (result) {\n        reject();\n      });\n    });\n  },\n  bulkDelete: function bulkDelete(context, payload) {\n    return new Promise(function (resolve, reject) {\n      api.bulkDelete(payload.orders).then(function (result) {\n        resolve();\n      }).catch(function (result) {\n        reject();\n      });\n    });\n  }\n};\nexport var getters = {};\nexport default {\n  namespaced: true,\n  state: state,\n  mutations: mutations,\n  actions: actions,\n  getters: getters\n};",{"version":3,"sources":["/home/jlawrence/10x/apps/OmsVue/src/store/orders.module.js"],"names":["api","state","items","pagination","mutations","set","payload","delete","id","index","findIndex","x","splice","set_pagination","pag","actions","create","context","Promise","resolve","reject","then","res","data","success","catch","fetch","query","filters","page","result","orders","map","o","totalTasks","checklist","length","completedTasks","filter","checked","taskCompletion","commit","current_page","pageSize","per_page","total","update","bulkSetDriver","driverId","bulkSetWarehouse","warehouseId","bulkSetIncomplete","bulkDelete","getters","namespaced"],"mappings":"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","sourcesContent":["import api from '@/api/order'\n\nexport const state = {\n    items: [],\n    pagination: null,\n}\n\nexport const mutations = {\n    set(state, payload) {\n        state.items = payload\n    },\n    delete(state, id) {\n        let index = state.items.findIndex(x => x.id == id)\n        state.items.splice(index, 1)\n    },\n    set_pagination(state, pag) {\n        state.pagination = pag\n    },\n}\n\nexport const actions = {\n    create(context, payload) {\n        return new Promise((resolve, reject) => {\n            api.create(payload)\n                .then(res => {\n                    resolve(res.data.success.data)\n                })\n                .catch(res => {\n                    reject(res)\n                })\n        })\n    },\n    fetch(context, payload) {\n        return new Promise((resolve, reject) => {\n            api.fetch(payload.query, payload.filters, payload.page)\n                .then(result => {\n                    let orders = result.data.success.data.data.map(o => {\n                        o.totalTasks = o.checklist.length\n                        o.completedTasks = o.checklist.filter(x => {\n                            return x.checked == 1\n                        }).length\n\n                        if (o.totalTasks != 0)\n                            o.taskCompletion =\n                                (o.completedTasks / o.totalTasks) * 100\n                        else o.taskCompletion = 0\n\n                        o.checked = false\n\n                        return o\n                    })\n\n                    context.commit('set', orders)\n                    let pag = result.data.success.data\n                    context.commit('set_pagination', {\n                        page: pag.current_page,\n                        pageSize: pag.per_page,\n                        total: pag.total,\n                    })\n                    resolve()\n                })\n                .catch(() => {\n                    reject()\n                })\n        })\n    },\n    update(context, payload) {\n        return new Promise((resolve, reject) => {\n            api.update(payload.id, payload)\n                .then(() => {\n                    resolve()\n                })\n                .catch(() => {\n                    reject()\n                })\n        })\n    },\n    delete(context, id) {\n        return new Promise((resolve, reject) => {\n            api.delete(id)\n                .then(result => {\n                    context.commit('delete', id)\n                    resolve()\n                })\n                .catch(result => {\n                    reject()\n                })\n        })\n    },\n    bulkSetDriver(context, payload) {\n        return new Promise((resolve, reject) => {\n            api.bulkSetDriver(payload.orders, payload.driverId)\n                .then(result => {\n                    resolve()\n                })\n                .catch(result => {\n                    reject()\n                })\n        })\n    },\n    bulkSetWarehouse(context, payload) {\n        return new Promise((resolve, reject) => {\n            api.bulkSetWarehouse(payload.orders, payload.warehouseId)\n                .then(result => {\n                    resolve()\n                })\n                .catch(result => {\n                    reject()\n                })\n        })\n    },\n    bulkSetIncomplete(context, payload) {\n        return new Promise((resolve, reject) => {\n            api.bulkSetIncomplete(payload.orders)\n                .then(result => {\n                    resolve()\n                })\n                .catch(result => {\n                    reject()\n                })\n        })\n    },\n    bulkDelete(context, payload) {\n        return new Promise((resolve, reject) => {\n            api.bulkDelete(payload.orders)\n                .then(result => {\n                    resolve()\n                })\n                .catch(result => {\n                    reject()\n                })\n        })\n    },\n}\n\nexport const getters = {}\n\nexport default {\n    namespaced: true,\n    state,\n    mutations,\n    actions,\n    getters,\n}\n"]}]}