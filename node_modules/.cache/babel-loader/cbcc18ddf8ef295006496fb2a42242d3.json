{"remainingRequest":"/home/jlawrence/10x/apps/OmsVue/node_modules/babel-loader/lib/index.js!/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jlawrence/10x/apps/OmsVue/src/views/Orders/ImportInvoicesForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/jlawrence/10x/apps/OmsVue/src/views/Orders/ImportInvoicesForm.vue","mtime":1585672524045},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jlawrence/10x/apps/OmsVue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.typed.uint8-array\";\nimport _classCallCheck from \"/home/jlawrence/10x/apps/OmsVue/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _defineProperty from \"/home/jlawrence/10x/apps/OmsVue/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.regexp.replace\";\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport api from '@/api/order';\nimport flatPicker from 'vue-flatpickr-component';\nimport xlsx from 'xlsx';\nimport moment from 'moment'; //https://stackoverflow.com/questions/2998784/how-to-output-integers-with-leading-zeros-in-javascript\n\nfunction pad(num, size) {\n  var s = num + '';\n\n  while (s.length < size) {\n    s = '0' + s;\n  }\n\n  return s;\n}\n\nfunction now() {\n  var dateObj = new Date();\n  var month = dateObj.getUTCMonth() + 1;\n  var day = dateObj.getUTCDate();\n  var year = dateObj.getUTCFullYear();\n  var date = year + '-' + pad(month, 2) + '-' + pad(day, 2); //console.log(date)\n\n  return date;\n}\n\nfunction parseFormatted(numStr) {\n  if (!numStr) return 0;\n  return parseFloat(numStr.replace(/,/g, '').replace(/\\$/g, ''));\n}\n\nfunction sampleInvoice() {\n  var invoice = new Invoice();\n  invoice.id = '0001234213';\n  invoice.name = 'Sample Invoice Item';\n  invoice.date = '5/12/2019';\n  invoice.salesTax = 5000;\n  invoice.total = 25000;\n  invoice.address = 'yolo';\n  var item = new InvoiceItem();\n  item.item = 'Sample Item';\n  item.description = 'yolo';\n  item.quantity = 1;\n  item.price = 25000;\n  invoice.items.push(item); //return invoice\n\n  return [];\n}\n\nfunction invoiceItems(count) {\n  var invoices = [];\n\n  for (var i = 0; i < count; i++) {\n    var invoice = sampleInvoice();\n    invoice.id = '0012312' + i;\n    invoices.push(invoice);\n  }\n\n  return invoices;\n}\n\nvar Invoice = function Invoice() {\n  _classCallCheck(this, Invoice);\n\n  _defineProperty(this, \"id\", '');\n\n  _defineProperty(this, \"name\", '');\n\n  _defineProperty(this, \"address\", '');\n\n  _defineProperty(this, \"total\", 0);\n\n  _defineProperty(this, \"salesTax\", 0);\n\n  _defineProperty(this, \"customerId\", 0);\n\n  _defineProperty(this, \"customerName\", '');\n\n  _defineProperty(this, \"notes\", '');\n\n  _defineProperty(this, \"items\", []);\n\n  _defineProperty(this, \"tasks\", []);\n\n  _defineProperty(this, \"upload_status\", 'pending');\n};\n\nvar InvoiceItem = function InvoiceItem() {\n  _classCallCheck(this, InvoiceItem);\n\n  _defineProperty(this, \"item\", '');\n\n  _defineProperty(this, \"description\", '');\n\n  _defineProperty(this, \"quantity\", 0);\n\n  _defineProperty(this, \"price\", 0);\n};\n\nexport default {\n  name: 'import-invoices-form',\n  components: {\n    flatPicker: flatPicker\n  },\n  props: [],\n  data: function data() {\n    return {\n      model: {},\n      //invoices: [...invoiceItems(10)],\n      invoices: [],\n      uploading: false,\n      hasErrors: false,\n      step: 1,\n      // 1, 2, 3 or 4\n      // step: 2, // 1, 2 or 3\n      invoiceIndex: 0,\n      // for details page\n      detailsUploaded: false\n    };\n  },\n  created: function created() {\n    this.model.date = now();\n  },\n  methods: {\n    reset: function reset() {\n      this.invoices = [];\n      this.uploading = false;\n      this.step = 1;\n      this.invoiceIndex = 0;\n      this.detailsUploaded = false;\n    },\n    goToHeadersStep: function goToHeadersStep() {\n      this.step = 1;\n    },\n    goToDetailsStep: function goToDetailsStep() {\n      this.step = 2;\n    },\n    goToUploadStep: function goToUploadStep() {\n      this.step = 3;\n    },\n    goToCompleteStep: function goToCompleteStep() {\n      this.step = 4;\n    },\n    nextInvoice: function nextInvoice() {\n      if (this.invoiceIndex < this.invoices.length - 1) this.invoiceIndex += 1;\n    },\n    previousInvoice: function previousInvoice() {\n      if (this.invoiceIndex > 0) this.invoiceIndex -= 1;\n    },\n    clearInvoiceItems: function clearInvoiceItems() {\n      //while (this.invoices.length > 0) this.invoices.pop()\n      this.invoices = [];\n      this.detailsUploaded = false;\n      this.invoiceIndex = 0;\n    },\n    deleteInvoiceItem: function deleteInvoiceItem(invoiceIndex, index) {\n      this.invoices[invoiceIndex].items.splice(index, 1);\n    },\n    deleteInvoiceTask: function deleteInvoiceTask(invoiceIndex, index) {\n      this.invoices[invoiceIndex].tasks.splice(index, 1);\n    },\n    close: function close() {\n      this.errors.clear(); // clear steps and data\n\n      this.reset();\n      this.step = 1;\n      this.$emit('cancel');\n    },\n    create: function create() {},\n    importInvoiceHeaders: function importInvoiceHeaders() {\n      this.$refs.invoiceHeadersFile.click();\n    },\n    importInvoiceHeadersEl: function importInvoiceHeadersEl(e) {\n      var _this = this;\n\n      //console.log('loading file')\n      var reader = new FileReader();\n      reader.readAsArrayBuffer(e.target.files[0]);\n\n      reader.onload = function (e) {\n        var data = new Uint8Array(reader.result);\n        var wb = xlsx.read(data, {\n          type: 'array',\n          raw: false\n        });\n        var worksheet = wb.Sheets[wb.SheetNames[0]];\n        var rows = xlsx.utils.sheet_to_json(worksheet, {\n          raw: false,\n          header: 'A' // just generate plain rows\n\n        });\n        rows.splice(0, 4); //console.log(rows)\n\n        var HEADER_CUSTOMER_ID = 'A';\n        var HEADER_INVOICE_NO = 'B';\n        var HEADER_DATE = 'D';\n        var HEADER_TOTAL = 'F';\n        var HEADER_ADDRESS_1 = 'H';\n        var HEADER_ADDRESS_2 = 'I';\n        var HEADER_CITY = 'J';\n        var HEADER_COUNTRY = 'K';\n        var HEADER_ORDER_TYPE = 'L';\n        var HEADER_ASSIGNED_TO = 'M'; // this.invoiceItems = []\n\n        var invoices = [];\n\n        var _iterator = _createForOfIteratorHelper(rows),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var row = _step.value;\n            // console.log(row)\n            // console.log(row['Invoice/CM #'])\n            if (!row[HEADER_INVOICE_NO]) continue;\n            if (row[HEADER_INVOICE_NO] == 'Total') continue;\n            var invoice = new Invoice();\n            invoice.id = row[HEADER_INVOICE_NO];\n            invoice.name = row[HEADER_CUSTOMER_ID];\n            invoice.type = row[HEADER_ORDER_TYPE].toLowerCase();\n            invoice.customerName = row[HEADER_CUSTOMER_ID];\n            invoice.customerId = row[HEADER_CUSTOMER_ID];\n            invoice.schedule_at = moment(row[HEADER_DATE], 'MM/DD/YY').format('YYYY-MM-DD') + ' 11:00:00'; // console.log(\n            //     moment(row[HEADER_DATE], 'MM/DD/YY').format(\n            //         'YYYY-MM-DD'\n            //     ) + ' 11:00:00'\n            // )\n\n            invoice.assignee = row[HEADER_ASSIGNED_TO]; //invoice.salesTax = parseFormatted(row['Sales Tax'])\n\n            invoice.total = parseFormatted(row[HEADER_TOTAL]);\n            var address = row[HEADER_ADDRESS_1] + '\\n';\n            address += row[HEADER_ADDRESS_2] + '\\n';\n            address += row[HEADER_CITY] + '\\n';\n            address += row[HEADER_COUNTRY];\n            invoice.address = address;\n            invoices.push(invoice);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        _this.invoices = invoices;\n        _this.detailsUploaded = false;\n      };\n    },\n    importInvoiceDetails: function importInvoiceDetails() {\n      this.$refs.invoiceDetailsFile.click();\n    },\n    importInvoiceDetailsEl: function importInvoiceDetailsEl(e) {\n      var _this2 = this;\n\n      var reader = new FileReader();\n      reader.readAsArrayBuffer(e.target.files[0]);\n\n      reader.onload = function (e) {\n        var data = new Uint8Array(reader.result);\n        var wb = xlsx.read(data, {\n          type: 'array'\n        });\n        var worksheet = wb.Sheets[wb.SheetNames[0]];\n        var rows = xlsx.utils.sheet_to_json(worksheet, {\n          raw: false,\n          header: 'A'\n        }); // create a map of invoice items\n\n        var invoiceMap = {};\n\n        var _iterator2 = _createForOfIteratorHelper(_this2.invoices),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var invoice = _step2.value;\n            invoiceMap[invoice.id] = invoice;\n          } //console.log(invoiceMap)\n\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        var DETAIL_INVOICE_NO = 'A';\n        var DETAIL_NAME = 'B';\n        var DETAIL_DESCRIPTION = 'C';\n        var DETAIL_QUANTITY = 'G';\n        var DETAIL_UNIT_PRICE = 'H';\n        rows.splice(0, 4); //console.log(rows)\n\n        var _iterator3 = _createForOfIteratorHelper(rows),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var row = _step3.value;\n            //console.log(row)\n            var invoiceId = row[DETAIL_INVOICE_NO]; //console.log(invoiceId)\n\n            if (!invoiceId) continue;\n            if (!invoiceMap.hasOwnProperty(invoiceId)) continue; //console.log('invoice item valid')\n\n            var price = row[DETAIL_UNIT_PRICE];\n            var quantity = row[DETAIL_QUANTITY];\n            var _invoice = invoiceMap[invoiceId]; //console.log(price)\n\n            if (!_this2.isRowATask(row)) {\n              var item = new InvoiceItem();\n              item.item = row[DETAIL_NAME];\n              item.quantity = parseFormatted(row[DETAIL_QUANTITY]);\n              item.price = parseFormatted(row[DETAIL_UNIT_PRICE]);\n              item.description = row[DETAIL_DESCRIPTION];\n\n              _invoice.items.push(item);\n            } else {\n              _invoice.tasks.push(row[DETAIL_DESCRIPTION]);\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        _this2.detailsUploaded = true;\n      };\n    },\n    isRowATask: function isRowATask(row) {\n      var DETAIL_QUANTITY = 'G';\n      var DETAIL_UNIT_PRICE = 'H';\n      var price = row[DETAIL_UNIT_PRICE];\n      if (!price) return true;\n      if (parseFormatted(price) == 0) return true;\n      var quantity = row[DETAIL_QUANTITY];\n      if (!quantity) return true;\n      if (parseFormatted(quantity) == 0) return true;\n      return false;\n    },\n    currency: function currency(num) {\n      //console.log(num)\n      return num.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n    },\n    calcProgressClass: function calcProgressClass(curStep) {\n      if (curStep < this.step) return {\n        'step-complete': true\n      };\n      if (curStep == this.step) return {\n        'step-active': true\n      };\n      if (curStep > this.step) return {\n        'step-incomplete': true\n      };\n    },\n    getInvoiceStatusStyle: function getInvoiceStatusStyle(status) {\n      if (status == 'pending') return {\n        'text-muted': true\n      };\n      if (status == 'complete') return {\n        'text-success': true\n      };\n      if (status == 'error') return {\n        'text-warning': true\n      };\n    },\n    uploadInvoices: function uploadInvoices() {\n      this.uploading = true; // reset all errors to pending\n\n      this.invoices.map(function (x) {\n        if (x.upload_status == 'error') x.upload_status = 'pending';\n      });\n      this.uploadOne();\n    },\n    uploadOne: function uploadOne() {\n      var _this3 = this;\n\n      var nextItem = this.invoices.find(function (x) {\n        return x.upload_status == 'pending';\n      });\n\n      if (nextItem == undefined) {\n        // no more items left to upload\n        this.uploading = false;\n        this.goToCompleteStep();\n        console.log('no more items');\n        return;\n      }\n\n      api.uploadInvoice(nextItem).then(function (res) {\n        nextItem.upload_status = 'complete';\n      }).catch(function (error) {\n        nextItem.upload_status = 'error';\n      }).finally(function () {\n        // continue uploading\n        _this3.uploadOne();\n      });\n    }\n  },\n  mounted: function mounted() {},\n  computed: {\n    invoiceCount: function invoiceCount() {\n      return this.invoices.length;\n    },\n    uploadProgress: function uploadProgress() {\n      var uploaded = this.invoices.filter(function (x) {\n        return x.upload_status == 'complete';\n      }).length; //console.log()\n\n      return Math.round(uploaded / this.invoices.length * 100);\n    },\n    completedUploads: function completedUploads() {\n      return this.invoices.filter(function (x) {\n        return x.upload_status == 'complete';\n      }).length;\n    },\n    failedUploads: function failedUploads() {\n      return this.invoices.filter(function (x) {\n        return x.upload_status != 'complete';\n      }).length;\n    }\n  }\n};",{"version":3,"sources":["ImportInvoicesForm.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div>\n        <h2 class=\"text-center\">Import Invoices</h2>\n        <div class=\"steps row mb-4 mt-4\">\n            <div class=\"col-sm-3\">\n                <div :class=\"{'step-header':true,...calcProgressClass(1)}\">1. Import Headers</div>\n            </div>\n            <div class=\"col-sm-3\">\n                <div :class=\"{'step-header':true,...calcProgressClass(2)}\">2. Import Details</div>\n            </div>\n            <div class=\"col-sm-3\">\n                <div :class=\"{'step-header':true,...calcProgressClass(3)}\">3. Upload</div>\n            </div>\n            <div class=\"col-sm-3\">\n                <div :class=\"{'step-header':true,...calcProgressClass(4)}\">4. Complete</div>\n            </div>\n        </div>\n        <div class=\"steps\">\n            <div class=\"step1\" v-if=\"step==1\">\n                <div class=\"mt-8 mb-8 text-center\" v-if=\"invoices.length == 0\">\n                    Import\n                    <b>Invoice Headers</b> from spreadsheet.\n                    <br />Ensure the structure of the sheet follows the\n                    <a\n                        href=\"/invoice_headers_template.csv\"\n                        target=\"_blank\"\n                    >Header Template</a>.\n                    <br />\n                    <br />\n                    <base-button type=\"primary\" @click=\"importInvoiceHeaders()\">{{ \"Import\" }}</base-button>\n                    <input\n                        type=\"file\"\n                        class=\"hide-file-picker\"\n                        id=\"input-excel-header\"\n                        @change=\"importInvoiceHeadersEl\"\n                        ref=\"invoiceHeadersFile\"\n                    />\n                </div>\n                <div v-else>\n                    <div class=\"overflow-hidden mb-3\">\n                        <base-button\n                            class=\"float-right\"\n                            type=\"warning\"\n                            size=\"sm\"\n                            @click=\"clearInvoiceItems()\"\n                        >Clear Items</base-button>\n                    </div>\n                    <div style=\"max-height:500px;overflow-y:scroll;\">\n                        <table class=\"table\">\n                            <thead>\n                                <tr>\n                                    <th scope=\"col\">Id</th>\n                                    <th scope=\"col\">Name</th>\n                                    <th scope=\"col\">Total</th>\n                                    <th scope=\"col\">Type</th>\n                                    <th scope=\"col\">Address</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr v-for=\"invoice in this.invoices\" :key=\"invoice.id\">\n                                    <th scope=\"row\">{{ invoice.id }}</th>\n                                    <td>{{ invoice.name }}</td>\n                                    <td>${{ currency(invoice.total) }}</td>\n                                    <td>{{ invoice.type.toUpperCase() }}</td>\n                                    <td style=\"white-space: pre-wrap\">{{ invoice.address }}</td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                    <div class=\"mt-4\">\n                        <!-- <base-button type=\"warning\" @click=\"closeDialog()\">Cancel</base-button> -->\n                        <base-button\n                            class=\"float-right\"\n                            type=\"primary\"\n                            @click=\"goToDetailsStep()\"\n                        >Next</base-button>\n                    </div>\n                </div>\n            </div>\n            <div class=\"step2\" v-if=\"step==2\">\n                <div class=\"mt-8 mb-8 text-center\" v-if=\"this.detailsUploaded==false\">\n                    Import\n                    <b>Invoice Details</b> from spreadsheet.\n                    <br />Ensure the structure of the sheet follows the\n                    <a\n                        href=\"/invoice_details_template.csv\"\n                        target=\"_blank\"\n                    >Detail Template</a>.\n                    <br />\n                    <br />\n                    <base-button type=\"primary\" @click=\"importInvoiceDetails()\">{{ \"Import\" }}</base-button>\n                    <input\n                        type=\"file\"\n                        class=\"hide-file-picker\"\n                        id=\"input-excel-header\"\n                        @change=\"importInvoiceDetailsEl\"\n                        ref=\"invoiceDetailsFile\"\n                    />\n                </div>\n                <div v-else class=\"mt-5\">\n                    <div class=\"row mb-4\">\n                        <div class=\"col-md-6\">\n                            <base-input disabled :value=\"invoices[invoiceIndex].name\" />\n                        </div>\n                        <div class=\"col-md-6 text-right\">\n                            <base-button type=\"default\" @click=\"previousInvoice()\">&lt;</base-button>\n                            {{ invoiceIndex + 1 }} / {{ invoices.length }}\n                            <base-button type=\"default\" @click=\"nextInvoice()\">&gt;</base-button>\n                        </div>\n                    </div>\n                    <div class=\"invoice-items-list\" v-if=\"invoices[invoiceIndex].items.length != 0\">\n                        <div class=\"row\">\n                            <div class=\"col-md-5\">\n                                <b>Item</b>\n                            </div>\n                            <div class=\"col-md-2\">\n                                <b>Qty</b>\n                            </div>\n                            <div class=\"col-md-2\">\n                                <b>Price</b>\n                            </div>\n                            <div class=\"col-md-2\">\n                                <b>Total</b>\n                            </div>\n                            <div class=\"col-md-1\"></div>\n                        </div>\n\n                        <div\n                            class=\"row invoice-item mt-2\"\n                            v-for=\"(item, index) in invoices[invoiceIndex].items\"\n                            :key=\"index\"\n                        >\n                            <div class=\"col-md-5\">\n                                <input\n                                    placeholder\n                                    name=\"name\"\n                                    class=\"form-control\"\n                                    v-model=\"invoices[invoiceIndex].items[index].item\"\n                                />\n                            </div>\n                            <div class=\"col-md-2\">\n                                <input\n                                    placeholder\n                                    name=\"name\"\n                                    class=\"form-control\"\n                                    v-model=\"invoices[invoiceIndex].items[index].quantity\"\n                                />\n                            </div>\n                            <div class=\"col-md-2\">\n                                <input\n                                    placeholder\n                                    type=\"number\"\n                                    min=\"0.01\"\n                                    max=\"100000\"\n                                    name=\"name\"\n                                    class=\"form-control\"\n                                    v-model=\"invoices[invoiceIndex].items[index].price\"\n                                />\n                            </div>\n                            <div\n                                class=\"col-md-2\"\n                            >${{currency(invoices[invoiceIndex].items[index].price * invoices[invoiceIndex].items[index].quantity)}}</div>\n                            <div class=\"col-md-1\">\n                                <base-button\n                                    type=\"warning\"\n                                    @click=\"deleteInvoiceItem(invoiceIndex, index)\"\n                                >&times;</base-button>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div\n                        class=\"invoice-invoice-list\"\n                        v-if=\"invoices[invoiceIndex].tasks.length != 0\"\n                    >\n                        <div class=\"row\">\n                            <div class=\"col-md-12\">\n                                <b>Tasks</b>\n                            </div>\n                        </div>\n\n                        <div\n                            class=\"row invoice-item mt-2\"\n                            v-for=\"(item, index) in invoices[invoiceIndex].tasks\"\n                            :key=\"index\"\n                        >\n                            <div class=\"col-md-11\">\n                                <input\n                                    placeholder\n                                    name=\"name\"\n                                    class=\"form-control\"\n                                    v-model=\"invoices[invoiceIndex].tasks[index]\"\n                                />\n                            </div>\n                            <div class=\"col-md-1\">\n                                <base-button\n                                    type=\"warning\"\n                                    @click=\"deleteInvoiceTask(invoiceIndex, index)\"\n                                >&times;</base-button>\n                            </div>\n                        </div>\n                    </div>\n\n                    <!-- <div v-if=\"invoiceItems.length != 0\" class=\"row invoice-total\">\n                    <div class=\"col-md-7\"></div>\n                    <div class=\"col-md-2 text-right\">\n                        <b>Total</b>\n                    </div>\n                    <div class=\"col-md-2\">\n                        <b>${{ currency(invoiceTotal) }}</b>\n                    </div>\n                    </div>-->\n\n                    <div class=\"row\">\n                        <div class=\"col-md-12 mt-4\">\n                            <base-button\n                                type=\"primary\"\n                                @click=\"goToHeadersStep()\"\n                            >{{ \"Previous Step\" }}</base-button>\n                            <base-button\n                                class=\"float-right\"\n                                type=\"primary\"\n                                @click=\"goToUploadStep()\"\n                            >{{ \"Next Step\" }}</base-button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"step3\" v-if=\"step==3\">\n                <div style=\"max-height:500px;overflow-y:scroll;\">\n                    <table class=\"table\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">Id</th>\n                                <th scope=\"col\">Name</th>\n                                <th scope=\"col\">Upload Status</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr v-for=\"invoice in this.invoices\" :key=\"invoice.id\">\n                                <th scope=\"row\">{{invoice.id}}</th>\n                                <td>{{invoice.name}}</td>\n                                <td\n                                    class=\"text-uppercase\"\n                                    :class=\"[getInvoiceStatusStyle(invoice.upload_status)]\"\n                                >{{invoice.upload_status}}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <div>\n                    Progress..\n                    <base-progress type=\"success\" :value=\"uploadProgress\" />\n                </div>\n                <div>\n                    <base-button\n                        type=\"primary\"\n                        @click=\"goToDetailsStep()\"\n                        :disabled=\"uploading\"\n                    >Previous Step</base-button>\n                    <base-button\n                        class=\"float-right\"\n                        type=\"primary\"\n                        @click=\"uploadInvoices()\"\n                    >Upload!</base-button>\n                </div>\n            </div>\n            <div class=\"step2\" v-if=\"step==4\">\n                <div class=\"mt-6 mb-4 text-center\">\n                    <h1>Import Complete!</h1>\n                    <br />\n                    <b>Orders Uploaded</b>\n                    <br />\n                    <b class=\"text-success\">{{completedUploads}}</b>\n                    <br />\n                    <b>Orders Failed</b>\n                    <br />\n                    <b class=\"text-warning\">{{failedUploads}}</b>\n                    <br />\n                    <br />\n                    <base-button\n                        v-if=\"failedUploads!==0\"\n                        type=\"primary\"\n                        @click=\"goToUploadStep()\"\n                    >{{ \"Retry\" }}</base-button>\n                </div>\n\n                <div class=\"row\">\n                    <div class=\"col-md-12 mt-4\">\n                        <base-button type=\"primary\" @click=\"goToUploadStep()\">{{ \"Previous Step\" }}</base-button>\n                        <base-button\n                            class=\"float-right\"\n                            type=\"primary\"\n                            @click=\"close()\"\n                        >{{ \"Close\" }}</base-button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport api from '@/api/order'\nimport flatPicker from 'vue-flatpickr-component'\nimport xlsx from 'xlsx'\nimport moment from 'moment'\n\n//https://stackoverflow.com/questions/2998784/how-to-output-integers-with-leading-zeros-in-javascript\nfunction pad(num, size) {\n    var s = num + ''\n    while (s.length < size) s = '0' + s\n    return s\n}\n\nfunction now() {\n    var dateObj = new Date()\n    var month = dateObj.getUTCMonth() + 1\n    var day = dateObj.getUTCDate()\n    var year = dateObj.getUTCFullYear()\n\n    const date = year + '-' + pad(month, 2) + '-' + pad(day, 2)\n    //console.log(date)\n    return date\n}\n\nfunction parseFormatted(numStr) {\n    if (!numStr) return 0\n    return parseFloat(numStr.replace(/,/g, '').replace(/\\$/g, ''))\n}\n\nfunction sampleInvoice() {\n    let invoice = new Invoice()\n    invoice.id = '0001234213'\n    invoice.name = 'Sample Invoice Item'\n    invoice.date = '5/12/2019'\n    invoice.salesTax = 5000\n    invoice.total = 25000\n    invoice.address = 'yolo'\n\n    let item = new InvoiceItem()\n    item.item = 'Sample Item'\n    item.description = 'yolo'\n    item.quantity = 1\n    item.price = 25000\n    invoice.items.push(item)\n\n    //return invoice\n    return []\n}\n\nfunction invoiceItems(count) {\n    let invoices = []\n    for (var i = 0; i < count; i++) {\n        let invoice = sampleInvoice()\n        invoice.id = '0012312' + i\n        invoices.push(invoice)\n    }\n    return invoices\n}\n\nclass Invoice {\n    id = ''\n    name = ''\n    address = ''\n    total = 0\n    salesTax = 0\n    customerId = 0\n    customerName = ''\n    notes = ''\n    items = []\n    // array of strings\n    tasks = []\n    // upload status, not an actual part of the model\n    upload_status = 'pending'\n}\n\nclass InvoiceItem {\n    item = ''\n    description = ''\n    quantity = 0\n    price = 0\n}\n\nexport default {\n    name: 'import-invoices-form',\n    components: { flatPicker },\n    props: [],\n    data: () => {\n        return {\n            model: {},\n            //invoices: [...invoiceItems(10)],\n            invoices: [],\n            uploading: false,\n            hasErrors: false,\n            step: 1, // 1, 2, 3 or 4\n            // step: 2, // 1, 2 or 3\n            invoiceIndex: 0, // for details page\n            detailsUploaded: false,\n        }\n    },\n    created() {\n        this.model.date = now()\n    },\n    methods: {\n        reset() {\n            this.invoices = []\n            this.uploading = false\n            this.step = 1\n            this.invoiceIndex = 0\n            this.detailsUploaded = false\n        },\n        goToHeadersStep() {\n            this.step = 1\n        },\n        goToDetailsStep() {\n            this.step = 2\n        },\n        goToUploadStep() {\n            this.step = 3\n        },\n        goToCompleteStep() {\n            this.step = 4\n        },\n        nextInvoice() {\n            if (this.invoiceIndex < this.invoices.length - 1)\n                this.invoiceIndex += 1\n        },\n        previousInvoice() {\n            if (this.invoiceIndex > 0) this.invoiceIndex -= 1\n        },\n        clearInvoiceItems() {\n            //while (this.invoices.length > 0) this.invoices.pop()\n            this.invoices = []\n\n            this.detailsUploaded = false\n            this.invoiceIndex = 0\n        },\n        deleteInvoiceItem(invoiceIndex, index) {\n            this.invoices[invoiceIndex].items.splice(index, 1)\n        },\n        deleteInvoiceTask(invoiceIndex, index) {\n            this.invoices[invoiceIndex].tasks.splice(index, 1)\n        },\n        close() {\n            this.errors.clear()\n            // clear steps and data\n            this.reset()\n\n            this.step = 1\n            this.$emit('cancel')\n        },\n        create() {},\n        importInvoiceHeaders() {\n            this.$refs.invoiceHeadersFile.click()\n        },\n        importInvoiceHeadersEl(e) {\n            //console.log('loading file')\n            var reader = new FileReader()\n            reader.readAsArrayBuffer(e.target.files[0])\n            reader.onload = e => {\n                const data = new Uint8Array(reader.result)\n                const wb = xlsx.read(data, { type: 'array', raw: false })\n\n                const worksheet = wb.Sheets[wb.SheetNames[0]]\n\n                const rows = xlsx.utils.sheet_to_json(worksheet, {\n                    raw: false,\n                    header: 'A', // just generate plain rows\n                })\n\n                rows.splice(0, 4)\n                //console.log(rows)\n\n                const HEADER_CUSTOMER_ID = 'A'\n                const HEADER_INVOICE_NO = 'B'\n                const HEADER_DATE = 'D'\n                const HEADER_TOTAL = 'F'\n                const HEADER_ADDRESS_1 = 'H'\n                const HEADER_ADDRESS_2 = 'I'\n                const HEADER_CITY = 'J'\n                const HEADER_COUNTRY = 'K'\n                const HEADER_ORDER_TYPE = 'L'\n                const HEADER_ASSIGNED_TO = 'M'\n\n                // this.invoiceItems = []\n                let invoices = []\n\n                for (let row of rows) {\n                    // console.log(row)\n                    // console.log(row['Invoice/CM #'])\n                    if (!row[HEADER_INVOICE_NO]) continue\n                    if (row[HEADER_INVOICE_NO] == 'Total') continue\n\n                    let invoice = new Invoice()\n                    invoice.id = row[HEADER_INVOICE_NO]\n                    invoice.name = row[HEADER_CUSTOMER_ID]\n                    invoice.type = row[HEADER_ORDER_TYPE].toLowerCase()\n                    invoice.customerName = row[HEADER_CUSTOMER_ID]\n                    invoice.customerId = row[HEADER_CUSTOMER_ID]\n                    invoice.schedule_at =\n                        moment(row[HEADER_DATE], 'MM/DD/YY').format(\n                            'YYYY-MM-DD'\n                        ) + ' 11:00:00'\n                    // console.log(\n                    //     moment(row[HEADER_DATE], 'MM/DD/YY').format(\n                    //         'YYYY-MM-DD'\n                    //     ) + ' 11:00:00'\n                    // )\n                    invoice.assignee = row[HEADER_ASSIGNED_TO]\n                    //invoice.salesTax = parseFormatted(row['Sales Tax'])\n                    invoice.total = parseFormatted(row[HEADER_TOTAL])\n\n                    let address = row[HEADER_ADDRESS_1] + '\\n'\n                    address += row[HEADER_ADDRESS_2] + '\\n'\n                    address += row[HEADER_CITY] + '\\n'\n                    address += row[HEADER_COUNTRY]\n                    invoice.address = address\n\n                    invoices.push(invoice)\n                }\n\n                this.invoices = invoices\n                this.detailsUploaded = false\n            }\n        },\n        importInvoiceDetails() {\n            this.$refs.invoiceDetailsFile.click()\n        },\n        importInvoiceDetailsEl(e) {\n            var reader = new FileReader()\n            reader.readAsArrayBuffer(e.target.files[0])\n            reader.onload = e => {\n                const data = new Uint8Array(reader.result)\n                const wb = xlsx.read(data, { type: 'array' })\n\n                const worksheet = wb.Sheets[wb.SheetNames[0]]\n\n                const rows = xlsx.utils.sheet_to_json(worksheet, {\n                    raw: false,\n                    header: 'A',\n                })\n\n                // create a map of invoice items\n                let invoiceMap = {}\n                for (let invoice of this.invoices)\n                    invoiceMap[invoice.id] = invoice\n\n                //console.log(invoiceMap)\n\n                const DETAIL_INVOICE_NO = 'A'\n                const DETAIL_NAME = 'B'\n                const DETAIL_DESCRIPTION = 'C'\n                const DETAIL_QUANTITY = 'G'\n                const DETAIL_UNIT_PRICE = 'H'\n\n                rows.splice(0, 4)\n                //console.log(rows)\n                for (let row of rows) {\n                    //console.log(row)\n                    let invoiceId = row[DETAIL_INVOICE_NO]\n                    //console.log(invoiceId)\n                    if (!invoiceId) continue\n\n                    if (!invoiceMap.hasOwnProperty(invoiceId)) continue\n                    //console.log('invoice item valid')\n\n                    const price = row[DETAIL_UNIT_PRICE]\n                    const quantity = row[DETAIL_QUANTITY]\n                    let invoice = invoiceMap[invoiceId]\n                    //console.log(price)\n                    if (!this.isRowATask(row)) {\n                        let item = new InvoiceItem()\n                        item.item = row[DETAIL_NAME]\n                        item.quantity = parseFormatted(row[DETAIL_QUANTITY])\n                        item.price = parseFormatted(row[DETAIL_UNIT_PRICE])\n                        item.description = row[DETAIL_DESCRIPTION]\n\n                        invoice.items.push(item)\n                    } else {\n                        invoice.tasks.push(row[DETAIL_DESCRIPTION])\n                    }\n                }\n\n                this.detailsUploaded = true\n            }\n        },\n        isRowATask(row) {\n            const DETAIL_QUANTITY = 'G'\n            const DETAIL_UNIT_PRICE = 'H'\n\n            const price = row[DETAIL_UNIT_PRICE]\n            if (!price) return true\n            if (parseFormatted(price) == 0) return true\n\n            const quantity = row[DETAIL_QUANTITY]\n            if (!quantity) return true\n            if (parseFormatted(quantity) == 0) return true\n\n            return false\n        },\n        currency(num) {\n            //console.log(num)\n            return num.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n        },\n        calcProgressClass(curStep) {\n            if (curStep < this.step) return { 'step-complete': true }\n            if (curStep == this.step) return { 'step-active': true }\n            if (curStep > this.step) return { 'step-incomplete': true }\n        },\n        getInvoiceStatusStyle(status) {\n            if (status == 'pending') return { 'text-muted': true }\n            if (status == 'complete') return { 'text-success': true }\n            if (status == 'error') return { 'text-warning': true }\n        },\n        uploadInvoices() {\n            this.uploading = true\n\n            // reset all errors to pending\n            this.invoices.map(x => {\n                if (x.upload_status == 'error') x.upload_status = 'pending'\n            })\n            this.uploadOne()\n        },\n        uploadOne() {\n            let nextItem = this.invoices.find(x => x.upload_status == 'pending')\n            if (nextItem == undefined) {\n                // no more items left to upload\n                this.uploading = false\n                this.goToCompleteStep()\n                console.log('no more items')\n                return\n            }\n\n            api.uploadInvoice(nextItem)\n                .then(res => {\n                    nextItem.upload_status = 'complete'\n                })\n                .catch(error => {\n                    nextItem.upload_status = 'error'\n                })\n                .finally(() => {\n                    // continue uploading\n                    this.uploadOne()\n                })\n        },\n    },\n    mounted() {},\n    computed: {\n        invoiceCount() {\n            return this.invoices.length\n        },\n        uploadProgress() {\n            let uploaded = this.invoices.filter(\n                x => x.upload_status == 'complete'\n            ).length\n\n            //console.log()\n            return Math.round((uploaded / this.invoices.length) * 100)\n        },\n        completedUploads() {\n            return this.invoices.filter(x => x.upload_status == 'complete')\n                .length\n        },\n        failedUploads() {\n            return this.invoices.filter(x => x.upload_status != 'complete')\n                .length\n        },\n    },\n}\n</script>\n<style scoped>\n.hide-file-picker {\n    position: fixed;\n    top: -1000;\n    display: none; /* probably wont work on safari*/\n}\n\n.steps {\n    /* height: 300px; */\n}\n\n.step-header {\n    border-radius: 4px;\n    color: white;\n    font-weight: bold;\n    padding: 1em;\n}\n.step-complete {\n    background: #9cc8e1;\n}\n\n.step-active {\n    background: #2184bf;\n}\n\n.step-incomplete {\n    background: #adadad;\n}\n\n.invoice-items-list {\n    overflow-y: auto;\n    overflow-x: hidden;\n    max-height: 400px;\n}\n\n.invoice-item {\n    margin-bottom: 10px;\n}\n</style>"],"sourceRoot":"src/views/Orders"}]}